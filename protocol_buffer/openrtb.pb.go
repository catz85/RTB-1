// Code generated by protoc-gen-go.
// source: openrtb.proto
// DO NOT EDIT!

/*
Package com_google_openrtb is a generated protocol buffer package.

It is generated from these files:
	openrtb.proto

It has these top-level messages:
	BidRequest
	BidResponse
	NativeRequest
	NativeResponse
*/
package protocol_buffer

import "github.com/golang/protobuf/proto"
import "fmt"
import (
	"math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// OpenRTB 2.0: The following list represents the IAB's contextual taxonomy for
// categorization. Standard IDs have been adopted to easily support the
// communication of primary and secondary categories for various objects.
//
// This OpenRTB table has values derived from the IAB Quality Assurance
// Guidelines (QAG). Practitioners should keep in sync with updates to the
// QAG values as published on IAB.net.
type ContentCategory int32

const (
	ContentCategory_UNDEFINED ContentCategory = 0
	ContentCategory_IAB1      ContentCategory = 1
	ContentCategory_IAB1_1    ContentCategory = 2
	ContentCategory_IAB1_2    ContentCategory = 3
	ContentCategory_IAB1_3    ContentCategory = 4
	ContentCategory_IAB1_4    ContentCategory = 5
	ContentCategory_IAB1_5    ContentCategory = 6
	ContentCategory_IAB1_6    ContentCategory = 7
	ContentCategory_IAB1_7    ContentCategory = 8
	ContentCategory_IAB2      ContentCategory = 9
	ContentCategory_IAB2_1    ContentCategory = 10
	ContentCategory_IAB2_2    ContentCategory = 11
	ContentCategory_IAB2_3    ContentCategory = 12
	ContentCategory_IAB2_4    ContentCategory = 13
	ContentCategory_IAB2_5    ContentCategory = 14
	ContentCategory_IAB2_6    ContentCategory = 15
	ContentCategory_IAB2_7    ContentCategory = 16
	ContentCategory_IAB2_8    ContentCategory = 17
	ContentCategory_IAB2_9    ContentCategory = 18
	ContentCategory_IAB2_10   ContentCategory = 19
	ContentCategory_IAB2_11   ContentCategory = 20
	ContentCategory_IAB2_12   ContentCategory = 21
	ContentCategory_IAB2_13   ContentCategory = 22
	ContentCategory_IAB2_14   ContentCategory = 23
	ContentCategory_IAB2_15   ContentCategory = 24
	ContentCategory_IAB2_16   ContentCategory = 25
	ContentCategory_IAB2_17   ContentCategory = 26
	ContentCategory_IAB2_18   ContentCategory = 27
	ContentCategory_IAB2_19   ContentCategory = 28
	ContentCategory_IAB2_20   ContentCategory = 29
	ContentCategory_IAB2_21   ContentCategory = 30
	ContentCategory_IAB2_22   ContentCategory = 31
	ContentCategory_IAB2_23   ContentCategory = 32
	ContentCategory_IAB3      ContentCategory = 33
	ContentCategory_IAB3_1    ContentCategory = 34
	ContentCategory_IAB3_2    ContentCategory = 35
	ContentCategory_IAB3_3    ContentCategory = 36
	ContentCategory_IAB3_4    ContentCategory = 37
	ContentCategory_IAB3_5    ContentCategory = 38
	ContentCategory_IAB3_6    ContentCategory = 39
	ContentCategory_IAB3_7    ContentCategory = 40
	ContentCategory_IAB3_8    ContentCategory = 41
	ContentCategory_IAB3_9    ContentCategory = 42
	ContentCategory_IAB3_10   ContentCategory = 43
	ContentCategory_IAB3_11   ContentCategory = 44
	ContentCategory_IAB3_12   ContentCategory = 45
	ContentCategory_IAB4      ContentCategory = 46
	ContentCategory_IAB4_1    ContentCategory = 47
	ContentCategory_IAB4_2    ContentCategory = 48
	ContentCategory_IAB4_3    ContentCategory = 49
	ContentCategory_IAB4_4    ContentCategory = 50
	ContentCategory_IAB4_5    ContentCategory = 51
	ContentCategory_IAB4_6    ContentCategory = 52
	ContentCategory_IAB4_7    ContentCategory = 53
	ContentCategory_IAB4_8    ContentCategory = 54
	ContentCategory_IAB4_9    ContentCategory = 55
	ContentCategory_IAB4_10   ContentCategory = 56
	ContentCategory_IAB4_11   ContentCategory = 57
	ContentCategory_IAB5      ContentCategory = 58
	ContentCategory_IAB5_1    ContentCategory = 59
	ContentCategory_IAB5_2    ContentCategory = 60
	ContentCategory_IAB5_3    ContentCategory = 61
	ContentCategory_IAB5_4    ContentCategory = 62
	ContentCategory_IAB5_5    ContentCategory = 63
	ContentCategory_IAB5_6    ContentCategory = 64
	ContentCategory_IAB5_7    ContentCategory = 65
	ContentCategory_IAB5_8    ContentCategory = 66
	ContentCategory_IAB5_9    ContentCategory = 67
	ContentCategory_IAB5_10   ContentCategory = 68
	ContentCategory_IAB5_11   ContentCategory = 69
	ContentCategory_IAB5_12   ContentCategory = 70
	ContentCategory_IAB5_13   ContentCategory = 71
	ContentCategory_IAB5_14   ContentCategory = 72
	ContentCategory_IAB5_15   ContentCategory = 73
	ContentCategory_IAB6      ContentCategory = 74
	ContentCategory_IAB6_1    ContentCategory = 75
	ContentCategory_IAB6_2    ContentCategory = 76
	ContentCategory_IAB6_3    ContentCategory = 77
	ContentCategory_IAB6_4    ContentCategory = 78
	ContentCategory_IAB6_5    ContentCategory = 79
	ContentCategory_IAB6_6    ContentCategory = 80
	ContentCategory_IAB6_7    ContentCategory = 81
	ContentCategory_IAB6_8    ContentCategory = 82
	ContentCategory_IAB6_9    ContentCategory = 83
	ContentCategory_IAB7      ContentCategory = 84
	ContentCategory_IAB7_1    ContentCategory = 85
	ContentCategory_IAB7_2    ContentCategory = 86
	ContentCategory_IAB7_3    ContentCategory = 87
	ContentCategory_IAB7_4    ContentCategory = 88
	ContentCategory_IAB7_5    ContentCategory = 89
	ContentCategory_IAB7_6    ContentCategory = 90
	ContentCategory_IAB7_7    ContentCategory = 91
	ContentCategory_IAB7_8    ContentCategory = 92
	ContentCategory_IAB7_9    ContentCategory = 93
	ContentCategory_IAB7_10   ContentCategory = 94
	ContentCategory_IAB7_11   ContentCategory = 95
	ContentCategory_IAB7_12   ContentCategory = 96
	ContentCategory_IAB7_13   ContentCategory = 97
	ContentCategory_IAB7_14   ContentCategory = 98
	ContentCategory_IAB7_15   ContentCategory = 99
	ContentCategory_IAB7_16   ContentCategory = 100
	ContentCategory_IAB7_17   ContentCategory = 101
	ContentCategory_IAB7_18   ContentCategory = 102
	ContentCategory_IAB7_19   ContentCategory = 103
	ContentCategory_IAB7_20   ContentCategory = 104
	ContentCategory_IAB7_21   ContentCategory = 105
	ContentCategory_IAB7_22   ContentCategory = 106
	ContentCategory_IAB7_23   ContentCategory = 107
	ContentCategory_IAB7_24   ContentCategory = 108
	ContentCategory_IAB7_25   ContentCategory = 109
	ContentCategory_IAB7_26   ContentCategory = 110
	ContentCategory_IAB7_27   ContentCategory = 111
	ContentCategory_IAB7_28   ContentCategory = 112
	ContentCategory_IAB7_29   ContentCategory = 113
	ContentCategory_IAB7_30   ContentCategory = 114
	ContentCategory_IAB7_31   ContentCategory = 115
	ContentCategory_IAB7_32   ContentCategory = 116
	ContentCategory_IAB7_33   ContentCategory = 117
	ContentCategory_IAB7_34   ContentCategory = 118
	ContentCategory_IAB7_35   ContentCategory = 119
	ContentCategory_IAB7_36   ContentCategory = 120
	ContentCategory_IAB7_37   ContentCategory = 121
	ContentCategory_IAB7_38   ContentCategory = 122
	ContentCategory_IAB7_39   ContentCategory = 123
	ContentCategory_IAB7_40   ContentCategory = 124
	ContentCategory_IAB7_41   ContentCategory = 125
	ContentCategory_IAB7_42   ContentCategory = 126
	ContentCategory_IAB7_43   ContentCategory = 127
	ContentCategory_IAB7_44   ContentCategory = 128
	ContentCategory_IAB7_45   ContentCategory = 129
	ContentCategory_IAB8      ContentCategory = 130
	ContentCategory_IAB8_1    ContentCategory = 131
	ContentCategory_IAB8_2    ContentCategory = 132
	ContentCategory_IAB8_3    ContentCategory = 133
	ContentCategory_IAB8_4    ContentCategory = 134
	ContentCategory_IAB8_5    ContentCategory = 135
	ContentCategory_IAB8_6    ContentCategory = 136
	ContentCategory_IAB8_7    ContentCategory = 137
	ContentCategory_IAB8_8    ContentCategory = 138
	ContentCategory_IAB8_9    ContentCategory = 139
	ContentCategory_IAB8_10   ContentCategory = 140
	ContentCategory_IAB8_11   ContentCategory = 141
	ContentCategory_IAB8_12   ContentCategory = 142
	ContentCategory_IAB8_13   ContentCategory = 143
	ContentCategory_IAB8_14   ContentCategory = 144
	ContentCategory_IAB8_15   ContentCategory = 145
	ContentCategory_IAB8_16   ContentCategory = 146
	ContentCategory_IAB8_17   ContentCategory = 147
	ContentCategory_IAB8_18   ContentCategory = 148
	ContentCategory_IAB9      ContentCategory = 149
	ContentCategory_IAB9_1    ContentCategory = 150
	ContentCategory_IAB9_2    ContentCategory = 151
	ContentCategory_IAB9_3    ContentCategory = 152
	ContentCategory_IAB9_4    ContentCategory = 153
	ContentCategory_IAB9_5    ContentCategory = 154
	ContentCategory_IAB9_6    ContentCategory = 155
	ContentCategory_IAB9_7    ContentCategory = 156
	ContentCategory_IAB9_8    ContentCategory = 157
	ContentCategory_IAB9_9    ContentCategory = 158
	ContentCategory_IAB9_10   ContentCategory = 159
	ContentCategory_IAB9_11   ContentCategory = 160
	ContentCategory_IAB9_12   ContentCategory = 161
	ContentCategory_IAB9_13   ContentCategory = 162
	ContentCategory_IAB9_14   ContentCategory = 163
	ContentCategory_IAB9_15   ContentCategory = 164
	ContentCategory_IAB9_16   ContentCategory = 165
	ContentCategory_IAB9_17   ContentCategory = 166
	ContentCategory_IAB9_18   ContentCategory = 167
	ContentCategory_IAB9_19   ContentCategory = 168
	ContentCategory_IAB9_20   ContentCategory = 169
	ContentCategory_IAB9_21   ContentCategory = 170
	ContentCategory_IAB9_22   ContentCategory = 171
	ContentCategory_IAB9_23   ContentCategory = 172
	ContentCategory_IAB9_24   ContentCategory = 173
	ContentCategory_IAB9_25   ContentCategory = 174
	ContentCategory_IAB9_26   ContentCategory = 175
	ContentCategory_IAB9_27   ContentCategory = 176
	ContentCategory_IAB9_28   ContentCategory = 177
	ContentCategory_IAB9_29   ContentCategory = 178
	ContentCategory_IAB9_30   ContentCategory = 179
	ContentCategory_IAB9_31   ContentCategory = 180
	ContentCategory_IAB10     ContentCategory = 181
	ContentCategory_IAB10_1   ContentCategory = 182
	ContentCategory_IAB10_2   ContentCategory = 183
	ContentCategory_IAB10_3   ContentCategory = 184
	ContentCategory_IAB10_4   ContentCategory = 185
	ContentCategory_IAB10_5   ContentCategory = 186
	ContentCategory_IAB10_6   ContentCategory = 187
	ContentCategory_IAB10_7   ContentCategory = 188
	ContentCategory_IAB10_8   ContentCategory = 189
	ContentCategory_IAB10_9   ContentCategory = 190
	ContentCategory_IAB11     ContentCategory = 191
	ContentCategory_IAB11_1   ContentCategory = 192
	ContentCategory_IAB11_2   ContentCategory = 193
	ContentCategory_IAB11_3   ContentCategory = 194
	ContentCategory_IAB11_4   ContentCategory = 195
	ContentCategory_IAB11_5   ContentCategory = 196
	ContentCategory_IAB12     ContentCategory = 197
	ContentCategory_IAB12_1   ContentCategory = 198
	ContentCategory_IAB12_2   ContentCategory = 199
	ContentCategory_IAB12_3   ContentCategory = 200
	ContentCategory_IAB13     ContentCategory = 201
	ContentCategory_IAB13_1   ContentCategory = 202
	ContentCategory_IAB13_2   ContentCategory = 203
	ContentCategory_IAB13_3   ContentCategory = 204
	ContentCategory_IAB13_4   ContentCategory = 205
	ContentCategory_IAB13_5   ContentCategory = 206
	ContentCategory_IAB13_6   ContentCategory = 207
	ContentCategory_IAB13_7   ContentCategory = 208
	ContentCategory_IAB13_8   ContentCategory = 209
	ContentCategory_IAB13_9   ContentCategory = 210
	ContentCategory_IAB13_10  ContentCategory = 211
	ContentCategory_IAB13_11  ContentCategory = 212
	ContentCategory_IAB13_12  ContentCategory = 213
	ContentCategory_IAB14     ContentCategory = 214
	ContentCategory_IAB14_1   ContentCategory = 215
	ContentCategory_IAB14_2   ContentCategory = 216
	ContentCategory_IAB14_3   ContentCategory = 217
	ContentCategory_IAB14_4   ContentCategory = 218
	ContentCategory_IAB14_5   ContentCategory = 219
	ContentCategory_IAB14_6   ContentCategory = 220
	ContentCategory_IAB14_7   ContentCategory = 221
	ContentCategory_IAB14_8   ContentCategory = 222
	ContentCategory_IAB15     ContentCategory = 223
	ContentCategory_IAB15_1   ContentCategory = 224
	ContentCategory_IAB15_2   ContentCategory = 225
	ContentCategory_IAB15_3   ContentCategory = 226
	ContentCategory_IAB15_4   ContentCategory = 227
	ContentCategory_IAB15_5   ContentCategory = 228
	ContentCategory_IAB15_6   ContentCategory = 229
	ContentCategory_IAB15_7   ContentCategory = 230
	ContentCategory_IAB15_8   ContentCategory = 231
	ContentCategory_IAB15_9   ContentCategory = 232
	ContentCategory_IAB15_10  ContentCategory = 233
	ContentCategory_IAB16     ContentCategory = 234
	ContentCategory_IAB16_1   ContentCategory = 235
	ContentCategory_IAB16_2   ContentCategory = 236
	ContentCategory_IAB16_3   ContentCategory = 237
	ContentCategory_IAB16_4   ContentCategory = 238
	ContentCategory_IAB16_5   ContentCategory = 239
	ContentCategory_IAB16_6   ContentCategory = 240
	ContentCategory_IAB16_7   ContentCategory = 241
	ContentCategory_IAB17     ContentCategory = 242
	ContentCategory_IAB17_1   ContentCategory = 243
	ContentCategory_IAB17_2   ContentCategory = 244
	ContentCategory_IAB17_3   ContentCategory = 245
	ContentCategory_IAB17_4   ContentCategory = 246
	ContentCategory_IAB17_5   ContentCategory = 247
	ContentCategory_IAB17_6   ContentCategory = 248
	ContentCategory_IAB17_7   ContentCategory = 249
	ContentCategory_IAB17_8   ContentCategory = 250
	ContentCategory_IAB17_9   ContentCategory = 251
	ContentCategory_IAB17_10  ContentCategory = 252
	ContentCategory_IAB17_11  ContentCategory = 253
	ContentCategory_IAB17_12  ContentCategory = 254
	ContentCategory_IAB17_13  ContentCategory = 255
	ContentCategory_IAB17_14  ContentCategory = 256
	ContentCategory_IAB17_15  ContentCategory = 257
	ContentCategory_IAB17_16  ContentCategory = 258
	ContentCategory_IAB17_17  ContentCategory = 259
	ContentCategory_IAB17_18  ContentCategory = 260
	ContentCategory_IAB17_19  ContentCategory = 261
	ContentCategory_IAB17_20  ContentCategory = 262
	ContentCategory_IAB17_21  ContentCategory = 263
	ContentCategory_IAB17_22  ContentCategory = 264
	ContentCategory_IAB17_23  ContentCategory = 265
	ContentCategory_IAB17_24  ContentCategory = 266
	ContentCategory_IAB17_25  ContentCategory = 267
	ContentCategory_IAB17_26  ContentCategory = 268
	ContentCategory_IAB17_27  ContentCategory = 269
	ContentCategory_IAB17_28  ContentCategory = 270
	ContentCategory_IAB17_29  ContentCategory = 271
	ContentCategory_IAB17_30  ContentCategory = 272
	ContentCategory_IAB17_31  ContentCategory = 273
	ContentCategory_IAB17_32  ContentCategory = 274
	ContentCategory_IAB17_33  ContentCategory = 275
	ContentCategory_IAB17_34  ContentCategory = 276
	ContentCategory_IAB17_35  ContentCategory = 277
	ContentCategory_IAB17_36  ContentCategory = 278
	ContentCategory_IAB17_37  ContentCategory = 279
	ContentCategory_IAB17_38  ContentCategory = 280
	ContentCategory_IAB17_39  ContentCategory = 281
	ContentCategory_IAB17_40  ContentCategory = 282
	ContentCategory_IAB17_41  ContentCategory = 283
	ContentCategory_IAB17_42  ContentCategory = 284
	ContentCategory_IAB17_43  ContentCategory = 285
	ContentCategory_IAB17_44  ContentCategory = 286
	ContentCategory_IAB18     ContentCategory = 287
	ContentCategory_IAB18_1   ContentCategory = 288
	ContentCategory_IAB18_2   ContentCategory = 289
	ContentCategory_IAB18_3   ContentCategory = 290
	ContentCategory_IAB18_4   ContentCategory = 291
	ContentCategory_IAB18_5   ContentCategory = 292
	ContentCategory_IAB18_6   ContentCategory = 293
	ContentCategory_IAB19     ContentCategory = 294
	ContentCategory_IAB19_1   ContentCategory = 295
	ContentCategory_IAB19_2   ContentCategory = 296
	ContentCategory_IAB19_3   ContentCategory = 297
	ContentCategory_IAB19_4   ContentCategory = 298
	ContentCategory_IAB19_5   ContentCategory = 299
	ContentCategory_IAB19_6   ContentCategory = 300
	ContentCategory_IAB19_7   ContentCategory = 301
	ContentCategory_IAB19_8   ContentCategory = 302
	ContentCategory_IAB19_9   ContentCategory = 303
	ContentCategory_IAB19_10  ContentCategory = 304
	ContentCategory_IAB19_11  ContentCategory = 305
	ContentCategory_IAB19_12  ContentCategory = 306
	ContentCategory_IAB19_13  ContentCategory = 307
	ContentCategory_IAB19_14  ContentCategory = 308
	ContentCategory_IAB19_15  ContentCategory = 309
	ContentCategory_IAB19_16  ContentCategory = 310
	ContentCategory_IAB19_17  ContentCategory = 311
	ContentCategory_IAB19_18  ContentCategory = 312
	ContentCategory_IAB19_19  ContentCategory = 313
	ContentCategory_IAB19_20  ContentCategory = 314
	ContentCategory_IAB19_21  ContentCategory = 315
	ContentCategory_IAB19_22  ContentCategory = 316
	ContentCategory_IAB19_23  ContentCategory = 317
	ContentCategory_IAB19_24  ContentCategory = 318
	ContentCategory_IAB19_25  ContentCategory = 319
	ContentCategory_IAB19_26  ContentCategory = 320
	ContentCategory_IAB19_27  ContentCategory = 321
	ContentCategory_IAB19_28  ContentCategory = 322
	ContentCategory_IAB19_29  ContentCategory = 323
	ContentCategory_IAB19_30  ContentCategory = 324
	ContentCategory_IAB19_31  ContentCategory = 325
	ContentCategory_IAB19_32  ContentCategory = 326
	ContentCategory_IAB19_33  ContentCategory = 327
	ContentCategory_IAB19_34  ContentCategory = 328
	ContentCategory_IAB19_35  ContentCategory = 329
	ContentCategory_IAB19_36  ContentCategory = 330
	ContentCategory_IAB20     ContentCategory = 331
	ContentCategory_IAB20_1   ContentCategory = 332
	ContentCategory_IAB20_2   ContentCategory = 333
	ContentCategory_IAB20_3   ContentCategory = 334
	ContentCategory_IAB20_4   ContentCategory = 335
	ContentCategory_IAB20_5   ContentCategory = 336
	ContentCategory_IAB20_6   ContentCategory = 337
	ContentCategory_IAB20_7   ContentCategory = 338
	ContentCategory_IAB20_8   ContentCategory = 339
	ContentCategory_IAB20_9   ContentCategory = 340
	ContentCategory_IAB20_10  ContentCategory = 341
	ContentCategory_IAB20_11  ContentCategory = 342
	ContentCategory_IAB20_12  ContentCategory = 343
	ContentCategory_IAB20_13  ContentCategory = 344
	ContentCategory_IAB20_14  ContentCategory = 345
	ContentCategory_IAB20_15  ContentCategory = 346
	ContentCategory_IAB20_16  ContentCategory = 347
	ContentCategory_IAB20_17  ContentCategory = 348
	ContentCategory_IAB20_18  ContentCategory = 349
	ContentCategory_IAB20_19  ContentCategory = 350
	ContentCategory_IAB20_20  ContentCategory = 351
	ContentCategory_IAB20_21  ContentCategory = 352
	ContentCategory_IAB20_22  ContentCategory = 353
	ContentCategory_IAB20_23  ContentCategory = 354
	ContentCategory_IAB20_24  ContentCategory = 355
	ContentCategory_IAB20_25  ContentCategory = 356
	ContentCategory_IAB20_26  ContentCategory = 357
	ContentCategory_IAB20_27  ContentCategory = 358
	ContentCategory_IAB21     ContentCategory = 359
	ContentCategory_IAB21_1   ContentCategory = 360
	ContentCategory_IAB21_2   ContentCategory = 361
	ContentCategory_IAB21_3   ContentCategory = 362
	ContentCategory_IAB22     ContentCategory = 363
	ContentCategory_IAB22_1   ContentCategory = 364
	ContentCategory_IAB22_2   ContentCategory = 365
	ContentCategory_IAB22_3   ContentCategory = 366
	ContentCategory_IAB22_4   ContentCategory = 367
	ContentCategory_IAB23     ContentCategory = 368
	ContentCategory_IAB23_1   ContentCategory = 369
	ContentCategory_IAB23_2   ContentCategory = 370
	ContentCategory_IAB23_3   ContentCategory = 371
	ContentCategory_IAB23_4   ContentCategory = 372
	ContentCategory_IAB23_5   ContentCategory = 373
	ContentCategory_IAB23_6   ContentCategory = 374
	ContentCategory_IAB23_7   ContentCategory = 375
	ContentCategory_IAB23_8   ContentCategory = 376
	ContentCategory_IAB23_9   ContentCategory = 377
	ContentCategory_IAB23_10  ContentCategory = 378
	ContentCategory_IAB24     ContentCategory = 379
	ContentCategory_IAB25     ContentCategory = 380
	ContentCategory_IAB25_1   ContentCategory = 381
	ContentCategory_IAB25_2   ContentCategory = 382
	ContentCategory_IAB25_3   ContentCategory = 383
	ContentCategory_IAB25_4   ContentCategory = 384
	ContentCategory_IAB25_5   ContentCategory = 385
	ContentCategory_IAB25_6   ContentCategory = 386
	ContentCategory_IAB25_7   ContentCategory = 387
	ContentCategory_IAB26     ContentCategory = 388
	ContentCategory_IAB26_1   ContentCategory = 389
	ContentCategory_IAB26_2   ContentCategory = 390
	ContentCategory_IAB26_3   ContentCategory = 391
	ContentCategory_IAB26_4   ContentCategory = 392
)

var ContentCategory_name = map[int32]string{
	0:   "UNDEFINED",
	1:   "IAB1",
	2:   "IAB1_1",
	3:   "IAB1_2",
	4:   "IAB1_3",
	5:   "IAB1_4",
	6:   "IAB1_5",
	7:   "IAB1_6",
	8:   "IAB1_7",
	9:   "IAB2",
	10:  "IAB2_1",
	11:  "IAB2_2",
	12:  "IAB2_3",
	13:  "IAB2_4",
	14:  "IAB2_5",
	15:  "IAB2_6",
	16:  "IAB2_7",
	17:  "IAB2_8",
	18:  "IAB2_9",
	19:  "IAB2_10",
	20:  "IAB2_11",
	21:  "IAB2_12",
	22:  "IAB2_13",
	23:  "IAB2_14",
	24:  "IAB2_15",
	25:  "IAB2_16",
	26:  "IAB2_17",
	27:  "IAB2_18",
	28:  "IAB2_19",
	29:  "IAB2_20",
	30:  "IAB2_21",
	31:  "IAB2_22",
	32:  "IAB2_23",
	33:  "IAB3",
	34:  "IAB3_1",
	35:  "IAB3_2",
	36:  "IAB3_3",
	37:  "IAB3_4",
	38:  "IAB3_5",
	39:  "IAB3_6",
	40:  "IAB3_7",
	41:  "IAB3_8",
	42:  "IAB3_9",
	43:  "IAB3_10",
	44:  "IAB3_11",
	45:  "IAB3_12",
	46:  "IAB4",
	47:  "IAB4_1",
	48:  "IAB4_2",
	49:  "IAB4_3",
	50:  "IAB4_4",
	51:  "IAB4_5",
	52:  "IAB4_6",
	53:  "IAB4_7",
	54:  "IAB4_8",
	55:  "IAB4_9",
	56:  "IAB4_10",
	57:  "IAB4_11",
	58:  "IAB5",
	59:  "IAB5_1",
	60:  "IAB5_2",
	61:  "IAB5_3",
	62:  "IAB5_4",
	63:  "IAB5_5",
	64:  "IAB5_6",
	65:  "IAB5_7",
	66:  "IAB5_8",
	67:  "IAB5_9",
	68:  "IAB5_10",
	69:  "IAB5_11",
	70:  "IAB5_12",
	71:  "IAB5_13",
	72:  "IAB5_14",
	73:  "IAB5_15",
	74:  "IAB6",
	75:  "IAB6_1",
	76:  "IAB6_2",
	77:  "IAB6_3",
	78:  "IAB6_4",
	79:  "IAB6_5",
	80:  "IAB6_6",
	81:  "IAB6_7",
	82:  "IAB6_8",
	83:  "IAB6_9",
	84:  "IAB7",
	85:  "IAB7_1",
	86:  "IAB7_2",
	87:  "IAB7_3",
	88:  "IAB7_4",
	89:  "IAB7_5",
	90:  "IAB7_6",
	91:  "IAB7_7",
	92:  "IAB7_8",
	93:  "IAB7_9",
	94:  "IAB7_10",
	95:  "IAB7_11",
	96:  "IAB7_12",
	97:  "IAB7_13",
	98:  "IAB7_14",
	99:  "IAB7_15",
	100: "IAB7_16",
	101: "IAB7_17",
	102: "IAB7_18",
	103: "IAB7_19",
	104: "IAB7_20",
	105: "IAB7_21",
	106: "IAB7_22",
	107: "IAB7_23",
	108: "IAB7_24",
	109: "IAB7_25",
	110: "IAB7_26",
	111: "IAB7_27",
	112: "IAB7_28",
	113: "IAB7_29",
	114: "IAB7_30",
	115: "IAB7_31",
	116: "IAB7_32",
	117: "IAB7_33",
	118: "IAB7_34",
	119: "IAB7_35",
	120: "IAB7_36",
	121: "IAB7_37",
	122: "IAB7_38",
	123: "IAB7_39",
	124: "IAB7_40",
	125: "IAB7_41",
	126: "IAB7_42",
	127: "IAB7_43",
	128: "IAB7_44",
	129: "IAB7_45",
	130: "IAB8",
	131: "IAB8_1",
	132: "IAB8_2",
	133: "IAB8_3",
	134: "IAB8_4",
	135: "IAB8_5",
	136: "IAB8_6",
	137: "IAB8_7",
	138: "IAB8_8",
	139: "IAB8_9",
	140: "IAB8_10",
	141: "IAB8_11",
	142: "IAB8_12",
	143: "IAB8_13",
	144: "IAB8_14",
	145: "IAB8_15",
	146: "IAB8_16",
	147: "IAB8_17",
	148: "IAB8_18",
	149: "IAB9",
	150: "IAB9_1",
	151: "IAB9_2",
	152: "IAB9_3",
	153: "IAB9_4",
	154: "IAB9_5",
	155: "IAB9_6",
	156: "IAB9_7",
	157: "IAB9_8",
	158: "IAB9_9",
	159: "IAB9_10",
	160: "IAB9_11",
	161: "IAB9_12",
	162: "IAB9_13",
	163: "IAB9_14",
	164: "IAB9_15",
	165: "IAB9_16",
	166: "IAB9_17",
	167: "IAB9_18",
	168: "IAB9_19",
	169: "IAB9_20",
	170: "IAB9_21",
	171: "IAB9_22",
	172: "IAB9_23",
	173: "IAB9_24",
	174: "IAB9_25",
	175: "IAB9_26",
	176: "IAB9_27",
	177: "IAB9_28",
	178: "IAB9_29",
	179: "IAB9_30",
	180: "IAB9_31",
	181: "IAB10",
	182: "IAB10_1",
	183: "IAB10_2",
	184: "IAB10_3",
	185: "IAB10_4",
	186: "IAB10_5",
	187: "IAB10_6",
	188: "IAB10_7",
	189: "IAB10_8",
	190: "IAB10_9",
	191: "IAB11",
	192: "IAB11_1",
	193: "IAB11_2",
	194: "IAB11_3",
	195: "IAB11_4",
	196: "IAB11_5",
	197: "IAB12",
	198: "IAB12_1",
	199: "IAB12_2",
	200: "IAB12_3",
	201: "IAB13",
	202: "IAB13_1",
	203: "IAB13_2",
	204: "IAB13_3",
	205: "IAB13_4",
	206: "IAB13_5",
	207: "IAB13_6",
	208: "IAB13_7",
	209: "IAB13_8",
	210: "IAB13_9",
	211: "IAB13_10",
	212: "IAB13_11",
	213: "IAB13_12",
	214: "IAB14",
	215: "IAB14_1",
	216: "IAB14_2",
	217: "IAB14_3",
	218: "IAB14_4",
	219: "IAB14_5",
	220: "IAB14_6",
	221: "IAB14_7",
	222: "IAB14_8",
	223: "IAB15",
	224: "IAB15_1",
	225: "IAB15_2",
	226: "IAB15_3",
	227: "IAB15_4",
	228: "IAB15_5",
	229: "IAB15_6",
	230: "IAB15_7",
	231: "IAB15_8",
	232: "IAB15_9",
	233: "IAB15_10",
	234: "IAB16",
	235: "IAB16_1",
	236: "IAB16_2",
	237: "IAB16_3",
	238: "IAB16_4",
	239: "IAB16_5",
	240: "IAB16_6",
	241: "IAB16_7",
	242: "IAB17",
	243: "IAB17_1",
	244: "IAB17_2",
	245: "IAB17_3",
	246: "IAB17_4",
	247: "IAB17_5",
	248: "IAB17_6",
	249: "IAB17_7",
	250: "IAB17_8",
	251: "IAB17_9",
	252: "IAB17_10",
	253: "IAB17_11",
	254: "IAB17_12",
	255: "IAB17_13",
	256: "IAB17_14",
	257: "IAB17_15",
	258: "IAB17_16",
	259: "IAB17_17",
	260: "IAB17_18",
	261: "IAB17_19",
	262: "IAB17_20",
	263: "IAB17_21",
	264: "IAB17_22",
	265: "IAB17_23",
	266: "IAB17_24",
	267: "IAB17_25",
	268: "IAB17_26",
	269: "IAB17_27",
	270: "IAB17_28",
	271: "IAB17_29",
	272: "IAB17_30",
	273: "IAB17_31",
	274: "IAB17_32",
	275: "IAB17_33",
	276: "IAB17_34",
	277: "IAB17_35",
	278: "IAB17_36",
	279: "IAB17_37",
	280: "IAB17_38",
	281: "IAB17_39",
	282: "IAB17_40",
	283: "IAB17_41",
	284: "IAB17_42",
	285: "IAB17_43",
	286: "IAB17_44",
	287: "IAB18",
	288: "IAB18_1",
	289: "IAB18_2",
	290: "IAB18_3",
	291: "IAB18_4",
	292: "IAB18_5",
	293: "IAB18_6",
	294: "IAB19",
	295: "IAB19_1",
	296: "IAB19_2",
	297: "IAB19_3",
	298: "IAB19_4",
	299: "IAB19_5",
	300: "IAB19_6",
	301: "IAB19_7",
	302: "IAB19_8",
	303: "IAB19_9",
	304: "IAB19_10",
	305: "IAB19_11",
	306: "IAB19_12",
	307: "IAB19_13",
	308: "IAB19_14",
	309: "IAB19_15",
	310: "IAB19_16",
	311: "IAB19_17",
	312: "IAB19_18",
	313: "IAB19_19",
	314: "IAB19_20",
	315: "IAB19_21",
	316: "IAB19_22",
	317: "IAB19_23",
	318: "IAB19_24",
	319: "IAB19_25",
	320: "IAB19_26",
	321: "IAB19_27",
	322: "IAB19_28",
	323: "IAB19_29",
	324: "IAB19_30",
	325: "IAB19_31",
	326: "IAB19_32",
	327: "IAB19_33",
	328: "IAB19_34",
	329: "IAB19_35",
	330: "IAB19_36",
	331: "IAB20",
	332: "IAB20_1",
	333: "IAB20_2",
	334: "IAB20_3",
	335: "IAB20_4",
	336: "IAB20_5",
	337: "IAB20_6",
	338: "IAB20_7",
	339: "IAB20_8",
	340: "IAB20_9",
	341: "IAB20_10",
	342: "IAB20_11",
	343: "IAB20_12",
	344: "IAB20_13",
	345: "IAB20_14",
	346: "IAB20_15",
	347: "IAB20_16",
	348: "IAB20_17",
	349: "IAB20_18",
	350: "IAB20_19",
	351: "IAB20_20",
	352: "IAB20_21",
	353: "IAB20_22",
	354: "IAB20_23",
	355: "IAB20_24",
	356: "IAB20_25",
	357: "IAB20_26",
	358: "IAB20_27",
	359: "IAB21",
	360: "IAB21_1",
	361: "IAB21_2",
	362: "IAB21_3",
	363: "IAB22",
	364: "IAB22_1",
	365: "IAB22_2",
	366: "IAB22_3",
	367: "IAB22_4",
	368: "IAB23",
	369: "IAB23_1",
	370: "IAB23_2",
	371: "IAB23_3",
	372: "IAB23_4",
	373: "IAB23_5",
	374: "IAB23_6",
	375: "IAB23_7",
	376: "IAB23_8",
	377: "IAB23_9",
	378: "IAB23_10",
	379: "IAB24",
	380: "IAB25",
	381: "IAB25_1",
	382: "IAB25_2",
	383: "IAB25_3",
	384: "IAB25_4",
	385: "IAB25_5",
	386: "IAB25_6",
	387: "IAB25_7",
	388: "IAB26",
	389: "IAB26_1",
	390: "IAB26_2",
	391: "IAB26_3",
	392: "IAB26_4",
}
var ContentCategory_value = map[string]int32{
	"UNDEFINED": 0,
	"IAB1":      1,
	"IAB1_1":    2,
	"IAB1_2":    3,
	"IAB1_3":    4,
	"IAB1_4":    5,
	"IAB1_5":    6,
	"IAB1_6":    7,
	"IAB1_7":    8,
	"IAB2":      9,
	"IAB2_1":    10,
	"IAB2_2":    11,
	"IAB2_3":    12,
	"IAB2_4":    13,
	"IAB2_5":    14,
	"IAB2_6":    15,
	"IAB2_7":    16,
	"IAB2_8":    17,
	"IAB2_9":    18,
	"IAB2_10":   19,
	"IAB2_11":   20,
	"IAB2_12":   21,
	"IAB2_13":   22,
	"IAB2_14":   23,
	"IAB2_15":   24,
	"IAB2_16":   25,
	"IAB2_17":   26,
	"IAB2_18":   27,
	"IAB2_19":   28,
	"IAB2_20":   29,
	"IAB2_21":   30,
	"IAB2_22":   31,
	"IAB2_23":   32,
	"IAB3":      33,
	"IAB3_1":    34,
	"IAB3_2":    35,
	"IAB3_3":    36,
	"IAB3_4":    37,
	"IAB3_5":    38,
	"IAB3_6":    39,
	"IAB3_7":    40,
	"IAB3_8":    41,
	"IAB3_9":    42,
	"IAB3_10":   43,
	"IAB3_11":   44,
	"IAB3_12":   45,
	"IAB4":      46,
	"IAB4_1":    47,
	"IAB4_2":    48,
	"IAB4_3":    49,
	"IAB4_4":    50,
	"IAB4_5":    51,
	"IAB4_6":    52,
	"IAB4_7":    53,
	"IAB4_8":    54,
	"IAB4_9":    55,
	"IAB4_10":   56,
	"IAB4_11":   57,
	"IAB5":      58,
	"IAB5_1":    59,
	"IAB5_2":    60,
	"IAB5_3":    61,
	"IAB5_4":    62,
	"IAB5_5":    63,
	"IAB5_6":    64,
	"IAB5_7":    65,
	"IAB5_8":    66,
	"IAB5_9":    67,
	"IAB5_10":   68,
	"IAB5_11":   69,
	"IAB5_12":   70,
	"IAB5_13":   71,
	"IAB5_14":   72,
	"IAB5_15":   73,
	"IAB6":      74,
	"IAB6_1":    75,
	"IAB6_2":    76,
	"IAB6_3":    77,
	"IAB6_4":    78,
	"IAB6_5":    79,
	"IAB6_6":    80,
	"IAB6_7":    81,
	"IAB6_8":    82,
	"IAB6_9":    83,
	"IAB7":      84,
	"IAB7_1":    85,
	"IAB7_2":    86,
	"IAB7_3":    87,
	"IAB7_4":    88,
	"IAB7_5":    89,
	"IAB7_6":    90,
	"IAB7_7":    91,
	"IAB7_8":    92,
	"IAB7_9":    93,
	"IAB7_10":   94,
	"IAB7_11":   95,
	"IAB7_12":   96,
	"IAB7_13":   97,
	"IAB7_14":   98,
	"IAB7_15":   99,
	"IAB7_16":   100,
	"IAB7_17":   101,
	"IAB7_18":   102,
	"IAB7_19":   103,
	"IAB7_20":   104,
	"IAB7_21":   105,
	"IAB7_22":   106,
	"IAB7_23":   107,
	"IAB7_24":   108,
	"IAB7_25":   109,
	"IAB7_26":   110,
	"IAB7_27":   111,
	"IAB7_28":   112,
	"IAB7_29":   113,
	"IAB7_30":   114,
	"IAB7_31":   115,
	"IAB7_32":   116,
	"IAB7_33":   117,
	"IAB7_34":   118,
	"IAB7_35":   119,
	"IAB7_36":   120,
	"IAB7_37":   121,
	"IAB7_38":   122,
	"IAB7_39":   123,
	"IAB7_40":   124,
	"IAB7_41":   125,
	"IAB7_42":   126,
	"IAB7_43":   127,
	"IAB7_44":   128,
	"IAB7_45":   129,
	"IAB8":      130,
	"IAB8_1":    131,
	"IAB8_2":    132,
	"IAB8_3":    133,
	"IAB8_4":    134,
	"IAB8_5":    135,
	"IAB8_6":    136,
	"IAB8_7":    137,
	"IAB8_8":    138,
	"IAB8_9":    139,
	"IAB8_10":   140,
	"IAB8_11":   141,
	"IAB8_12":   142,
	"IAB8_13":   143,
	"IAB8_14":   144,
	"IAB8_15":   145,
	"IAB8_16":   146,
	"IAB8_17":   147,
	"IAB8_18":   148,
	"IAB9":      149,
	"IAB9_1":    150,
	"IAB9_2":    151,
	"IAB9_3":    152,
	"IAB9_4":    153,
	"IAB9_5":    154,
	"IAB9_6":    155,
	"IAB9_7":    156,
	"IAB9_8":    157,
	"IAB9_9":    158,
	"IAB9_10":   159,
	"IAB9_11":   160,
	"IAB9_12":   161,
	"IAB9_13":   162,
	"IAB9_14":   163,
	"IAB9_15":   164,
	"IAB9_16":   165,
	"IAB9_17":   166,
	"IAB9_18":   167,
	"IAB9_19":   168,
	"IAB9_20":   169,
	"IAB9_21":   170,
	"IAB9_22":   171,
	"IAB9_23":   172,
	"IAB9_24":   173,
	"IAB9_25":   174,
	"IAB9_26":   175,
	"IAB9_27":   176,
	"IAB9_28":   177,
	"IAB9_29":   178,
	"IAB9_30":   179,
	"IAB9_31":   180,
	"IAB10":     181,
	"IAB10_1":   182,
	"IAB10_2":   183,
	"IAB10_3":   184,
	"IAB10_4":   185,
	"IAB10_5":   186,
	"IAB10_6":   187,
	"IAB10_7":   188,
	"IAB10_8":   189,
	"IAB10_9":   190,
	"IAB11":     191,
	"IAB11_1":   192,
	"IAB11_2":   193,
	"IAB11_3":   194,
	"IAB11_4":   195,
	"IAB11_5":   196,
	"IAB12":     197,
	"IAB12_1":   198,
	"IAB12_2":   199,
	"IAB12_3":   200,
	"IAB13":     201,
	"IAB13_1":   202,
	"IAB13_2":   203,
	"IAB13_3":   204,
	"IAB13_4":   205,
	"IAB13_5":   206,
	"IAB13_6":   207,
	"IAB13_7":   208,
	"IAB13_8":   209,
	"IAB13_9":   210,
	"IAB13_10":  211,
	"IAB13_11":  212,
	"IAB13_12":  213,
	"IAB14":     214,
	"IAB14_1":   215,
	"IAB14_2":   216,
	"IAB14_3":   217,
	"IAB14_4":   218,
	"IAB14_5":   219,
	"IAB14_6":   220,
	"IAB14_7":   221,
	"IAB14_8":   222,
	"IAB15":     223,
	"IAB15_1":   224,
	"IAB15_2":   225,
	"IAB15_3":   226,
	"IAB15_4":   227,
	"IAB15_5":   228,
	"IAB15_6":   229,
	"IAB15_7":   230,
	"IAB15_8":   231,
	"IAB15_9":   232,
	"IAB15_10":  233,
	"IAB16":     234,
	"IAB16_1":   235,
	"IAB16_2":   236,
	"IAB16_3":   237,
	"IAB16_4":   238,
	"IAB16_5":   239,
	"IAB16_6":   240,
	"IAB16_7":   241,
	"IAB17":     242,
	"IAB17_1":   243,
	"IAB17_2":   244,
	"IAB17_3":   245,
	"IAB17_4":   246,
	"IAB17_5":   247,
	"IAB17_6":   248,
	"IAB17_7":   249,
	"IAB17_8":   250,
	"IAB17_9":   251,
	"IAB17_10":  252,
	"IAB17_11":  253,
	"IAB17_12":  254,
	"IAB17_13":  255,
	"IAB17_14":  256,
	"IAB17_15":  257,
	"IAB17_16":  258,
	"IAB17_17":  259,
	"IAB17_18":  260,
	"IAB17_19":  261,
	"IAB17_20":  262,
	"IAB17_21":  263,
	"IAB17_22":  264,
	"IAB17_23":  265,
	"IAB17_24":  266,
	"IAB17_25":  267,
	"IAB17_26":  268,
	"IAB17_27":  269,
	"IAB17_28":  270,
	"IAB17_29":  271,
	"IAB17_30":  272,
	"IAB17_31":  273,
	"IAB17_32":  274,
	"IAB17_33":  275,
	"IAB17_34":  276,
	"IAB17_35":  277,
	"IAB17_36":  278,
	"IAB17_37":  279,
	"IAB17_38":  280,
	"IAB17_39":  281,
	"IAB17_40":  282,
	"IAB17_41":  283,
	"IAB17_42":  284,
	"IAB17_43":  285,
	"IAB17_44":  286,
	"IAB18":     287,
	"IAB18_1":   288,
	"IAB18_2":   289,
	"IAB18_3":   290,
	"IAB18_4":   291,
	"IAB18_5":   292,
	"IAB18_6":   293,
	"IAB19":     294,
	"IAB19_1":   295,
	"IAB19_2":   296,
	"IAB19_3":   297,
	"IAB19_4":   298,
	"IAB19_5":   299,
	"IAB19_6":   300,
	"IAB19_7":   301,
	"IAB19_8":   302,
	"IAB19_9":   303,
	"IAB19_10":  304,
	"IAB19_11":  305,
	"IAB19_12":  306,
	"IAB19_13":  307,
	"IAB19_14":  308,
	"IAB19_15":  309,
	"IAB19_16":  310,
	"IAB19_17":  311,
	"IAB19_18":  312,
	"IAB19_19":  313,
	"IAB19_20":  314,
	"IAB19_21":  315,
	"IAB19_22":  316,
	"IAB19_23":  317,
	"IAB19_24":  318,
	"IAB19_25":  319,
	"IAB19_26":  320,
	"IAB19_27":  321,
	"IAB19_28":  322,
	"IAB19_29":  323,
	"IAB19_30":  324,
	"IAB19_31":  325,
	"IAB19_32":  326,
	"IAB19_33":  327,
	"IAB19_34":  328,
	"IAB19_35":  329,
	"IAB19_36":  330,
	"IAB20":     331,
	"IAB20_1":   332,
	"IAB20_2":   333,
	"IAB20_3":   334,
	"IAB20_4":   335,
	"IAB20_5":   336,
	"IAB20_6":   337,
	"IAB20_7":   338,
	"IAB20_8":   339,
	"IAB20_9":   340,
	"IAB20_10":  341,
	"IAB20_11":  342,
	"IAB20_12":  343,
	"IAB20_13":  344,
	"IAB20_14":  345,
	"IAB20_15":  346,
	"IAB20_16":  347,
	"IAB20_17":  348,
	"IAB20_18":  349,
	"IAB20_19":  350,
	"IAB20_20":  351,
	"IAB20_21":  352,
	"IAB20_22":  353,
	"IAB20_23":  354,
	"IAB20_24":  355,
	"IAB20_25":  356,
	"IAB20_26":  357,
	"IAB20_27":  358,
	"IAB21":     359,
	"IAB21_1":   360,
	"IAB21_2":   361,
	"IAB21_3":   362,
	"IAB22":     363,
	"IAB22_1":   364,
	"IAB22_2":   365,
	"IAB22_3":   366,
	"IAB22_4":   367,
	"IAB23":     368,
	"IAB23_1":   369,
	"IAB23_2":   370,
	"IAB23_3":   371,
	"IAB23_4":   372,
	"IAB23_5":   373,
	"IAB23_6":   374,
	"IAB23_7":   375,
	"IAB23_8":   376,
	"IAB23_9":   377,
	"IAB23_10":  378,
	"IAB24":     379,
	"IAB25":     380,
	"IAB25_1":   381,
	"IAB25_2":   382,
	"IAB25_3":   383,
	"IAB25_4":   384,
	"IAB25_5":   385,
	"IAB25_6":   386,
	"IAB25_7":   387,
	"IAB26":     388,
	"IAB26_1":   389,
	"IAB26_2":   390,
	"IAB26_3":   391,
	"IAB26_4":   392,
}

func (x ContentCategory) Enum() *ContentCategory {
	p := new(ContentCategory)
	*p = x
	return p
}
func (x ContentCategory) String() string {
	return proto.EnumName(ContentCategory_name, int32(x))
}
func (x *ContentCategory) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ContentCategory_value, data, "ContentCategory")
	if err != nil {
		return err
	}
	*x = ContentCategory(value)
	return nil
}
func (ContentCategory) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type AuctionType int32

const (
	AuctionType_FIRST_PRICE AuctionType = 1
	// [AdX: DealType.PRIVATE_AUCTION]
	AuctionType_SECOND_PRICE AuctionType = 2
	// [AdX: DealType.PREFERRED_DEAL]
	AuctionType_FIXED_PRICE AuctionType = 3
)

var AuctionType_name = map[int32]string{
	1: "FIRST_PRICE",
	2: "SECOND_PRICE",
	3: "FIXED_PRICE",
}
var AuctionType_value = map[string]int32{
	"FIRST_PRICE":  1,
	"SECOND_PRICE": 2,
	"FIXED_PRICE":  3,
}

func (x AuctionType) Enum() *AuctionType {
	p := new(AuctionType)
	*p = x
	return p
}
func (x AuctionType) String() string {
	return proto.EnumName(AuctionType_name, int32(x))
}
func (x *AuctionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AuctionType_value, data, "AuctionType")
	if err != nil {
		return err
	}
	*x = AuctionType(value)
	return nil
}
func (AuctionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// OpenRTB 2.0: types of ads that can be accepted by the exchange unless
// restricted by publisher site settings.
type BannerAdType int32

const (
	// "Usually mobile".
	BannerAdType_XHTML_TEXT_AD BannerAdType = 1
	// "Usually mobile".
	BannerAdType_XHTML_BANNER_AD BannerAdType = 2
	// Javascript must be valid XHTML (ie, script tags included).
	BannerAdType_JAVASCRIPT_AD BannerAdType = 3
	// Iframe.
	BannerAdType_IFRAME BannerAdType = 4
)

var BannerAdType_name = map[int32]string{
	1: "XHTML_TEXT_AD",
	2: "XHTML_BANNER_AD",
	3: "JAVASCRIPT_AD",
	4: "IFRAME",
}
var BannerAdType_value = map[string]int32{
	"XHTML_TEXT_AD":   1,
	"XHTML_BANNER_AD": 2,
	"JAVASCRIPT_AD":   3,
	"IFRAME":          4,
}

func (x BannerAdType) Enum() *BannerAdType {
	p := new(BannerAdType)
	*p = x
	return p
}
func (x BannerAdType) String() string {
	return proto.EnumName(BannerAdType_name, int32(x))
}
func (x *BannerAdType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BannerAdType_value, data, "BannerAdType")
	if err != nil {
		return err
	}
	*x = BannerAdType(value)
	return nil
}
func (BannerAdType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// OpenRTB 2.0: The following table specifies a standard list of creative
// attributes that can describe an ad being served or serve as restrictions
// of thereof.
type CreativeAttribute int32

const (
	CreativeAttribute_AUDIO_AUTO_PLAY            CreativeAttribute = 1
	CreativeAttribute_AUDIO_USER_INITIATED       CreativeAttribute = 2
	CreativeAttribute_EXPANDABLE_AUTOMATIC       CreativeAttribute = 3
	CreativeAttribute_EXPANDABLE_CLICK_INITIATED CreativeAttribute = 4
	// [AdX: 28/ROLLOVER_TO_EXPAND]
	CreativeAttribute_EXPANDABLE_ROLLOVER_INITIATED CreativeAttribute = 5
	// [AdX: 22/VAST_VIDEO]
	CreativeAttribute_VIDEO_IN_BANNER_AUTO_PLAY CreativeAttribute = 6
	// [AdX: 22/VAST_VIDEO]
	CreativeAttribute_VIDEO_IN_BANNER_USER_INITIATED CreativeAttribute = 7
	CreativeAttribute_POP                            CreativeAttribute = 8
	CreativeAttribute_PROVOCATIVE_OR_SUGGESTIVE      CreativeAttribute = 9
	// Defined as "Shaky, Flashing, Flickering, Extreme Animation, Smileys".
	CreativeAttribute_ANNOYING                      CreativeAttribute = 10
	CreativeAttribute_SURVEYS                       CreativeAttribute = 11
	CreativeAttribute_TEXT_ONLY                     CreativeAttribute = 12
	CreativeAttribute_USER_INTERACTIVE              CreativeAttribute = 13
	CreativeAttribute_WINDOWS_DIALOG_OR_ALERT_STYLE CreativeAttribute = 14
	CreativeAttribute_HAS_AUDIO_ON_OFF_BUTTON       CreativeAttribute = 15
	CreativeAttribute_AD_CAN_BE_SKIPPED             CreativeAttribute = 16
	CreativeAttribute_FLASH                         CreativeAttribute = 17
)

var CreativeAttribute_name = map[int32]string{
	1:  "AUDIO_AUTO_PLAY",
	2:  "AUDIO_USER_INITIATED",
	3:  "EXPANDABLE_AUTOMATIC",
	4:  "EXPANDABLE_CLICK_INITIATED",
	5:  "EXPANDABLE_ROLLOVER_INITIATED",
	6:  "VIDEO_IN_BANNER_AUTO_PLAY",
	7:  "VIDEO_IN_BANNER_USER_INITIATED",
	8:  "POP",
	9:  "PROVOCATIVE_OR_SUGGESTIVE",
	10: "ANNOYING",
	11: "SURVEYS",
	12: "TEXT_ONLY",
	13: "USER_INTERACTIVE",
	14: "WINDOWS_DIALOG_OR_ALERT_STYLE",
	15: "HAS_AUDIO_ON_OFF_BUTTON",
	16: "AD_CAN_BE_SKIPPED",
	17: "FLASH",
}
var CreativeAttribute_value = map[string]int32{
	"AUDIO_AUTO_PLAY":                1,
	"AUDIO_USER_INITIATED":           2,
	"EXPANDABLE_AUTOMATIC":           3,
	"EXPANDABLE_CLICK_INITIATED":     4,
	"EXPANDABLE_ROLLOVER_INITIATED":  5,
	"VIDEO_IN_BANNER_AUTO_PLAY":      6,
	"VIDEO_IN_BANNER_USER_INITIATED": 7,
	"POP": 8,
	"PROVOCATIVE_OR_SUGGESTIVE":     9,
	"ANNOYING":                      10,
	"SURVEYS":                       11,
	"TEXT_ONLY":                     12,
	"USER_INTERACTIVE":              13,
	"WINDOWS_DIALOG_OR_ALERT_STYLE": 14,
	"HAS_AUDIO_ON_OFF_BUTTON":       15,
	"AD_CAN_BE_SKIPPED":             16,
	"FLASH":                         17,
}

func (x CreativeAttribute) Enum() *CreativeAttribute {
	p := new(CreativeAttribute)
	*p = x
	return p
}
func (x CreativeAttribute) String() string {
	return proto.EnumName(CreativeAttribute_name, int32(x))
}
func (x *CreativeAttribute) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CreativeAttribute_value, data, "CreativeAttribute")
	if err != nil {
		return err
	}
	*x = CreativeAttribute(value)
	return nil
}
func (CreativeAttribute) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// OpenRTB 2.0: The following table is a list of API frameworks supported
// by the publisher.  Note that MRAID-1 is a subset of MRAID-2.
// In OpenRTB 2.1 and prior, value "3" was "MRAID".  However, not all
// MRAID capable APIs understand MRAID-2 features and as such the only
// safe interpretation of value "3" is MRAID-1. In OpenRTB 2.2, this was
// made explicit and MRAID-2 has been added as value "5".
type APIFramework int32

const (
	// [AdX: attribute 30/VPAID]
	APIFramework_VPAID_1 APIFramework = 1
	// [AdX: attribute 30/VPAID]
	APIFramework_VPAID_2 APIFramework = 2
	// [AdX: attribute 32/MRAID]
	APIFramework_MRAID_1 APIFramework = 3
	APIFramework_ORMMA   APIFramework = 4
	// [AdX: attribute 32/MRAID (OpenRTB 2.3+)]
	APIFramework_MRAID_2 APIFramework = 5
)

var APIFramework_name = map[int32]string{
	1: "VPAID_1",
	2: "VPAID_2",
	3: "MRAID_1",
	4: "ORMMA",
	5: "MRAID_2",
}
var APIFramework_value = map[string]int32{
	"VPAID_1": 1,
	"VPAID_2": 2,
	"MRAID_1": 3,
	"ORMMA":   4,
	"MRAID_2": 5,
}

func (x APIFramework) Enum() *APIFramework {
	p := new(APIFramework)
	*p = x
	return p
}
func (x APIFramework) String() string {
	return proto.EnumName(APIFramework_name, int32(x))
}
func (x *APIFramework) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(APIFramework_value, data, "APIFramework")
	if err != nil {
		return err
	}
	*x = APIFramework(value)
	return nil
}
func (APIFramework) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// OpenRTB 2.0: The following table specifies the position of the ad as a
// relative measure of visibility or prominence.
//
// This OpenRTB table has values derived from the IAB Quality Assurance
// Guidelines (QAG). Practitioners should keep in sync with updates to the
// QAG values as published on IAB.net. Values "3" - "6" apply to apps
// per the mobile addendum to QAG version 1.5.
type AdPosition int32

const (
	// [AdX: SlotVisibility.NO_DETECTION]
	AdPosition_UNKNOWN AdPosition = 0
	// [AdX: SlotVisibility.ABOVE_THE_FOLD]
	AdPosition_ABOVE_THE_FOLD AdPosition = 1
	// May or may not be immediately visible depending on screen size and
	// resolution.
	// @deprecated
	AdPosition_DEPRECATED_LIKELY_BELOW_THE_FOLD AdPosition = 2
	// [AdX: SlotVisibility.BELOW_THE_FOLD]
	AdPosition_BELOW_THE_FOLD AdPosition = 3
	// [OpenRTB->AdX: SlotVisibility.ABOVE_THE_FOLD]
	AdPosition_HEADER AdPosition = 4
	// [OpenRTB->AdX: SlotVisibility.ABOVE_THE_FOLD]
	AdPosition_FOOTER AdPosition = 5
	// [OpenRTB->AdX: SlotVisibility.ABOVE_THE_FOLD]
	AdPosition_SIDEBAR AdPosition = 6
	// [OpenRTB->AdX: SlotVisibility.ABOVE_THE_FOLD]
	AdPosition_AD_POSITION_FULLSCREEN AdPosition = 7
)

var AdPosition_name = map[int32]string{
	0: "UNKNOWN",
	1: "ABOVE_THE_FOLD",
	2: "DEPRECATED_LIKELY_BELOW_THE_FOLD",
	3: "BELOW_THE_FOLD",
	4: "HEADER",
	5: "FOOTER",
	6: "SIDEBAR",
	7: "AD_POSITION_FULLSCREEN",
}
var AdPosition_value = map[string]int32{
	"UNKNOWN":                          0,
	"ABOVE_THE_FOLD":                   1,
	"DEPRECATED_LIKELY_BELOW_THE_FOLD": 2,
	"BELOW_THE_FOLD":                   3,
	"HEADER":                           4,
	"FOOTER":                           5,
	"SIDEBAR":                          6,
	"AD_POSITION_FULLSCREEN":           7,
}

func (x AdPosition) Enum() *AdPosition {
	p := new(AdPosition)
	*p = x
	return p
}
func (x AdPosition) String() string {
	return proto.EnumName(AdPosition_name, int32(x))
}
func (x *AdPosition) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AdPosition_value, data, "AdPosition")
	if err != nil {
		return err
	}
	*x = AdPosition(value)
	return nil
}
func (AdPosition) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// OpenRTB 2.0: The following table indicates the options for video
// linearity. "In-stream" or "linear" video refers to pre-roll, post-roll,
// or mid-roll video ads where the user is forced to watch ad in order to
// see the video content. "Overlay" or "non-linear" refer to ads that are
// shown on top of the video content.
//
// This field is optional. The following is the interpretation of the
// bidder based upon presence or absence of the field in the bid request:
// - If no value is set, any ad (linear or not) can be present
//   in the response.
// - If a value is set, only ads of the corresponding type can be present
//   in the response.
//
// This OpenRTB table has values derived from the IAB Quality Assurance
// Guidelines (QAG). Practitioners should keep in sync with updates to the
// QAG values as published on IAB.net.
type VideoLinearity int32

const (
	VideoLinearity_LINEAR     VideoLinearity = 1
	VideoLinearity_NON_LINEAR VideoLinearity = 2
)

var VideoLinearity_name = map[int32]string{
	1: "LINEAR",
	2: "NON_LINEAR",
}
var VideoLinearity_value = map[string]int32{
	"LINEAR":     1,
	"NON_LINEAR": 2,
}

func (x VideoLinearity) Enum() *VideoLinearity {
	p := new(VideoLinearity)
	*p = x
	return p
}
func (x VideoLinearity) String() string {
	return proto.EnumName(VideoLinearity_name, int32(x))
}
func (x *VideoLinearity) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(VideoLinearity_value, data, "VideoLinearity")
	if err != nil {
		return err
	}
	*x = VideoLinearity(value)
	return nil
}
func (VideoLinearity) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

// OpenRTB 2.0: The following table lists the options for the various
// bid response protocols that could be supported by an exchange.
type Protocol int32

const (
	Protocol_VAST_1_0          Protocol = 1
	Protocol_VAST_2_0          Protocol = 2
	Protocol_VAST_3_0          Protocol = 3
	Protocol_VAST_1_0_WRAPPER  Protocol = 4
	Protocol_VAST_2_0_WRAPPER  Protocol = 5
	Protocol_VAST_3_0_WRAPPER  Protocol = 6
	Protocol_VAST_4_0          Protocol = 7
	Protocol_VAST_4_0_WRAPPER  Protocol = 8
	Protocol_DAAST_1_0         Protocol = 9
	Protocol_DAAST_1_0_WRAPPER Protocol = 10
)

var Protocol_name = map[int32]string{
	1:  "VAST_1_0",
	2:  "VAST_2_0",
	3:  "VAST_3_0",
	4:  "VAST_1_0_WRAPPER",
	5:  "VAST_2_0_WRAPPER",
	6:  "VAST_3_0_WRAPPER",
	7:  "VAST_4_0",
	8:  "VAST_4_0_WRAPPER",
	9:  "DAAST_1_0",
	10: "DAAST_1_0_WRAPPER",
}
var Protocol_value = map[string]int32{
	"VAST_1_0":          1,
	"VAST_2_0":          2,
	"VAST_3_0":          3,
	"VAST_1_0_WRAPPER":  4,
	"VAST_2_0_WRAPPER":  5,
	"VAST_3_0_WRAPPER":  6,
	"VAST_4_0":          7,
	"VAST_4_0_WRAPPER":  8,
	"DAAST_1_0":         9,
	"DAAST_1_0_WRAPPER": 10,
}

func (x Protocol) Enum() *Protocol {
	p := new(Protocol)
	*p = x
	return p
}
func (x Protocol) String() string {
	return proto.EnumName(Protocol_name, int32(x))
}
func (x *Protocol) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Protocol_value, data, "Protocol")
	if err != nil {
		return err
	}
	*x = Protocol(value)
	return nil
}
func (Protocol) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

// OpenRTB 2.0: The following table lists the various playback methods.
type PlaybackMethod int32

const (
	// [AdX: VideoPlaybackMethod.AUTO_PLAY_SOUND_ON]
	PlaybackMethod_AUTO_PLAY_SOUND_ON PlaybackMethod = 1
	// [AdX: VideoPlaybackMethod.AUTO_PLAY_SOUND_OFF]
	PlaybackMethod_AUTO_PLAY_SOUND_OFF PlaybackMethod = 2
	// [AdX: VideoPlaybackMethod.CLICK_TO_PLAY]
	PlaybackMethod_CLICK_TO_PLAY PlaybackMethod = 3
	PlaybackMethod_MOUSE_OVER    PlaybackMethod = 4
)

var PlaybackMethod_name = map[int32]string{
	1: "AUTO_PLAY_SOUND_ON",
	2: "AUTO_PLAY_SOUND_OFF",
	3: "CLICK_TO_PLAY",
	4: "MOUSE_OVER",
}
var PlaybackMethod_value = map[string]int32{
	"AUTO_PLAY_SOUND_ON":  1,
	"AUTO_PLAY_SOUND_OFF": 2,
	"CLICK_TO_PLAY":       3,
	"MOUSE_OVER":          4,
}

func (x PlaybackMethod) Enum() *PlaybackMethod {
	p := new(PlaybackMethod)
	*p = x
	return p
}
func (x PlaybackMethod) String() string {
	return proto.EnumName(PlaybackMethod_name, int32(x))
}
func (x *PlaybackMethod) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PlaybackMethod_value, data, "PlaybackMethod")
	if err != nil {
		return err
	}
	*x = PlaybackMethod(value)
	return nil
}
func (PlaybackMethod) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

// OpenRTB 2.0: The following table lists the various options for the
// audio/video start delay.  If the start delay value is greater than 0,
// then the position is mid-roll and the value indicates the start delay.
type StartDelay int32

const (
	StartDelay_PRE_ROLL          StartDelay = 0
	StartDelay_GENERIC_MID_ROLL  StartDelay = -1
	StartDelay_GENERIC_POST_ROLL StartDelay = -2
)

var StartDelay_name = map[int32]string{
	0:  "PRE_ROLL",
	-1: "GENERIC_MID_ROLL",
	-2: "GENERIC_POST_ROLL",
}
var StartDelay_value = map[string]int32{
	"PRE_ROLL":          0,
	"GENERIC_MID_ROLL":  -1,
	"GENERIC_POST_ROLL": -2,
}

func (x StartDelay) Enum() *StartDelay {
	p := new(StartDelay)
	*p = x
	return p
}
func (x StartDelay) String() string {
	return proto.EnumName(StartDelay_name, int32(x))
}
func (x *StartDelay) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StartDelay_value, data, "StartDelay")
	if err != nil {
		return err
	}
	*x = StartDelay(value)
	return nil
}
func (StartDelay) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

// OpenRTB 2.0: The following table lists the various options for the
// type of device connectivity.
type ConnectionType int32

const (
	ConnectionType_CONNECTION_UNKNOWN ConnectionType = 0
	ConnectionType_ETHERNET           ConnectionType = 1
	ConnectionType_WIFI               ConnectionType = 2
	ConnectionType_CELL_UNKNOWN       ConnectionType = 3
	ConnectionType_CELL_2G            ConnectionType = 4
	ConnectionType_CELL_3G            ConnectionType = 5
	ConnectionType_CELL_4G            ConnectionType = 6
)

var ConnectionType_name = map[int32]string{
	0: "CONNECTION_UNKNOWN",
	1: "ETHERNET",
	2: "WIFI",
	3: "CELL_UNKNOWN",
	4: "CELL_2G",
	5: "CELL_3G",
	6: "CELL_4G",
}
var ConnectionType_value = map[string]int32{
	"CONNECTION_UNKNOWN": 0,
	"ETHERNET":           1,
	"WIFI":               2,
	"CELL_UNKNOWN":       3,
	"CELL_2G":            4,
	"CELL_3G":            5,
	"CELL_4G":            6,
}

func (x ConnectionType) Enum() *ConnectionType {
	p := new(ConnectionType)
	*p = x
	return p
}
func (x ConnectionType) String() string {
	return proto.EnumName(ConnectionType_name, int32(x))
}
func (x *ConnectionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ConnectionType_value, data, "ConnectionType")
	if err != nil {
		return err
	}
	*x = ConnectionType(value)
	return nil
}
func (ConnectionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

// OpenRTB 2.0: The following table lists the directions in which an
// expandable ad may expand, given the positioning of the ad unit on the
// page and constraints imposed by the content.
type ExpandableDirection int32

const (
	// [AdX: attribute 15/EXPANDING_LEFT, also 17,19,26,27/EXPANDING_*LEFT*]
	ExpandableDirection_LEFT ExpandableDirection = 1
	// [AdX: attribute 16/EXPANDING_RIGHT, also 18,20,26,27/EXPANDING_*RIGHT*]
	ExpandableDirection_RIGHT ExpandableDirection = 2
	// [AdX: attribute 13/EXPANDING_UP, also 17,18,25,27/EXPANDING_*UP*]
	ExpandableDirection_UP ExpandableDirection = 3
	// [AdX: attribute 14/EXPANDING_DOWN, also 19,20,25,27/EXPANDING_*DOWN*]
	ExpandableDirection_DOWN                  ExpandableDirection = 4
	ExpandableDirection_EXPANDABLE_FULLSCREEN ExpandableDirection = 5
)

var ExpandableDirection_name = map[int32]string{
	1: "LEFT",
	2: "RIGHT",
	3: "UP",
	4: "DOWN",
	5: "EXPANDABLE_FULLSCREEN",
}
var ExpandableDirection_value = map[string]int32{
	"LEFT":                  1,
	"RIGHT":                 2,
	"UP":                    3,
	"DOWN":                  4,
	"EXPANDABLE_FULLSCREEN": 5,
}

func (x ExpandableDirection) Enum() *ExpandableDirection {
	p := new(ExpandableDirection)
	*p = x
	return p
}
func (x ExpandableDirection) String() string {
	return proto.EnumName(ExpandableDirection_name, int32(x))
}
func (x *ExpandableDirection) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ExpandableDirection_value, data, "ExpandableDirection")
	if err != nil {
		return err
	}
	*x = ExpandableDirection(value)
	return nil
}
func (ExpandableDirection) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

// OpenRTB 2.0: The following table lists the various options for the
// delivery of video content.
type ContentDeliveryMethod int32

const (
	ContentDeliveryMethod_STREAMING   ContentDeliveryMethod = 1
	ContentDeliveryMethod_PROGRESSIVE ContentDeliveryMethod = 2
)

var ContentDeliveryMethod_name = map[int32]string{
	1: "STREAMING",
	2: "PROGRESSIVE",
}
var ContentDeliveryMethod_value = map[string]int32{
	"STREAMING":   1,
	"PROGRESSIVE": 2,
}

func (x ContentDeliveryMethod) Enum() *ContentDeliveryMethod {
	p := new(ContentDeliveryMethod)
	*p = x
	return p
}
func (x ContentDeliveryMethod) String() string {
	return proto.EnumName(ContentDeliveryMethod_name, int32(x))
}
func (x *ContentDeliveryMethod) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ContentDeliveryMethod_value, data, "ContentDeliveryMethod")
	if err != nil {
		return err
	}
	*x = ContentDeliveryMethod(value)
	return nil
}
func (ContentDeliveryMethod) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

// OpenRTB 2.0: The following table lists the various options for
// indicating the type of content in which the impression will appear.
//
// This OpenRTB table has values derived from the IAB Quality Assurance
// Guidelines (QAG). Practitioners should keep in sync with updates to the
// QAG values as published on IAB.net.
type ContentContext int32

const (
	ContentContext_VIDEO           ContentContext = 1
	ContentContext_GAME            ContentContext = 2
	ContentContext_MUSIC           ContentContext = 3
	ContentContext_APPLICATION     ContentContext = 4
	ContentContext_TEXT            ContentContext = 5
	ContentContext_OTHER           ContentContext = 6
	ContentContext_CONTEXT_UNKNOWN ContentContext = 7
)

var ContentContext_name = map[int32]string{
	1: "VIDEO",
	2: "GAME",
	3: "MUSIC",
	4: "APPLICATION",
	5: "TEXT",
	6: "OTHER",
	7: "CONTEXT_UNKNOWN",
}
var ContentContext_value = map[string]int32{
	"VIDEO":           1,
	"GAME":            2,
	"MUSIC":           3,
	"APPLICATION":     4,
	"TEXT":            5,
	"OTHER":           6,
	"CONTEXT_UNKNOWN": 7,
}

func (x ContentContext) Enum() *ContentContext {
	p := new(ContentContext)
	*p = x
	return p
}
func (x ContentContext) String() string {
	return proto.EnumName(ContentContext_name, int32(x))
}
func (x *ContentContext) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ContentContext_value, data, "ContentContext")
	if err != nil {
		return err
	}
	*x = ContentContext(value)
	return nil
}
func (ContentContext) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

// OpenRTB 2.0: The following table lists the options for content quality.
// These values are defined by the IAB -
// http://www.iab.net/media/file/long-form-video-final.pdf.
type ProductionQuality int32

const (
	ProductionQuality_QUALITY_UNKNOWN ProductionQuality = 0
	ProductionQuality_PROFESSIONAL    ProductionQuality = 1
	ProductionQuality_PROSUMER        ProductionQuality = 2
	ProductionQuality_USER_GENERATED  ProductionQuality = 3
)

var ProductionQuality_name = map[int32]string{
	0: "QUALITY_UNKNOWN",
	1: "PROFESSIONAL",
	2: "PROSUMER",
	3: "USER_GENERATED",
}
var ProductionQuality_value = map[string]int32{
	"QUALITY_UNKNOWN": 0,
	"PROFESSIONAL":    1,
	"PROSUMER":        2,
	"USER_GENERATED":  3,
}

func (x ProductionQuality) Enum() *ProductionQuality {
	p := new(ProductionQuality)
	*p = x
	return p
}
func (x ProductionQuality) String() string {
	return proto.EnumName(ProductionQuality_name, int32(x))
}
func (x *ProductionQuality) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProductionQuality_value, data, "ProductionQuality")
	if err != nil {
		return err
	}
	*x = ProductionQuality(value)
	return nil
}
func (ProductionQuality) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

// OpenRTB 2.0: The following table lists the options to indicate how the
// geographic information was determined.
type LocationType int32

const (
	LocationType_GPS_LOCATION  LocationType = 1
	LocationType_IP            LocationType = 2
	LocationType_USER_PROVIDED LocationType = 3
)

var LocationType_name = map[int32]string{
	1: "GPS_LOCATION",
	2: "IP",
	3: "USER_PROVIDED",
}
var LocationType_value = map[string]int32{
	"GPS_LOCATION":  1,
	"IP":            2,
	"USER_PROVIDED": 3,
}

func (x LocationType) Enum() *LocationType {
	p := new(LocationType)
	*p = x
	return p
}
func (x LocationType) String() string {
	return proto.EnumName(LocationType_name, int32(x))
}
func (x *LocationType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LocationType_value, data, "LocationType")
	if err != nil {
		return err
	}
	*x = LocationType(value)
	return nil
}
func (LocationType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

// OpenRTB 2.4: The following table lists the services and/or vendors used for
// resolving IP addresses to geolocations.
type LocationService int32

const (
	LocationService_IP2LOCATION LocationService = 1
	LocationService_NEUSTAR     LocationService = 2
	LocationService_MAXMIND     LocationService = 3
	LocationService_NETAQUITY   LocationService = 4
)

var LocationService_name = map[int32]string{
	1: "IP2LOCATION",
	2: "NEUSTAR",
	3: "MAXMIND",
	4: "NETAQUITY",
}
var LocationService_value = map[string]int32{
	"IP2LOCATION": 1,
	"NEUSTAR":     2,
	"MAXMIND":     3,
	"NETAQUITY":   4,
}

func (x LocationService) Enum() *LocationService {
	p := new(LocationService)
	*p = x
	return p
}
func (x LocationService) String() string {
	return proto.EnumName(LocationService_name, int32(x))
}
func (x *LocationService) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LocationService_value, data, "LocationService")
	if err != nil {
		return err
	}
	*x = LocationService(value)
	return nil
}
func (LocationService) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

// OpenRTB 2.0: The following table lists the type of device from which the
// impression originated.
//
// OpenRTB version 2.2 of the specification added distinct values for Mobile
// and Tablet. It is recommended that any bidder adding support for 2.2
// treat a value of 1 as an acceptable alias of 4 & 5.
//
// This OpenRTB table has values derived from the IAB Quality Assurance
// Guidelines (QAG). Practitioners should keep in sync with updates to the
// QAG values as published on IAB.net.
type DeviceType int32

const (
	// Mobile (OpenRTB 2.2+: obsolete, alias for PHONE or TABLET).
	DeviceType_MOBILE DeviceType = 1
	// Personal Computer.
	// [AdX: DeviceType.PERSONAL_COMPUTER]
	DeviceType_PERSONAL_COMPUTER DeviceType = 2
	// Connected TV.
	// [AdX: DeviceType.CONNECTED_TV]
	DeviceType_CONNECTED_TV DeviceType = 3
	// Phone.
	// [AdX: DeviceType.HIGHEND_PHONE]
	DeviceType_HIGHEND_PHONE DeviceType = 4
	// Tablet.
	// [AdX: DeviceType.TABLET]
	DeviceType_TABLET DeviceType = 5
	// Connected device.
	// [AdX->OpenRTB: DeviceType.GAME_CONSOLE; OpenRTB->AdX: none]
	DeviceType_CONNECTED_DEVICE DeviceType = 6
	// Set top box.
	// [AdX->OpenRTB: none; OpenRTB->AdX: DeviceType.CONNECTED_TV]
	DeviceType_SET_TOP_BOX DeviceType = 7
)

var DeviceType_name = map[int32]string{
	1: "MOBILE",
	2: "PERSONAL_COMPUTER",
	3: "CONNECTED_TV",
	4: "HIGHEND_PHONE",
	5: "TABLET",
	6: "CONNECTED_DEVICE",
	7: "SET_TOP_BOX",
}
var DeviceType_value = map[string]int32{
	"MOBILE":            1,
	"PERSONAL_COMPUTER": 2,
	"CONNECTED_TV":      3,
	"HIGHEND_PHONE":     4,
	"TABLET":            5,
	"CONNECTED_DEVICE":  6,
	"SET_TOP_BOX":       7,
}

func (x DeviceType) Enum() *DeviceType {
	p := new(DeviceType)
	*p = x
	return p
}
func (x DeviceType) String() string {
	return proto.EnumName(DeviceType_name, int32(x))
}
func (x *DeviceType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeviceType_value, data, "DeviceType")
	if err != nil {
		return err
	}
	*x = DeviceType(value)
	return nil
}
func (DeviceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

// OpenRTB 2.1: The following table lists the options for the
// video quality. These values are defined by the IAB -
// http://www.iab.net/media/file/long-form-video-final.pdf.
type CompanionType int32

const (
	// [AdX: CreativeFormat.IMAGE_CREATIVE]
	CompanionType_STATIC CompanionType = 1
	// [AdX: CreativeFormat.FLASH_CREATIVE, CreativeFormat.HTML_CREATIVE]
	CompanionType_HTML             CompanionType = 2
	CompanionType_COMPANION_IFRAME CompanionType = 3
)

var CompanionType_name = map[int32]string{
	1: "STATIC",
	2: "HTML",
	3: "COMPANION_IFRAME",
}
var CompanionType_value = map[string]int32{
	"STATIC":           1,
	"HTML":             2,
	"COMPANION_IFRAME": 3,
}

func (x CompanionType) Enum() *CompanionType {
	p := new(CompanionType)
	*p = x
	return p
}
func (x CompanionType) String() string {
	return proto.EnumName(CompanionType_name, int32(x))
}
func (x *CompanionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CompanionType_value, data, "CompanionType")
	if err != nil {
		return err
	}
	*x = CompanionType(value)
	return nil
}
func (CompanionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

// OpenRTB 2.1: The following table lists the media ratings used in
// describing content based on the QAG categorization.
// Refer to http://www.iab.net/ne_guidelines for more information.
type QAGMediaRating int32

const (
	QAGMediaRating_ALL_AUDIENCES    QAGMediaRating = 1
	QAGMediaRating_EVERYONE_OVER_12 QAGMediaRating = 2
	QAGMediaRating_MATURE           QAGMediaRating = 3
)

var QAGMediaRating_name = map[int32]string{
	1: "ALL_AUDIENCES",
	2: "EVERYONE_OVER_12",
	3: "MATURE",
}
var QAGMediaRating_value = map[string]int32{
	"ALL_AUDIENCES":    1,
	"EVERYONE_OVER_12": 2,
	"MATURE":           3,
}

func (x QAGMediaRating) Enum() *QAGMediaRating {
	p := new(QAGMediaRating)
	*p = x
	return p
}
func (x QAGMediaRating) String() string {
	return proto.EnumName(QAGMediaRating_name, int32(x))
}
func (x *QAGMediaRating) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(QAGMediaRating_value, data, "QAGMediaRating")
	if err != nil {
		return err
	}
	*x = QAGMediaRating(value)
	return nil
}
func (QAGMediaRating) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

// OpenRTB 2.2: The following table lists the options for a bidder to signal
// the exchange as to why it did not offer a bid for the impression.
type NoBidReason int32

const (
	NoBidReason_UNKNOWN_ERROR              NoBidReason = 0
	NoBidReason_TECHNICAL_ERROR            NoBidReason = 1
	NoBidReason_INVALID_REQUEST            NoBidReason = 2
	NoBidReason_KNOWN_WEB_SPIDER           NoBidReason = 3
	NoBidReason_SUSPECTED_NONHUMAN_TRAFFIC NoBidReason = 4
	NoBidReason_CLOUD_DATACENTER_PROXYIP   NoBidReason = 5
	NoBidReason_UNSUPPORTED_DEVICE         NoBidReason = 6
	NoBidReason_BLOCKED_PUBLISHER          NoBidReason = 7
	NoBidReason_UNMATCHED_USER             NoBidReason = 8
)

var NoBidReason_name = map[int32]string{
	0: "UNKNOWN_ERROR",
	1: "TECHNICAL_ERROR",
	2: "INVALID_REQUEST",
	3: "KNOWN_WEB_SPIDER",
	4: "SUSPECTED_NONHUMAN_TRAFFIC",
	5: "CLOUD_DATACENTER_PROXYIP",
	6: "UNSUPPORTED_DEVICE",
	7: "BLOCKED_PUBLISHER",
	8: "UNMATCHED_USER",
}
var NoBidReason_value = map[string]int32{
	"UNKNOWN_ERROR":              0,
	"TECHNICAL_ERROR":            1,
	"INVALID_REQUEST":            2,
	"KNOWN_WEB_SPIDER":           3,
	"SUSPECTED_NONHUMAN_TRAFFIC": 4,
	"CLOUD_DATACENTER_PROXYIP":   5,
	"UNSUPPORTED_DEVICE":         6,
	"BLOCKED_PUBLISHER":          7,
	"UNMATCHED_USER":             8,
}

func (x NoBidReason) Enum() *NoBidReason {
	p := new(NoBidReason)
	*p = x
	return p
}
func (x NoBidReason) String() string {
	return proto.EnumName(NoBidReason_name, int32(x))
}
func (x *NoBidReason) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NoBidReason_value, data, "NoBidReason")
	if err != nil {
		return err
	}
	*x = NoBidReason(value)
	return nil
}
func (NoBidReason) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

// OpenRTB 2.4: The following table lists the types of feeds,
// typically for audio.
type FeedType int32

const (
	FeedType_MUSIC_SERVICE FeedType = 1
	FeedType_BROADCAST     FeedType = 2
	FeedType_PODCAST       FeedType = 3
)

var FeedType_name = map[int32]string{
	1: "MUSIC_SERVICE",
	2: "BROADCAST",
	3: "PODCAST",
}
var FeedType_value = map[string]int32{
	"MUSIC_SERVICE": 1,
	"BROADCAST":     2,
	"PODCAST":       3,
}

func (x FeedType) Enum() *FeedType {
	p := new(FeedType)
	*p = x
	return p
}
func (x FeedType) String() string {
	return proto.EnumName(FeedType_name, int32(x))
}
func (x *FeedType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FeedType_value, data, "FeedType")
	if err != nil {
		return err
	}
	*x = FeedType(value)
	return nil
}
func (FeedType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

// OpenRTB 2.4: The following table lists the types of volume normalization
// modes, typically for audio.
type VolumeNormalizationMode int32

const (
	VolumeNormalizationMode_NONE           VolumeNormalizationMode = 0
	VolumeNormalizationMode_AVERAGE_VOLUME VolumeNormalizationMode = 1
	VolumeNormalizationMode_PEAK_VOLUME    VolumeNormalizationMode = 2
	VolumeNormalizationMode_LOUDNESS       VolumeNormalizationMode = 3
	VolumeNormalizationMode_CUSTOM_VOLUME  VolumeNormalizationMode = 4
)

var VolumeNormalizationMode_name = map[int32]string{
	0: "NONE",
	1: "AVERAGE_VOLUME",
	2: "PEAK_VOLUME",
	3: "LOUDNESS",
	4: "CUSTOM_VOLUME",
}
var VolumeNormalizationMode_value = map[string]int32{
	"NONE":           0,
	"AVERAGE_VOLUME": 1,
	"PEAK_VOLUME":    2,
	"LOUDNESS":       3,
	"CUSTOM_VOLUME":  4,
}

func (x VolumeNormalizationMode) Enum() *VolumeNormalizationMode {
	p := new(VolumeNormalizationMode)
	*p = x
	return p
}
func (x VolumeNormalizationMode) String() string {
	return proto.EnumName(VolumeNormalizationMode_name, int32(x))
}
func (x *VolumeNormalizationMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(VolumeNormalizationMode_value, data, "VolumeNormalizationMode")
	if err != nil {
		return err
	}
	*x = VolumeNormalizationMode(value)
	return nil
}
func (VolumeNormalizationMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

// OpenRTB Native 1.0: Core layouts. An implementing exchange may not
// support all asset variants or introduce new ones unique to that system.
// To be deprecated.
type LayoutId int32

const (
	LayoutId_CONTENT_WALL   LayoutId = 1
	LayoutId_APP_WALL       LayoutId = 2
	LayoutId_NEWS_FEED      LayoutId = 3
	LayoutId_CHAT_LIST      LayoutId = 4
	LayoutId_CAROUSEL       LayoutId = 5
	LayoutId_CONTENT_STREAM LayoutId = 6
	LayoutId_GRID           LayoutId = 7
)

var LayoutId_name = map[int32]string{
	1: "CONTENT_WALL",
	2: "APP_WALL",
	3: "NEWS_FEED",
	4: "CHAT_LIST",
	5: "CAROUSEL",
	6: "CONTENT_STREAM",
	7: "GRID",
}
var LayoutId_value = map[string]int32{
	"CONTENT_WALL":   1,
	"APP_WALL":       2,
	"NEWS_FEED":      3,
	"CHAT_LIST":      4,
	"CAROUSEL":       5,
	"CONTENT_STREAM": 6,
	"GRID":           7,
}

func (x LayoutId) Enum() *LayoutId {
	p := new(LayoutId)
	*p = x
	return p
}
func (x LayoutId) String() string {
	return proto.EnumName(LayoutId_name, int32(x))
}
func (x *LayoutId) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LayoutId_value, data, "LayoutId")
	if err != nil {
		return err
	}
	*x = LayoutId(value)
	return nil
}
func (LayoutId) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

// OpenRTB Native 1.0: Below is a list of the core ad unit ids described by
// IAB: http://www.iab.net/media/file/IABNativeAdvertisingPlaybook120413.pdf
// In feed unit is essentially a layout, it has been removed from the list.
// In feed units can be identified via the layout parameter on the request.
// An implementing exchange may not support all asset variants or introduce
// new ones unique to that system.
// To be deprecated.
type AdUnitId int32

const (
	AdUnitId_PAID_SEARCH_UNIT      AdUnitId = 1
	AdUnitId_RECOMMENDATION_WIDGET AdUnitId = 2
	AdUnitId_PROMOTED_LISTING      AdUnitId = 3
	AdUnitId_IAB_IN_AD_NATIVE      AdUnitId = 4
	AdUnitId_ADUNITID_CUSTOM       AdUnitId = 5
)

var AdUnitId_name = map[int32]string{
	1: "PAID_SEARCH_UNIT",
	2: "RECOMMENDATION_WIDGET",
	3: "PROMOTED_LISTING",
	4: "IAB_IN_AD_NATIVE",
	5: "ADUNITID_CUSTOM",
}
var AdUnitId_value = map[string]int32{
	"PAID_SEARCH_UNIT":      1,
	"RECOMMENDATION_WIDGET": 2,
	"PROMOTED_LISTING":      3,
	"IAB_IN_AD_NATIVE":      4,
	"ADUNITID_CUSTOM":       5,
}

func (x AdUnitId) Enum() *AdUnitId {
	p := new(AdUnitId)
	*p = x
	return p
}
func (x AdUnitId) String() string {
	return proto.EnumName(AdUnitId_name, int32(x))
}
func (x *AdUnitId) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AdUnitId_value, data, "AdUnitId")
	if err != nil {
		return err
	}
	*x = AdUnitId(value)
	return nil
}
func (AdUnitId) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

// OpenRTB Native 1.1: The context in which the ad appears - what type
// of content is surrounding the ad on the page at a high level.
// This maps directly to the new Deep Dive on In-Feed Ad Units.
// This denotes the primary context, but does not imply other content
// may not exist on the page - for example it's expected that most
// content platforms have some social components, etc.
type ContextType int32

const (
	// Content-centric context such as newsfeed, article, image gallery,
	// video gallery, or similar.
	ContextType_CONTENT ContextType = 1
	// Social-centric context such as social network feed, email,
	// chat, or similar.
	ContextType_SOCIAL ContextType = 2
	// Product context such as product listings, details, recommendations,
	// reviews, or similar.
	ContextType_PRODUCT ContextType = 3
)

var ContextType_name = map[int32]string{
	1: "CONTENT",
	2: "SOCIAL",
	3: "PRODUCT",
}
var ContextType_value = map[string]int32{
	"CONTENT": 1,
	"SOCIAL":  2,
	"PRODUCT": 3,
}

func (x ContextType) Enum() *ContextType {
	p := new(ContextType)
	*p = x
	return p
}
func (x ContextType) String() string {
	return proto.EnumName(ContextType_name, int32(x))
}
func (x *ContextType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ContextType_value, data, "ContextType")
	if err != nil {
		return err
	}
	*x = ContextType(value)
	return nil
}
func (ContextType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

// OpenRTB Native 1.1: Next-level context in which the ad appears.
// Again this reflects the primary context, and does not imply no presence
// of other elements. For example, an article is likely to contain images
// but is still first and foremost an article. SubType should only be
// combined with the primary context type as indicated (ie for a context
// type of 1, only context subtypes that start with 1 are valid).
type ContextSubtype int32

const (
	ContextSubtype_CONTENT_GENERAL_OR_MIXED ContextSubtype = 10
	ContextSubtype_CONTENT_ARTICLE          ContextSubtype = 11
	ContextSubtype_CONTENT_VIDEO            ContextSubtype = 12
	ContextSubtype_CONTENT_AUDIO            ContextSubtype = 13
	ContextSubtype_CONTENT_IMAGE            ContextSubtype = 14
	ContextSubtype_CONTENT_USER_GENERATED   ContextSubtype = 15
	ContextSubtype_SOCIAL_GENERAL           ContextSubtype = 20
	ContextSubtype_SOCIAL_EMAIL             ContextSubtype = 21
	ContextSubtype_SOCIAL_CHAT_IM           ContextSubtype = 22
	ContextSubtype_PRODUCT_SELLING          ContextSubtype = 30
	ContextSubtype_PRODUCT_MARKETPLACE      ContextSubtype = 31
	ContextSubtype_PRODUCT_REVIEW           ContextSubtype = 32
)

var ContextSubtype_name = map[int32]string{
	10: "CONTENT_GENERAL_OR_MIXED",
	11: "CONTENT_ARTICLE",
	12: "CONTENT_VIDEO",
	13: "CONTENT_AUDIO",
	14: "CONTENT_IMAGE",
	15: "CONTENT_USER_GENERATED",
	20: "SOCIAL_GENERAL",
	21: "SOCIAL_EMAIL",
	22: "SOCIAL_CHAT_IM",
	30: "PRODUCT_SELLING",
	31: "PRODUCT_MARKETPLACE",
	32: "PRODUCT_REVIEW",
}
var ContextSubtype_value = map[string]int32{
	"CONTENT_GENERAL_OR_MIXED": 10,
	"CONTENT_ARTICLE":          11,
	"CONTENT_VIDEO":            12,
	"CONTENT_AUDIO":            13,
	"CONTENT_IMAGE":            14,
	"CONTENT_USER_GENERATED":   15,
	"SOCIAL_GENERAL":           20,
	"SOCIAL_EMAIL":             21,
	"SOCIAL_CHAT_IM":           22,
	"PRODUCT_SELLING":          30,
	"PRODUCT_MARKETPLACE":      31,
	"PRODUCT_REVIEW":           32,
}

func (x ContextSubtype) Enum() *ContextSubtype {
	p := new(ContextSubtype)
	*p = x
	return p
}
func (x ContextSubtype) String() string {
	return proto.EnumName(ContextSubtype_name, int32(x))
}
func (x *ContextSubtype) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ContextSubtype_value, data, "ContextSubtype")
	if err != nil {
		return err
	}
	*x = ContextSubtype(value)
	return nil
}
func (ContextSubtype) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

// OpenRTB Native 1.1: The FORMAT of the ad you are purchasing,
// separate from the surrounding context.
type PlacementType int32

const (
	// In the feed of content - for example as an item inside the organic
	// feed/grid/listing/carousel.
	PlacementType_IN_FEED PlacementType = 1
	// In the atomic unit of the content - IE in the article page
	// or single image page.
	PlacementType_ATOMIC_UNIT PlacementType = 2
	// Outside the core content - for example in the ads section on the
	// right rail, as a banner-style placement near the content, etc.
	PlacementType_OUTSIDE PlacementType = 3
	// Recommendation widget, most commonly presented below
	// the article content.
	PlacementType_RECOMMENDATION PlacementType = 4
)

var PlacementType_name = map[int32]string{
	1: "IN_FEED",
	2: "ATOMIC_UNIT",
	3: "OUTSIDE",
	4: "RECOMMENDATION",
}
var PlacementType_value = map[string]int32{
	"IN_FEED":        1,
	"ATOMIC_UNIT":    2,
	"OUTSIDE":        3,
	"RECOMMENDATION": 4,
}

func (x PlacementType) Enum() *PlacementType {
	p := new(PlacementType)
	*p = x
	return p
}
func (x PlacementType) String() string {
	return proto.EnumName(PlacementType_name, int32(x))
}
func (x *PlacementType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PlacementType_value, data, "PlacementType")
	if err != nil {
		return err
	}
	*x = PlacementType(value)
	return nil
}
func (PlacementType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

// OpenRTB Native 1.0: Common asset element types of native advertising.
// This list is non-exhaustive and intended to be extended by the buyers
// and sellers as the format evolves. An implementing exchange may not
// support all asset variants or introduce new ones unique to that system.
type DataAssetType int32

const (
	// Sponsored By message where response should contain the brand name
	// of the sponsor.
	// Format: Text; Max length: 25 or longer.
	// [AdX: Fields.ADVERTISER]
	DataAssetType_SPONSORED DataAssetType = 1
	// Descriptive text associated with the product or service being advertised.
	// Format: Text; Max length: 140 or longer.
	// [AdX: Fields.BODY]
	DataAssetType_DESC DataAssetType = 2
	// Rating of the product being offered to the user.
	// For example an app's rating in an app store from 0-5.
	// Format: Number (1-5 digits) formatted as string.
	// [AdX: Fields.STAR_RATING]
	DataAssetType_RATING DataAssetType = 3
	// Number of social ratings or "likes" of product being offered to the user.
	// Format: Number formatted as string.
	DataAssetType_LIKES DataAssetType = 4
	// Number downloads/installs of this product.
	// Format: Number formatted as string.
	DataAssetType_DOWNLOADS DataAssetType = 5
	// Price for product / app / in-app purchase.
	// Value should include currency symbol in localised format.
	// Format: Number formatted as string.
	// [AdX: Fields.PRICE]
	DataAssetType_PRICE DataAssetType = 6
	// Sale price that can be used together with price to indicate a discounted
	// price compared to a regular price. Value should include currency symbol
	// in localised format.
	// Format: Number formatted as string.
	DataAssetType_SALEPRICE DataAssetType = 7
	// Phone number.
	// Format: Formatted string.
	DataAssetType_PHONE DataAssetType = 8
	// Address.
	// Format: Text.
	// [AdX: Fields.STORE]
	DataAssetType_ADDRESS DataAssetType = 9
	// Additional descriptive text associated with the product or service
	// being advertised.
	// Format: Text.
	DataAssetType_DESC2 DataAssetType = 10
	// Display URL for the text ad.
	// Format: Text.
	DataAssetType_DISPLAYURL DataAssetType = 11
	// Text describing a 'call to action' button for the destination URL.
	// Format: Text.
	// [AdX: Fields.CALL_TO_ACTION]
	DataAssetType_CTATEXT DataAssetType = 12
)

var DataAssetType_name = map[int32]string{
	1:  "SPONSORED",
	2:  "DESC",
	3:  "RATING",
	4:  "LIKES",
	5:  "DOWNLOADS",
	6:  "PRICE",
	7:  "SALEPRICE",
	8:  "PHONE",
	9:  "ADDRESS",
	10: "DESC2",
	11: "DISPLAYURL",
	12: "CTATEXT",
}
var DataAssetType_value = map[string]int32{
	"SPONSORED":  1,
	"DESC":       2,
	"RATING":     3,
	"LIKES":      4,
	"DOWNLOADS":  5,
	"PRICE":      6,
	"SALEPRICE":  7,
	"PHONE":      8,
	"ADDRESS":    9,
	"DESC2":      10,
	"DISPLAYURL": 11,
	"CTATEXT":    12,
}

func (x DataAssetType) Enum() *DataAssetType {
	p := new(DataAssetType)
	*p = x
	return p
}
func (x DataAssetType) String() string {
	return proto.EnumName(DataAssetType_name, int32(x))
}
func (x *DataAssetType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DataAssetType_value, data, "DataAssetType")
	if err != nil {
		return err
	}
	*x = DataAssetType(value)
	return nil
}
func (DataAssetType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

// OpenRTB Native 1.0: Common image asset element types of native advertising
// at the time of writing this spec. This list is non-exhaustive and intended
// to be extended by the buyers and sellers as the format evolves.
type ImageAssetType int32

const (
	// Icon image.
	// Max height: at least 50; Aspect ratio: 1:1.
	// [AdX: Fields.APP_ICON]
	ImageAssetType_ICON ImageAssetType = 1
	// Logo image for the brand/app.
	// To be deprecated in a future version - use type 1 / ICON.
	// [AdX: Fields.LOGO]
	ImageAssetType_LOGO ImageAssetType = 2
	// Large image preview for the ad.
	// At least one of 2 size variants required:
	// Small Variant: max height: 200+, max width: 200+, 267, or 382,
	//                aspect ratio: 1:1, 4:3, or 1.91:1.
	// Large Variant: max height: 627+, max width: 627+, 836, or 1198,
	//                aspect ratio: 1:1, 4:3, or 1.91:1.
	// [AdX: Fields.IMAGE]
	ImageAssetType_MAIN ImageAssetType = 3
)

var ImageAssetType_name = map[int32]string{
	1: "ICON",
	2: "LOGO",
	3: "MAIN",
}
var ImageAssetType_value = map[string]int32{
	"ICON": 1,
	"LOGO": 2,
	"MAIN": 3,
}

func (x ImageAssetType) Enum() *ImageAssetType {
	p := new(ImageAssetType)
	*p = x
	return p
}
func (x ImageAssetType) String() string {
	return proto.EnumName(ImageAssetType_name, int32(x))
}
func (x *ImageAssetType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ImageAssetType_value, data, "ImageAssetType")
	if err != nil {
		return err
	}
	*x = ImageAssetType(value)
	return nil
}
func (ImageAssetType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

// OpenRTB 2.0: The top-level bid request object contains a globally unique
// bid request or auction ID. This id attribute is required as is at least one
// impression object (Section 3.2.2). Other attributes in this top-level object
// establish rules and restrictions that apply to all impressions being offered.
//
// There are also several subordinate objects that provide detailed data to
// potential buyers. Among these are the Site and App objects, which describe
// the type of published media in which the impression(s) appear.
// These objects are highly recommended, but only one applies to a given
// bid request depending on whether the media is browser-based web content
// or a non-browser application, respectively.
type BidRequest struct {
	// Unique ID of the bid request, provided by the exchange.
	// REQUIRED by the OpenRTB specification.
	// [AdX: BidRequest.id - AdX is binary, OpenRTB is base64 (no padding)]
	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// Array of Imp objects (Section 3.2.2) representing the impressions offered.
	// At least 1 Imp object is required.
	// [AdX: BidRequest.AdSlot]
	Imp []*BidRequest_Imp `protobuf:"bytes,2,rep,name=imp" json:"imp,omitempty"`
	// Types that are valid to be assigned to DistributionchannelOneof:
	//	*BidRequest_Site_
	//	*BidRequest_App_
	DistributionchannelOneof isBidRequest_DistributionchannelOneof `protobuf_oneof:"distributionchannel_oneof"`
	// Details via a Device object (Section 3.2.11) about the user's
	// device to which the impression will be delivered.
	// [AdX: BidRequest.Mobile, BidRequest.Device]
	Device *BidRequest_Device `protobuf:"bytes,5,opt,name=device" json:"device,omitempty"`
	// A Regs object (Section 3.2.16) that specifies any industry, legal,
	// or governmental regulations in force for this request.
	Regs *BidRequest_Regs `protobuf:"bytes,14,opt,name=regs" json:"regs,omitempty"`
	// Details via a User object (Section 3.2.13) about the human
	// user of the device; the advertising audience.
	// [AdX: BidRequest]
	User *BidRequest_User `protobuf:"bytes,6,opt,name=user" json:"user,omitempty"`
	// Auction type, where 1 = First Price, 2 = Second Price Plus.
	// Exchange-specific auction types can be defined using values > 500.
	// [AdX: 2]
	At *AuctionType `protobuf:"varint,7,opt,name=at,enum=com.google.openrtb.AuctionType,def=2" json:"at,omitempty"`
	// Maximum time in milliseconds to submit a bid to avoid timeout.
	// This value is commonly communicated offline.
	// [AdX: not mapped, but fixed to 100ms]
	Tmax *int32 `protobuf:"varint,8,opt,name=tmax" json:"tmax,omitempty"`
	// Whitelist of buyer seats (e.g., advertisers, agencies) allowed to
	// bid on this impression. IDs of seats and knowledge of the
	// buyer's customers to which they refer must be coordinated
	// between bidders and the exchange a priori.
	// Omission implies no seat restrictions.
	Wseat []string `protobuf:"bytes,9,rep,name=wseat" json:"wseat,omitempty"`
	// Flag to indicate if Exchange can verify that the impressions offered
	// represent all of the impressions available in context (e.g., all on the
	// web page, all video spots such as pre/mid/post roll) to support
	// road-blocking. 0 = no or unknown, 1 = yes, the impressions offered
	// represent all that are available.
	// [AdX: 0]
	Allimps *bool `protobuf:"varint,10,opt,name=allimps,def=0" json:"allimps,omitempty"`
	// Array of allowed currencies for bids on this bid request using ISO-4217
	// alpha codes. Recommended only if the exchange accepts multiple currencies.
	Cur []string `protobuf:"bytes,11,rep,name=cur" json:"cur,omitempty"`
	// Blocked advertiser categories using the IAB content categories.
	// Refer to enum ContentCategory.
	// [AdX: BidRequest.AdSlot.excluded_sensitive_category,
	//       BidRequest.AdSlot.excluded_product_category]
	Bcat []string `protobuf:"bytes,12,rep,name=bcat" json:"bcat,omitempty"`
	// Block list of advertisers by their domains (e.g., "ford.com").
	Badv []string `protobuf:"bytes,13,rep,name=badv" json:"badv,omitempty"`
	// Block list of applications by their platform-specific exchange
	// independent application identifiers. On Android, these should
	// be bundle or package names (e.g., com.foo.mygame).
	// On iOS, these are numeric IDs.
	Bapp []string `protobuf:"bytes,16,rep,name=bapp" json:"bapp,omitempty"`
	// Indicator of test mode in which auctions are not billable,
	// where 0 = live mode, 1 = test mode.
	// [AdX: BidRequest.is_test]
	Test                         *bool `protobuf:"varint,15,opt,name=test,def=0" json:"test,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *BidRequest) Reset()                    { *m = BidRequest{} }
func (m *BidRequest) String() string            { return proto.CompactTextString(m) }
func (*BidRequest) ProtoMessage()               {}
func (*BidRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

var extRange_BidRequest = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest
}

const Default_BidRequest_At AuctionType = AuctionType_SECOND_PRICE
const Default_BidRequest_Allimps bool = false
const Default_BidRequest_Test bool = false

type isBidRequest_DistributionchannelOneof interface {
	isBidRequest_DistributionchannelOneof()
}

type BidRequest_Site_ struct {
	Site *BidRequest_Site `protobuf:"bytes,3,opt,name=site,oneof"`
}
type BidRequest_App_ struct {
	App *BidRequest_App `protobuf:"bytes,4,opt,name=app,oneof"`
}

func (*BidRequest_Site_) isBidRequest_DistributionchannelOneof() {}
func (*BidRequest_App_) isBidRequest_DistributionchannelOneof()  {}

func (m *BidRequest) GetDistributionchannelOneof() isBidRequest_DistributionchannelOneof {
	if m != nil {
		return m.DistributionchannelOneof
	}
	return nil
}

func (m *BidRequest) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidRequest) GetImp() []*BidRequest_Imp {
	if m != nil {
		return m.Imp
	}
	return nil
}

func (m *BidRequest) GetSite() *BidRequest_Site {
	if x, ok := m.GetDistributionchannelOneof().(*BidRequest_Site_); ok {
		return x.Site
	}
	return nil
}

func (m *BidRequest) GetApp() *BidRequest_App {
	if x, ok := m.GetDistributionchannelOneof().(*BidRequest_App_); ok {
		return x.App
	}
	return nil
}

func (m *BidRequest) GetDevice() *BidRequest_Device {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *BidRequest) GetRegs() *BidRequest_Regs {
	if m != nil {
		return m.Regs
	}
	return nil
}

func (m *BidRequest) GetUser() *BidRequest_User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *BidRequest) GetAt() AuctionType {
	if m != nil && m.At != nil {
		return *m.At
	}
	return Default_BidRequest_At
}

func (m *BidRequest) GetTmax() int32 {
	if m != nil && m.Tmax != nil {
		return *m.Tmax
	}
	return 0
}

func (m *BidRequest) GetWseat() []string {
	if m != nil {
		return m.Wseat
	}
	return nil
}

func (m *BidRequest) GetAllimps() bool {
	if m != nil && m.Allimps != nil {
		return *m.Allimps
	}
	return Default_BidRequest_Allimps
}

func (m *BidRequest) GetCur() []string {
	if m != nil {
		return m.Cur
	}
	return nil
}

func (m *BidRequest) GetBcat() []string {
	if m != nil {
		return m.Bcat
	}
	return nil
}

func (m *BidRequest) GetBadv() []string {
	if m != nil {
		return m.Badv
	}
	return nil
}

func (m *BidRequest) GetBapp() []string {
	if m != nil {
		return m.Bapp
	}
	return nil
}

func (m *BidRequest) GetTest() bool {
	if m != nil && m.Test != nil {
		return *m.Test
	}
	return Default_BidRequest_Test
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BidRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BidRequest_OneofMarshaler, _BidRequest_OneofUnmarshaler, _BidRequest_OneofSizer, []interface{}{
		(*BidRequest_Site_)(nil),
		(*BidRequest_App_)(nil),
	}
}

func _BidRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BidRequest)
	// distributionchannel_oneof
	switch x := m.DistributionchannelOneof.(type) {
	case *BidRequest_Site_:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Site); err != nil {
			return err
		}
	case *BidRequest_App_:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.App); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BidRequest.DistributionchannelOneof has unexpected type %T", x)
	}
	return nil
}

func _BidRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BidRequest)
	switch tag {
	case 3: // distributionchannel_oneof.site
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BidRequest_Site)
		err := b.DecodeMessage(msg)
		m.DistributionchannelOneof = &BidRequest_Site_{msg}
		return true, err
	case 4: // distributionchannel_oneof.app
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BidRequest_App)
		err := b.DecodeMessage(msg)
		m.DistributionchannelOneof = &BidRequest_App_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _BidRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BidRequest)
	// distributionchannel_oneof
	switch x := m.DistributionchannelOneof.(type) {
	case *BidRequest_Site_:
		s := proto.Size(x.Site)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BidRequest_App_:
		s := proto.Size(x.App)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// OpenRTB 2.0: This object describes an ad placement or impression
// being auctioned.  A single bid request can include multiple Imp objects,
// a use case for which might be an exchange that supports selling all
// ad positions on a given page.  Each Imp object has a required ID so that
// bids can reference them individually.
//
// The presence of Banner (Section 3.2.3), Video (Section 3.2.4),
// and/or Native (Section 3.2.5) objects subordinate to the Imp object
// indicates the type of impression being offered. The publisher can choose
// one such type which is the typical case or mix them at their discretion.
// Any given bid for the impression must conform to one of the offered types.
type BidRequest_Imp struct {
	// A unique identifier for this impression within the context of the bid
	// request (typically, value starts with 1, and increments up to n
	// for n impressions).
	// [AdX: BidRequest.AdSlot.id]
	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// A Banner object (Section 3.2.3); required if this impression is
	// offered as a banner ad opportunity.
	// [AdX: BidRequest.AdSlot]
	Banner *BidRequest_Imp_Banner `protobuf:"bytes,2,opt,name=banner" json:"banner,omitempty"`
	// A Video object (Section 3.2.4); required if this impression is
	// offered as a video ad opportunity.
	// [AdX: BidRequest.AdSlot, BidRequest.Video]
	Video *BidRequest_Imp_Video `protobuf:"bytes,3,opt,name=video" json:"video,omitempty"`
	// An Audio object; required if this impression is offered
	// as an audio ad opportunity.
	Audio *BidRequest_Imp_Audio `protobuf:"bytes,15,opt,name=audio" json:"audio,omitempty"`
	// Name of ad mediation partner, SDK technology, or player responsible
	// for rendering ad (typically video or mobile). Used by some ad servers
	// to customize ad code by partner. Recommended for video and/or apps.
	Displaymanager *string `protobuf:"bytes,4,opt,name=displaymanager" json:"displaymanager,omitempty"`
	// Version of ad mediation partner, SDK technology, or player responsible
	// for rendering ad (typically video or mobile). Used by some ad servers
	// to customize ad code by partner. Recommended for video and/or apps.
	Displaymanagerver *string `protobuf:"bytes,5,opt,name=displaymanagerver" json:"displaymanagerver,omitempty"`
	// 1 = the ad is interstitial or full screen, 0 = not interstitial.
	// [AdX: BidRequest.AdSlot.Mobile.is_interstitial_request]
	Instl *bool `protobuf:"varint,6,opt,name=instl" json:"instl,omitempty"`
	// Identifier for specific ad placement or ad tag that was used to
	// initiate the auction. This can be useful for debugging of any issues,
	// or for optimization by the buyer.
	// [AdX: BidRequest.AdSlot.ad_block_key]
	Tagid *string `protobuf:"bytes,7,opt,name=tagid" json:"tagid,omitempty"`
	// Minimum bid for this impression expressed in CPM.
	// [AdX: min(BidRequest.AdSlot.matching_ad_data.minimum_cpm_micros) *
	//       1,000,000]
	Bidfloor *float64 `protobuf:"fixed64,8,opt,name=bidfloor,def=0" json:"bidfloor,omitempty"`
	// Currency specified using ISO-4217 alpha codes. This may be different
	// from bid currency returned by bidder if this is allowed by the exchange.
	// [AdX: A single currency, obtained from the included billing_id]
	Bidfloorcur *string `protobuf:"bytes,9,opt,name=bidfloorcur,def=USD" json:"bidfloorcur,omitempty"`
	// Indicates the type of browser opened upon clicking the
	// creative in an app, where 0 = embedded, 1 = native.
	// Note that the Safari View Controller in iOS 9.x devices is considered
	// a native browser for purposes of this attribute.
	Clickbrowser *bool `protobuf:"varint,16,opt,name=clickbrowser" json:"clickbrowser,omitempty"`
	// Flag to indicate if the impression requires secure HTTPS URL creative
	// assets and markup, where 0 = non-secure, 1 = secure.  If omitted,
	// the secure state is unknown, but non-secure HTTP support can be assumed.
	Secure *bool `protobuf:"varint,12,opt,name=secure" json:"secure,omitempty"`
	// Array of exchange-specific names of supported iframe busters.
	// [AdX: Unsupported; use macro %%CACHEBUSTER%% in the snippet]
	Iframebuster []string `protobuf:"bytes,10,rep,name=iframebuster" json:"iframebuster,omitempty"`
	// A Pmp object (Section 3.2.17) containing any private marketplace deals
	// in effect for this impression.
	// [AdX: BidRequest.AdSlot.MatchingAdData]
	Pmp *BidRequest_Imp_Pmp `protobuf:"bytes,11,opt,name=pmp" json:"pmp,omitempty"`
	// A Native object (Section 3.2.5); required if this impression is
	// offered as a native ad opportunity.
	// [AdX: BidRequest.AdSlot.NativeAdTemplate]
	Native *BidRequest_Imp_Native `protobuf:"bytes,13,opt,name=native" json:"native,omitempty"`
	// Advisory as to the number of seconds that may elapse
	// between the auction and the actual impression.
	Exp                          *int32 `protobuf:"varint,14,opt,name=exp" json:"exp,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *BidRequest_Imp) Reset()                    { *m = BidRequest_Imp{} }
func (m *BidRequest_Imp) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_Imp) ProtoMessage()               {}
func (*BidRequest_Imp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

var extRange_BidRequest_Imp = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest_Imp) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest_Imp
}

const Default_BidRequest_Imp_Bidfloor float64 = 0
const Default_BidRequest_Imp_Bidfloorcur string = "USD"

func (m *BidRequest_Imp) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidRequest_Imp) GetBanner() *BidRequest_Imp_Banner {
	if m != nil {
		return m.Banner
	}
	return nil
}

func (m *BidRequest_Imp) GetVideo() *BidRequest_Imp_Video {
	if m != nil {
		return m.Video
	}
	return nil
}

func (m *BidRequest_Imp) GetAudio() *BidRequest_Imp_Audio {
	if m != nil {
		return m.Audio
	}
	return nil
}

func (m *BidRequest_Imp) GetDisplaymanager() string {
	if m != nil && m.Displaymanager != nil {
		return *m.Displaymanager
	}
	return ""
}

func (m *BidRequest_Imp) GetDisplaymanagerver() string {
	if m != nil && m.Displaymanagerver != nil {
		return *m.Displaymanagerver
	}
	return ""
}

func (m *BidRequest_Imp) GetInstl() bool {
	if m != nil && m.Instl != nil {
		return *m.Instl
	}
	return false
}

func (m *BidRequest_Imp) GetTagid() string {
	if m != nil && m.Tagid != nil {
		return *m.Tagid
	}
	return ""
}

func (m *BidRequest_Imp) GetBidfloor() float64 {
	if m != nil && m.Bidfloor != nil {
		return *m.Bidfloor
	}
	return Default_BidRequest_Imp_Bidfloor
}

func (m *BidRequest_Imp) GetBidfloorcur() string {
	if m != nil && m.Bidfloorcur != nil {
		return *m.Bidfloorcur
	}
	return Default_BidRequest_Imp_Bidfloorcur
}

func (m *BidRequest_Imp) GetClickbrowser() bool {
	if m != nil && m.Clickbrowser != nil {
		return *m.Clickbrowser
	}
	return false
}

func (m *BidRequest_Imp) GetSecure() bool {
	if m != nil && m.Secure != nil {
		return *m.Secure
	}
	return false
}

func (m *BidRequest_Imp) GetIframebuster() []string {
	if m != nil {
		return m.Iframebuster
	}
	return nil
}

func (m *BidRequest_Imp) GetPmp() *BidRequest_Imp_Pmp {
	if m != nil {
		return m.Pmp
	}
	return nil
}

func (m *BidRequest_Imp) GetNative() *BidRequest_Imp_Native {
	if m != nil {
		return m.Native
	}
	return nil
}

func (m *BidRequest_Imp) GetExp() int32 {
	if m != nil && m.Exp != nil {
		return *m.Exp
	}
	return 0
}

// OpenRTB 2.0: This object represents the most general type of
// impression.  Although the term "banner" may have very specific meaning
// in other contexts, here it can be many things including a simple static
// image, an expandable ad unit, or even in-banner video (refer to the Video
// object in Section 3.2.4 for the more generalized and full featured video
// ad units). An array of Banner objects can also appear within the Video
// to describe optional companion ads defined in the VAST specification.
//
// The presence of a Banner as a subordinate of the Imp object indicates
// that this impression is offered as a banner type impression.
// At the publisher's discretion, that same impression may also be offered
// as video and/or native by also including as Imp subordinates the Video
// and/or Native objects, respectively. However, any given bid for the
// impression must conform to one of the offered types.
type BidRequest_Imp_Banner struct {
	// Width in device independent pixels (DIPS).
	// If no format objects are specified, this is an exact width
	// requirement. Otherwise it is a preferred width.
	// [AdX: BidRequest.AdSlot.width[0]]
	W *int32 `protobuf:"varint,1,opt,name=w" json:"w,omitempty"`
	// Height in device independent pixels (DIPS).
	// If no format objects are specified, this is an exact height
	// requirement. Otherwise it is a preferred height.
	// [AdX: BidRequest.AdSlot.height[0]]
	H *int32 `protobuf:"varint,2,opt,name=h" json:"h,omitempty"`
	// Array of format objects representing the banner sizes permitted.
	// If none are specified, then use of the h and w attributes
	// is highly recommended.
	Format []*BidRequest_Imp_Banner_Format `protobuf:"bytes,15,rep,name=format" json:"format,omitempty"`
	// NOTE: Deprecated in favor of the format array.
	// Maximum width in device independent pixels (DIPS).
	// [AdX: max(BidRequest.AdSlot.width) if |width| > 1]
	Wmax *int32 `protobuf:"varint,11,opt,name=wmax" json:"wmax,omitempty"`
	// NOTE: Deprecated in favor of the format array.
	// Maximum height in device independent pixels (DIPS).
	// [AdX: max(BidRequest.AdSlot.height) if |height| > 1]
	Hmax *int32 `protobuf:"varint,12,opt,name=hmax" json:"hmax,omitempty"`
	// NOTE: Deprecated in favor of the format array.
	// Minimum width in device independent pixels (DIPS).
	// [AdX: min(BidRequest.AdSlot.width) if |width| > 1]
	Wmin *int32 `protobuf:"varint,13,opt,name=wmin" json:"wmin,omitempty"`
	// NOTE: Deprecated in favor of the format array.
	// Minimum height in device independent pixels (DIPS).
	// [AdX: min(BidRequest.AdSlot.height) if |height| > 1]
	Hmin *int32 `protobuf:"varint,14,opt,name=hmin" json:"hmin,omitempty"`
	// Unique identifier for this banner object. Recommended when Banner
	// objects are used with a Video object (Section 3.2.4) to represent
	// an array of companion ads. Values usually start at 1 and increase
	// with each object; should be unique within an impression.
	Id *string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	// Ad position on screen.
	// [AdX: BidRequest.AdSlot.slot_visibility]
	Pos *AdPosition `protobuf:"varint,4,opt,name=pos,enum=com.google.openrtb.AdPosition" json:"pos,omitempty"`
	// Blocked banner ad types.
	Btype []BannerAdType `protobuf:"varint,5,rep,packed,name=btype,enum=com.google.openrtb.BannerAdType" json:"btype,omitempty"`
	// Blocked creative attributes.
	// [AdX: BidRequest.AdSlot.excluded_attribute]
	Battr []CreativeAttribute `protobuf:"varint,6,rep,packed,name=battr,enum=com.google.openrtb.CreativeAttribute" json:"battr,omitempty"`
	// Whitelist of content MIME types supported. Popular MIME types include,
	// but are not limited to "image/jpg", "image/gif" and
	// "application/x-shockwave-flash".
	// [AdX: Only mapped for BidRequest.Video.companionad:
	//       BidRequest.Video.companionad.creative_format,
	//       BidRequest.AdSlot.excluded_attribute / VPAID]
	Mimes []string `protobuf:"bytes,7,rep,name=mimes" json:"mimes,omitempty"`
	// Specify if the banner is delivered in the top frame (true)
	// or in an iframe (false).
	// [AdX: BidRequest.AdSlot.iframing_state
	//       NO_IFRAME: false
	//       SAME_DOMAIN_IFRAME, CROSS_DOMAIN_IFRAME: true]
	Topframe *bool `protobuf:"varint,8,opt,name=topframe" json:"topframe,omitempty"`
	// Directions in which the banner may expand.
	// [AdX: BidRequest.AdSlot.excluded_attribute / EXPANDING_*]
	Expdir []ExpandableDirection `protobuf:"varint,9,rep,packed,name=expdir,enum=com.google.openrtb.ExpandableDirection" json:"expdir,omitempty"`
	// List of supported API frameworks for this impression.
	// If an API is not explicitly listed, it is assumed not to be supported.
	// [AdX: BidRequest.AdSlot.excluded_attribute / MRAID_1_0]
	Api                          []APIFramework `protobuf:"varint,10,rep,packed,name=api,enum=com.google.openrtb.APIFramework" json:"api,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *BidRequest_Imp_Banner) Reset()                    { *m = BidRequest_Imp_Banner{} }
func (m *BidRequest_Imp_Banner) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_Imp_Banner) ProtoMessage()               {}
func (*BidRequest_Imp_Banner) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0, 0} }

var extRange_BidRequest_Imp_Banner = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest_Imp_Banner) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest_Imp_Banner
}

func (m *BidRequest_Imp_Banner) GetW() int32 {
	if m != nil && m.W != nil {
		return *m.W
	}
	return 0
}

func (m *BidRequest_Imp_Banner) GetH() int32 {
	if m != nil && m.H != nil {
		return *m.H
	}
	return 0
}

func (m *BidRequest_Imp_Banner) GetFormat() []*BidRequest_Imp_Banner_Format {
	if m != nil {
		return m.Format
	}
	return nil
}

func (m *BidRequest_Imp_Banner) GetWmax() int32 {
	if m != nil && m.Wmax != nil {
		return *m.Wmax
	}
	return 0
}

func (m *BidRequest_Imp_Banner) GetHmax() int32 {
	if m != nil && m.Hmax != nil {
		return *m.Hmax
	}
	return 0
}

func (m *BidRequest_Imp_Banner) GetWmin() int32 {
	if m != nil && m.Wmin != nil {
		return *m.Wmin
	}
	return 0
}

func (m *BidRequest_Imp_Banner) GetHmin() int32 {
	if m != nil && m.Hmin != nil {
		return *m.Hmin
	}
	return 0
}

func (m *BidRequest_Imp_Banner) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidRequest_Imp_Banner) GetPos() AdPosition {
	if m != nil && m.Pos != nil {
		return *m.Pos
	}
	return AdPosition_UNKNOWN
}

func (m *BidRequest_Imp_Banner) GetBtype() []BannerAdType {
	if m != nil {
		return m.Btype
	}
	return nil
}

func (m *BidRequest_Imp_Banner) GetBattr() []CreativeAttribute {
	if m != nil {
		return m.Battr
	}
	return nil
}

func (m *BidRequest_Imp_Banner) GetMimes() []string {
	if m != nil {
		return m.Mimes
	}
	return nil
}

func (m *BidRequest_Imp_Banner) GetTopframe() bool {
	if m != nil && m.Topframe != nil {
		return *m.Topframe
	}
	return false
}

func (m *BidRequest_Imp_Banner) GetExpdir() []ExpandableDirection {
	if m != nil {
		return m.Expdir
	}
	return nil
}

func (m *BidRequest_Imp_Banner) GetApi() []APIFramework {
	if m != nil {
		return m.Api
	}
	return nil
}

// OpenRTB 2.4: This object represents an allowed size (i.e.,
// height and width combination) for a banner impression.
// These are typically used in an array for an impression where
// multiple sizes are permitted.
type BidRequest_Imp_Banner_Format struct {
	// Width in device independent pixels (DIPS).
	W *int32 `protobuf:"varint,1,opt,name=w" json:"w,omitempty"`
	// Height in device independent pixels (DIPS).
	H                            *int32 `protobuf:"varint,2,opt,name=h" json:"h,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *BidRequest_Imp_Banner_Format) Reset()         { *m = BidRequest_Imp_Banner_Format{} }
func (m *BidRequest_Imp_Banner_Format) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Imp_Banner_Format) ProtoMessage()    {}
func (*BidRequest_Imp_Banner_Format) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0, 0, 0}
}

var extRange_BidRequest_Imp_Banner_Format = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest_Imp_Banner_Format) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest_Imp_Banner_Format
}

func (m *BidRequest_Imp_Banner_Format) GetW() int32 {
	if m != nil && m.W != nil {
		return *m.W
	}
	return 0
}

func (m *BidRequest_Imp_Banner_Format) GetH() int32 {
	if m != nil && m.H != nil {
		return *m.H
	}
	return 0
}

// OpenRTB 2.0: This object represents an in-stream video impression.
// Many of the fields are non-essential for minimally viable transactions,
// but are included to offer fine control when needed. Video in OpenRTB
// generally assumes compliance with the VAST standard. As such, the notion
// of companion ads is supported by optionally including an array of Banner
// objects (refer to the Banner object in Section 3.2.3) that define these
// companion ads.
//
// The presence of a Video as a subordinate of the Imp object indicates
// that this impression is offered as a video type impression. At the
// publisher's discretion, that same impression may also be offered as
// banner and/or native by also including as Imp subordinates the Banner
// and/or Native objects, respectively. However, any given bid for the
// impression must conform to one of the offered types.
type BidRequest_Imp_Video struct {
	// Whitelist of content MIME types supported. Popular MIME types include,
	// but are not limited to "image/jpg", "image/gif" and
	// "application/x-shockwave-flash".
	// REQUIRED by the OpenRTB specification: at least 1 element.
	// [AdX: BidRequest.Video.allowed_video_formats,
	//       BidRequest.AdSlot.excluded_attribute / VPAID]
	Mimes []string `protobuf:"bytes,1,rep,name=mimes" json:"mimes,omitempty"`
	// Indicates if the impression must be linear, nonlinear, etc.
	// If none specified, assume all are allowed.
	Linearity *VideoLinearity `protobuf:"varint,2,opt,name=linearity,enum=com.google.openrtb.VideoLinearity" json:"linearity,omitempty"`
	// Minimum video ad duration in seconds.
	// RECOMMENDED by the OpenRTB specification.
	// [AdX: BidRequest.Video.min_ad_duration]
	Minduration *int32 `protobuf:"varint,3,opt,name=minduration" json:"minduration,omitempty"`
	// Maximum video ad duration in seconds.
	// RECOMMENDED by the OpenRTB specification.
	// [AdX: BidRequest.Video.max_ad_duration]
	Maxduration *int32 `protobuf:"varint,4,opt,name=maxduration" json:"maxduration,omitempty"`
	// Deprecated; use protocols.
	Protocol *Protocol `protobuf:"varint,5,opt,name=protocol,enum=com.google.openrtb.Protocol" json:"protocol,omitempty"`
	// Array of supported video bid response protocols.
	// At least one supported protocol must be specified.
	// [AdX: BidRequest.Video.protocols]
	Protocols []Protocol `protobuf:"varint,21,rep,packed,name=protocols,enum=com.google.openrtb.Protocol" json:"protocols,omitempty"`
	// Width of the video player in device independent pixels (DIPS).
	// RECOMMENDED by the OpenRTB specification.
	// [AdX: BidRequest.AdSlot.width[0]]
	W *int32 `protobuf:"varint,6,opt,name=w" json:"w,omitempty"`
	// Height of the video player in device independent pixels (DIPS).
	// RECOMMENDED by the OpenRTB specification.
	// [AdX: BidRequest.AdSlot.height[0]]
	H *int32 `protobuf:"varint,7,opt,name=h" json:"h,omitempty"`
	// Indicates the start delay in seconds for pre-roll, mid-roll, or
	// post-roll ad placements.
	// Refer to enum StartDelay for generic values.
	// RECOMMENDED by the OpenRTB specification.
	// [AdX: BidRequest.Video.videoad_start_delay
	//       0: PRE_ROLL
	//       1: GENERIC_MID_ROLL
	//       -1: GENERIC_POST_ROLL
	//       Other values: videoad_start_delay / 1,000]
	Startdelay *int32 `protobuf:"varint,8,opt,name=startdelay" json:"startdelay,omitempty"`
	// Indicates if the player will allow the video to be skipped,
	// where 0 = no, 1 = yes.
	// If a bidder sends markup/creative that is itself skippable, the
	// Bid object should include the attr array with an element of
	// 16 indicating skippable video.
	// [AdX: BidRequest.Video.video_ad_skippable
	//       0: ALLOW_SKIPPABLE
	//       1: REQUIRE_SKIPPABLE
	//       2: BLOCK_SKIPPABLE]
	Skip *bool `protobuf:"varint,23,opt,name=skip" json:"skip,omitempty"`
	// Videos of total duration greater than this number of seconds
	// can be skippable; only applicable if the ad is skippable.
	Skipmin *int32 `protobuf:"varint,24,opt,name=skipmin" json:"skipmin,omitempty"`
	// Number of seconds a video must play before skipping is
	// enabled; only applicable if the ad is skippable.
	Skipafter *int32 `protobuf:"varint,25,opt,name=skipafter" json:"skipafter,omitempty"`
	// If multiple ad impressions are offered in the same bid request,
	// the sequence number will allow for the coordinated delivery of
	// multiple creatives.
	Sequence *int32 `protobuf:"varint,9,opt,name=sequence,def=1" json:"sequence,omitempty"`
	// Blocked creative attributes.
	// [AdX: BidRequest.AdSlot.excluded_attribute]
	Battr []CreativeAttribute `protobuf:"varint,10,rep,packed,name=battr,enum=com.google.openrtb.CreativeAttribute" json:"battr,omitempty"`
	// Maximum extended video ad duration, if extension is allowed.
	// If blank or 0, extension is not allowed. If -1, extension is allowed,
	// and there is no time limit imposed. If greater than 0, then the value
	// represents the number of seconds of extended play supported beyond
	// the maxduration value.
	Maxextended *int32 `protobuf:"varint,11,opt,name=maxextended" json:"maxextended,omitempty"`
	// Minimum bit rate in Kbps.
	Minbitrate *int32 `protobuf:"varint,12,opt,name=minbitrate" json:"minbitrate,omitempty"`
	// Maximum bit rate in Kbps.
	Maxbitrate *int32 `protobuf:"varint,13,opt,name=maxbitrate" json:"maxbitrate,omitempty"`
	// Indicates if letter-boxing of 4:3 content into a 16:9 window is
	// allowed, where 0 = no, 1 = yes.
	Boxingallowed *bool `protobuf:"varint,14,opt,name=boxingallowed,def=1" json:"boxingallowed,omitempty"`
	// Playback methods that may be in use. If none are specified, any
	// method may be used. Only one method is typically used in practice.
	// As a result, this array may be converted to an integer in a future
	// version of the specification.
	// [AdX: BidRequest.Video.playback_method]
	Playbackmethod []PlaybackMethod `protobuf:"varint,15,rep,packed,name=playbackmethod,enum=com.google.openrtb.PlaybackMethod" json:"playbackmethod,omitempty"`
	// Supported delivery methods (e.g., streaming, progressive).
	// If none specified, assume all are supported.
	Delivery []ContentDeliveryMethod `protobuf:"varint,16,rep,packed,name=delivery,enum=com.google.openrtb.ContentDeliveryMethod" json:"delivery,omitempty"`
	// Ad position on screen.
	// [AdX: BidRequest.AdSlot.slot_visibility]
	Pos *AdPosition `protobuf:"varint,17,opt,name=pos,enum=com.google.openrtb.AdPosition" json:"pos,omitempty"`
	// Array of Banner objects (Section 3.2.3) if companion ads are available.
	// [AdX: BidRequest.Video.companion_slot]
	Companionad []*BidRequest_Imp_Banner `protobuf:"bytes,18,rep,name=companionad" json:"companionad,omitempty"`
	// Companion ads in OpenRTB 2.1 format. (Or to be precise, interpretations
	// based on the buggy sample message in 5.1.4, fixed later in 2.2.)
	Companionad_21 *BidRequest_Imp_Video_CompanionAd `protobuf:"bytes,22,opt,name=companionad_21,json=companionad21" json:"companionad_21,omitempty"`
	// List of supported API frameworks for this impression.
	// If an API is not explicitly listed, it is assumed not to be supported.
	// [AdX: BidRequest.AdSlot.excluded_attribute / MRAID_1_0]
	Api []APIFramework `protobuf:"varint,19,rep,packed,name=api,enum=com.google.openrtb.APIFramework" json:"api,omitempty"`
	// Supported VAST companion ad types.  Recommended if companion Banner
	// objects are included via the companionad array.
	// [AdX: BidRequest.Video.companion_slot.creative_format]
	Companiontype                []CompanionType `protobuf:"varint,20,rep,packed,name=companiontype,enum=com.google.openrtb.CompanionType" json:"companiontype,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *BidRequest_Imp_Video) Reset()                    { *m = BidRequest_Imp_Video{} }
func (m *BidRequest_Imp_Video) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_Imp_Video) ProtoMessage()               {}
func (*BidRequest_Imp_Video) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0, 1} }

var extRange_BidRequest_Imp_Video = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest_Imp_Video) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest_Imp_Video
}

const Default_BidRequest_Imp_Video_Sequence int32 = 1
const Default_BidRequest_Imp_Video_Boxingallowed bool = true

func (m *BidRequest_Imp_Video) GetMimes() []string {
	if m != nil {
		return m.Mimes
	}
	return nil
}

func (m *BidRequest_Imp_Video) GetLinearity() VideoLinearity {
	if m != nil && m.Linearity != nil {
		return *m.Linearity
	}
	return VideoLinearity_LINEAR
}

func (m *BidRequest_Imp_Video) GetMinduration() int32 {
	if m != nil && m.Minduration != nil {
		return *m.Minduration
	}
	return 0
}

func (m *BidRequest_Imp_Video) GetMaxduration() int32 {
	if m != nil && m.Maxduration != nil {
		return *m.Maxduration
	}
	return 0
}

func (m *BidRequest_Imp_Video) GetProtocol() Protocol {
	if m != nil && m.Protocol != nil {
		return *m.Protocol
	}
	return Protocol_VAST_1_0
}

func (m *BidRequest_Imp_Video) GetProtocols() []Protocol {
	if m != nil {
		return m.Protocols
	}
	return nil
}

func (m *BidRequest_Imp_Video) GetW() int32 {
	if m != nil && m.W != nil {
		return *m.W
	}
	return 0
}

func (m *BidRequest_Imp_Video) GetH() int32 {
	if m != nil && m.H != nil {
		return *m.H
	}
	return 0
}

func (m *BidRequest_Imp_Video) GetStartdelay() int32 {
	if m != nil && m.Startdelay != nil {
		return *m.Startdelay
	}
	return 0
}

func (m *BidRequest_Imp_Video) GetSkip() bool {
	if m != nil && m.Skip != nil {
		return *m.Skip
	}
	return false
}

func (m *BidRequest_Imp_Video) GetSkipmin() int32 {
	if m != nil && m.Skipmin != nil {
		return *m.Skipmin
	}
	return 0
}

func (m *BidRequest_Imp_Video) GetSkipafter() int32 {
	if m != nil && m.Skipafter != nil {
		return *m.Skipafter
	}
	return 0
}

func (m *BidRequest_Imp_Video) GetSequence() int32 {
	if m != nil && m.Sequence != nil {
		return *m.Sequence
	}
	return Default_BidRequest_Imp_Video_Sequence
}

func (m *BidRequest_Imp_Video) GetBattr() []CreativeAttribute {
	if m != nil {
		return m.Battr
	}
	return nil
}

func (m *BidRequest_Imp_Video) GetMaxextended() int32 {
	if m != nil && m.Maxextended != nil {
		return *m.Maxextended
	}
	return 0
}

func (m *BidRequest_Imp_Video) GetMinbitrate() int32 {
	if m != nil && m.Minbitrate != nil {
		return *m.Minbitrate
	}
	return 0
}

func (m *BidRequest_Imp_Video) GetMaxbitrate() int32 {
	if m != nil && m.Maxbitrate != nil {
		return *m.Maxbitrate
	}
	return 0
}

func (m *BidRequest_Imp_Video) GetBoxingallowed() bool {
	if m != nil && m.Boxingallowed != nil {
		return *m.Boxingallowed
	}
	return Default_BidRequest_Imp_Video_Boxingallowed
}

func (m *BidRequest_Imp_Video) GetPlaybackmethod() []PlaybackMethod {
	if m != nil {
		return m.Playbackmethod
	}
	return nil
}

func (m *BidRequest_Imp_Video) GetDelivery() []ContentDeliveryMethod {
	if m != nil {
		return m.Delivery
	}
	return nil
}

func (m *BidRequest_Imp_Video) GetPos() AdPosition {
	if m != nil && m.Pos != nil {
		return *m.Pos
	}
	return AdPosition_UNKNOWN
}

func (m *BidRequest_Imp_Video) GetCompanionad() []*BidRequest_Imp_Banner {
	if m != nil {
		return m.Companionad
	}
	return nil
}

func (m *BidRequest_Imp_Video) GetCompanionad_21() *BidRequest_Imp_Video_CompanionAd {
	if m != nil {
		return m.Companionad_21
	}
	return nil
}

func (m *BidRequest_Imp_Video) GetApi() []APIFramework {
	if m != nil {
		return m.Api
	}
	return nil
}

func (m *BidRequest_Imp_Video) GetCompaniontype() []CompanionType {
	if m != nil {
		return m.Companiontype
	}
	return nil
}

// OpenRTB 2.1 compatibility.
type BidRequest_Imp_Video_CompanionAd struct {
	Banner                       []*BidRequest_Imp_Banner `protobuf:"bytes,1,rep,name=banner" json:"banner,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *BidRequest_Imp_Video_CompanionAd) Reset()         { *m = BidRequest_Imp_Video_CompanionAd{} }
func (m *BidRequest_Imp_Video_CompanionAd) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Imp_Video_CompanionAd) ProtoMessage()    {}
func (*BidRequest_Imp_Video_CompanionAd) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0, 1, 0}
}

var extRange_BidRequest_Imp_Video_CompanionAd = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest_Imp_Video_CompanionAd) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest_Imp_Video_CompanionAd
}

func (m *BidRequest_Imp_Video_CompanionAd) GetBanner() []*BidRequest_Imp_Banner {
	if m != nil {
		return m.Banner
	}
	return nil
}

// This object represents an audio type impression. Many of the fields
// are non-essential for minimally viable transactions, but are included
// to offer fine control when needed. Audio in OpenRTB generally assumes
// compliance with the DAAST standard. As such, the notion of companion
// ads is supported by optionally including an array of Banner objects
// that define these companion ads.
//
// The presence of a Audio as a subordinate of the Imp object indicates
// that this impression is offered as an audio type impression.
// At the publisher’s discretion, that same impression may also be offered
// as banner, video, and/or native by also including as Imp subordinates
// objects of those types. However, any given bid for the impression must
// conform to one of the offered types.
type BidRequest_Imp_Audio struct {
	// Content MIME types supported (e.g., "audio/mp4").
	// REQUIRED by the OpenRTB specification: at least 1 element.
	Mimes []string `protobuf:"bytes,1,rep,name=mimes" json:"mimes,omitempty"`
	// Minimum audio ad duration in seconds.
	// RECOMMENDED by the OpenRTB specification.
	Minduration *int32 `protobuf:"varint,2,opt,name=minduration" json:"minduration,omitempty"`
	// Maximum audio ad duration in seconds.
	// RECOMMENDED by the OpenRTB specification.
	Maxduration *int32 `protobuf:"varint,3,opt,name=maxduration" json:"maxduration,omitempty"`
	// Array of supported audio protocols.
	// RECOMMENDED by the OpenRTB specification.
	Protocols []Protocol `protobuf:"varint,4,rep,packed,name=protocols,enum=com.google.openrtb.Protocol" json:"protocols,omitempty"`
	// Indicates the start delay in seconds for pre-roll, mid-roll, or
	// post-roll ad placements.
	// Refer to enum StartDelay for generic values.
	// RECOMMENDED by the OpenRTB specification.
	Startdelay *int32 `protobuf:"varint,5,opt,name=startdelay" json:"startdelay,omitempty"`
	// If multiple ad impressions are offered in the same bid request,
	// the sequence number will allow for the coordinated delivery of
	// multiple creatives.
	Sequence *int32 `protobuf:"varint,6,opt,name=sequence,def=1" json:"sequence,omitempty"`
	// Blocked creative attributes.
	Battr []CreativeAttribute `protobuf:"varint,7,rep,packed,name=battr,enum=com.google.openrtb.CreativeAttribute" json:"battr,omitempty"`
	// Maximum extended video ad duration, if extension is allowed.
	// If blank or 0, extension is not allowed. If -1, extension is allowed,
	// and there is no time limit imposed. If greater than 0, then the value
	// represents the number of seconds of extended play supported beyond
	// the maxduration value.
	Maxextended *int32 `protobuf:"varint,8,opt,name=maxextended" json:"maxextended,omitempty"`
	// Minimum bit rate in Kbps.
	Minbitrate *int32 `protobuf:"varint,9,opt,name=minbitrate" json:"minbitrate,omitempty"`
	// Maximum bit rate in Kbps.
	Maxbitrate *int32 `protobuf:"varint,10,opt,name=maxbitrate" json:"maxbitrate,omitempty"`
	// Supported delivery methods (e.g., streaming, progressive).
	// If none specified, assume all are supported.
	Delivery []ContentDeliveryMethod `protobuf:"varint,11,rep,packed,name=delivery,enum=com.google.openrtb.ContentDeliveryMethod" json:"delivery,omitempty"`
	// Array of Banner objects if companion ads are available.
	Companionad []*BidRequest_Imp_Banner `protobuf:"bytes,12,rep,name=companionad" json:"companionad,omitempty"`
	// List of supported API frameworks for this impression.
	// If an API is not explicitly listed, it is assumed not to be supported.
	Api []APIFramework `protobuf:"varint,13,rep,packed,name=api,enum=com.google.openrtb.APIFramework" json:"api,omitempty"`
	// Supported DAAST companion ad types.  Recommended if companion Banner
	// objects are included via the companionad array.
	Companiontype []CompanionType `protobuf:"varint,20,rep,packed,name=companiontype,enum=com.google.openrtb.CompanionType" json:"companiontype,omitempty"`
	// The maximum number of ads that can be played in an ad pod.
	Maxseq *int32 `protobuf:"varint,21,opt,name=maxseq" json:"maxseq,omitempty"`
	// Type of audio feed.
	Feed *FeedType `protobuf:"varint,22,opt,name=feed,enum=com.google.openrtb.FeedType" json:"feed,omitempty"`
	// Indicates if the ad is stitched with audio content or delivered
	// independently, where 0 = no, 1 = yes.
	Stitched *bool `protobuf:"varint,23,opt,name=stitched" json:"stitched,omitempty"`
	// Volume normalization mode.
	Nvol                         *VolumeNormalizationMode `protobuf:"varint,24,opt,name=nvol,enum=com.google.openrtb.VolumeNormalizationMode" json:"nvol,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *BidRequest_Imp_Audio) Reset()                    { *m = BidRequest_Imp_Audio{} }
func (m *BidRequest_Imp_Audio) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_Imp_Audio) ProtoMessage()               {}
func (*BidRequest_Imp_Audio) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0, 2} }

var extRange_BidRequest_Imp_Audio = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest_Imp_Audio) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest_Imp_Audio
}

const Default_BidRequest_Imp_Audio_Sequence int32 = 1

func (m *BidRequest_Imp_Audio) GetMimes() []string {
	if m != nil {
		return m.Mimes
	}
	return nil
}

func (m *BidRequest_Imp_Audio) GetMinduration() int32 {
	if m != nil && m.Minduration != nil {
		return *m.Minduration
	}
	return 0
}

func (m *BidRequest_Imp_Audio) GetMaxduration() int32 {
	if m != nil && m.Maxduration != nil {
		return *m.Maxduration
	}
	return 0
}

func (m *BidRequest_Imp_Audio) GetProtocols() []Protocol {
	if m != nil {
		return m.Protocols
	}
	return nil
}

func (m *BidRequest_Imp_Audio) GetStartdelay() int32 {
	if m != nil && m.Startdelay != nil {
		return *m.Startdelay
	}
	return 0
}

func (m *BidRequest_Imp_Audio) GetSequence() int32 {
	if m != nil && m.Sequence != nil {
		return *m.Sequence
	}
	return Default_BidRequest_Imp_Audio_Sequence
}

func (m *BidRequest_Imp_Audio) GetBattr() []CreativeAttribute {
	if m != nil {
		return m.Battr
	}
	return nil
}

func (m *BidRequest_Imp_Audio) GetMaxextended() int32 {
	if m != nil && m.Maxextended != nil {
		return *m.Maxextended
	}
	return 0
}

func (m *BidRequest_Imp_Audio) GetMinbitrate() int32 {
	if m != nil && m.Minbitrate != nil {
		return *m.Minbitrate
	}
	return 0
}

func (m *BidRequest_Imp_Audio) GetMaxbitrate() int32 {
	if m != nil && m.Maxbitrate != nil {
		return *m.Maxbitrate
	}
	return 0
}

func (m *BidRequest_Imp_Audio) GetDelivery() []ContentDeliveryMethod {
	if m != nil {
		return m.Delivery
	}
	return nil
}

func (m *BidRequest_Imp_Audio) GetCompanionad() []*BidRequest_Imp_Banner {
	if m != nil {
		return m.Companionad
	}
	return nil
}

func (m *BidRequest_Imp_Audio) GetApi() []APIFramework {
	if m != nil {
		return m.Api
	}
	return nil
}

func (m *BidRequest_Imp_Audio) GetCompaniontype() []CompanionType {
	if m != nil {
		return m.Companiontype
	}
	return nil
}

func (m *BidRequest_Imp_Audio) GetMaxseq() int32 {
	if m != nil && m.Maxseq != nil {
		return *m.Maxseq
	}
	return 0
}

func (m *BidRequest_Imp_Audio) GetFeed() FeedType {
	if m != nil && m.Feed != nil {
		return *m.Feed
	}
	return FeedType_MUSIC_SERVICE
}

func (m *BidRequest_Imp_Audio) GetStitched() bool {
	if m != nil && m.Stitched != nil {
		return *m.Stitched
	}
	return false
}

func (m *BidRequest_Imp_Audio) GetNvol() VolumeNormalizationMode {
	if m != nil && m.Nvol != nil {
		return *m.Nvol
	}
	return VolumeNormalizationMode_NONE
}

// OpenRTB 2.3: This object represents a native type impression.
// Native ad units are intended to blend seamlessly into the surrounding
// content (e.g., a sponsored Twitter or Facebook post). As such, the
// response must be well-structured to afford the publisher fine-grained
// control over rendering.
//
// The Native Subcommittee has developed a companion specification to
// OpenRTB called the Native Ad Specification. It defines the request
// parameters and response markup structure of native ad units.
// This object provides the means of transporting request parameters as an
// opaque string so that the specific parameters can evolve separately
// under the auspices of the Native Ad Specification. Similarly, the
// ad markup served will be structured according to that specification.
//
// The presence of a Native as a subordinate of the Imp object indicates
// that this impression is offered as a native type impression.
// At the publisher's discretion, that same impression may also be offered
// as banner and/or video by also including as Imp subordinates the Banner
// and/or Video objects, respectively. However, any given bid for the
// impression must conform to one of the offered types.
type BidRequest_Imp_Native struct {
	// Types that are valid to be assigned to RequestOneof:
	//	*BidRequest_Imp_Native_Request
	//	*BidRequest_Imp_Native_RequestNative
	RequestOneof isBidRequest_Imp_Native_RequestOneof `protobuf_oneof:"request_oneof"`
	// Version of the Native Ad Specification to which request complies.
	// RECOMMENDED by the OpenRTB specification.
	// [AdX: "1.0" for OpenRTB 2.3; "1.1" for OpenRTB 2.4]
	Ver *string `protobuf:"bytes,2,opt,name=ver" json:"ver,omitempty"`
	// List of supported API frameworks for this impression.
	// If an API is not explicitly listed, it is assumed not to be supported.
	// [AdX: BidRequest.AdSlot.excluded_attribute / MRAID_1_0]
	Api []APIFramework `protobuf:"varint,3,rep,packed,name=api,enum=com.google.openrtb.APIFramework" json:"api,omitempty"`
	// Blocked creative attributes.
	// [AdX: BidRequest.AdSlot.excluded_attribute]
	Battr                        []CreativeAttribute `protobuf:"varint,4,rep,packed,name=battr,enum=com.google.openrtb.CreativeAttribute" json:"battr,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *BidRequest_Imp_Native) Reset()                    { *m = BidRequest_Imp_Native{} }
func (m *BidRequest_Imp_Native) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_Imp_Native) ProtoMessage()               {}
func (*BidRequest_Imp_Native) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0, 3} }

var extRange_BidRequest_Imp_Native = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest_Imp_Native) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest_Imp_Native
}

type isBidRequest_Imp_Native_RequestOneof interface {
	isBidRequest_Imp_Native_RequestOneof()
}

type BidRequest_Imp_Native_Request struct {
	Request string `protobuf:"bytes,1,opt,name=request,oneof"`
}
type BidRequest_Imp_Native_RequestNative struct {
	RequestNative *NativeRequest `protobuf:"bytes,50,opt,name=request_native,json=requestNative,oneof"`
}

func (*BidRequest_Imp_Native_Request) isBidRequest_Imp_Native_RequestOneof()       {}
func (*BidRequest_Imp_Native_RequestNative) isBidRequest_Imp_Native_RequestOneof() {}

func (m *BidRequest_Imp_Native) GetRequestOneof() isBidRequest_Imp_Native_RequestOneof {
	if m != nil {
		return m.RequestOneof
	}
	return nil
}

func (m *BidRequest_Imp_Native) GetRequest() string {
	if x, ok := m.GetRequestOneof().(*BidRequest_Imp_Native_Request); ok {
		return x.Request
	}
	return ""
}

func (m *BidRequest_Imp_Native) GetRequestNative() *NativeRequest {
	if x, ok := m.GetRequestOneof().(*BidRequest_Imp_Native_RequestNative); ok {
		return x.RequestNative
	}
	return nil
}

func (m *BidRequest_Imp_Native) GetVer() string {
	if m != nil && m.Ver != nil {
		return *m.Ver
	}
	return ""
}

func (m *BidRequest_Imp_Native) GetApi() []APIFramework {
	if m != nil {
		return m.Api
	}
	return nil
}

func (m *BidRequest_Imp_Native) GetBattr() []CreativeAttribute {
	if m != nil {
		return m.Battr
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BidRequest_Imp_Native) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BidRequest_Imp_Native_OneofMarshaler, _BidRequest_Imp_Native_OneofUnmarshaler, _BidRequest_Imp_Native_OneofSizer, []interface{}{
		(*BidRequest_Imp_Native_Request)(nil),
		(*BidRequest_Imp_Native_RequestNative)(nil),
	}
}

func _BidRequest_Imp_Native_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BidRequest_Imp_Native)
	// request_oneof
	switch x := m.RequestOneof.(type) {
	case *BidRequest_Imp_Native_Request:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Request)
	case *BidRequest_Imp_Native_RequestNative:
		b.EncodeVarint(50<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RequestNative); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BidRequest_Imp_Native.RequestOneof has unexpected type %T", x)
	}
	return nil
}

func _BidRequest_Imp_Native_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BidRequest_Imp_Native)
	switch tag {
	case 1: // request_oneof.request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.RequestOneof = &BidRequest_Imp_Native_Request{x}
		return true, err
	case 50: // request_oneof.request_native
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NativeRequest)
		err := b.DecodeMessage(msg)
		m.RequestOneof = &BidRequest_Imp_Native_RequestNative{msg}
		return true, err
	default:
		return false, nil
	}
}

func _BidRequest_Imp_Native_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BidRequest_Imp_Native)
	// request_oneof
	switch x := m.RequestOneof.(type) {
	case *BidRequest_Imp_Native_Request:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Request)))
		n += len(x.Request)
	case *BidRequest_Imp_Native_RequestNative:
		s := proto.Size(x.RequestNative)
		n += proto.SizeVarint(50<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// OpenRTB 2.2: This object is the private marketplace container for
// direct deals between buyers and sellers that may pertain to this
// impression. The actual deals are represented as a collection of
// Deal objects. Refer to Section 7.2 for more details.
type BidRequest_Imp_Pmp struct {
	// Indicator of auction eligibility to seats named in the Direct Deals
	// object, where 0 = all bids are accepted, 1 = bids are restricted to
	// the deals specified and the terms thereof.
	PrivateAuction *bool `protobuf:"varint,1,opt,name=private_auction,json=privateAuction,def=0" json:"private_auction,omitempty"`
	// Array of Deal (Section 3.2.18) objects that convey the specific deals
	// applicable to this impression.
	// [AdX: BidRequest.AdSlot.MatchingAdData.DirectDeal]
	Deals                        []*BidRequest_Imp_Pmp_Deal `protobuf:"bytes,2,rep,name=deals" json:"deals,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *BidRequest_Imp_Pmp) Reset()                    { *m = BidRequest_Imp_Pmp{} }
func (m *BidRequest_Imp_Pmp) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_Imp_Pmp) ProtoMessage()               {}
func (*BidRequest_Imp_Pmp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0, 4} }

var extRange_BidRequest_Imp_Pmp = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest_Imp_Pmp) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest_Imp_Pmp
}

const Default_BidRequest_Imp_Pmp_PrivateAuction bool = false

func (m *BidRequest_Imp_Pmp) GetPrivateAuction() bool {
	if m != nil && m.PrivateAuction != nil {
		return *m.PrivateAuction
	}
	return Default_BidRequest_Imp_Pmp_PrivateAuction
}

func (m *BidRequest_Imp_Pmp) GetDeals() []*BidRequest_Imp_Pmp_Deal {
	if m != nil {
		return m.Deals
	}
	return nil
}

// OpenRTB 2.2: This object constitutes a specific deal that was struck
// a priori between a buyer and a seller. Its presence with the Pmp
// collection indicates that this impression is available under the terms
// of that deal. Refer to Section 7.2 for more details.
type BidRequest_Imp_Pmp_Deal struct {
	// A unique identifier for the direct deal.
	// REQUIRED by the OpenRTB specification.
	// [AdX: BidRequest.AdSlot.MatchingAdData.DirectDeal.direct_deal_id]
	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// Minimum bid for this impression expressed in CPM.
	// [AdX: BidRequest.AdSlot.MatchingAdData.DirectDeal.fixed_cpm_micros *
	//       1,000,000]
	Bidfloor *float64 `protobuf:"fixed64,2,opt,name=bidfloor,def=0" json:"bidfloor,omitempty"`
	// Currency specified using ISO-4217 alpha codes. This may be different
	// from bid currency returned by bidder if this is allowed
	// by the exchange.
	// [AdX: A single currency, obtained from the included billing_id]
	Bidfloorcur *string `protobuf:"bytes,3,opt,name=bidfloorcur,def=USD" json:"bidfloorcur,omitempty"`
	// Whitelist of buyer seats (e.g., advertisers, agencies) allowed to
	// bid on this deal. IDs of seats and knowledge of the buyer's
	// customers to which they refer must be coordinated between bidders
	// and the exchange a priori. Omission implies no seat restrictions.
	Wseat []string `protobuf:"bytes,4,rep,name=wseat" json:"wseat,omitempty"`
	// Array of advertiser domains (e.g., advertiser.com) allowed to
	// bid on this deal. Omission implies no advertiser restrictions.
	Wadomain []string `protobuf:"bytes,5,rep,name=wadomain" json:"wadomain,omitempty"`
	// Optional override of the overall auction type of the bid request,
	// where 1 = First Price, 2 = Second Price Plus, 3 = the value passed
	// in bidfloor is the agreed upon deal price. Additional auction types
	// can be defined by the exchange.
	// [AdX: BidRequest.AdSlot.MatchingAdData.DirectDeal.deal_type]
	At                           *AuctionType `protobuf:"varint,6,opt,name=at,enum=com.google.openrtb.AuctionType" json:"at,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *BidRequest_Imp_Pmp_Deal) Reset()         { *m = BidRequest_Imp_Pmp_Deal{} }
func (m *BidRequest_Imp_Pmp_Deal) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Imp_Pmp_Deal) ProtoMessage()    {}
func (*BidRequest_Imp_Pmp_Deal) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0, 4, 0}
}

var extRange_BidRequest_Imp_Pmp_Deal = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest_Imp_Pmp_Deal) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest_Imp_Pmp_Deal
}

const Default_BidRequest_Imp_Pmp_Deal_Bidfloor float64 = 0
const Default_BidRequest_Imp_Pmp_Deal_Bidfloorcur string = "USD"

func (m *BidRequest_Imp_Pmp_Deal) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidRequest_Imp_Pmp_Deal) GetBidfloor() float64 {
	if m != nil && m.Bidfloor != nil {
		return *m.Bidfloor
	}
	return Default_BidRequest_Imp_Pmp_Deal_Bidfloor
}

func (m *BidRequest_Imp_Pmp_Deal) GetBidfloorcur() string {
	if m != nil && m.Bidfloorcur != nil {
		return *m.Bidfloorcur
	}
	return Default_BidRequest_Imp_Pmp_Deal_Bidfloorcur
}

func (m *BidRequest_Imp_Pmp_Deal) GetWseat() []string {
	if m != nil {
		return m.Wseat
	}
	return nil
}

func (m *BidRequest_Imp_Pmp_Deal) GetWadomain() []string {
	if m != nil {
		return m.Wadomain
	}
	return nil
}

func (m *BidRequest_Imp_Pmp_Deal) GetAt() AuctionType {
	if m != nil && m.At != nil {
		return *m.At
	}
	return AuctionType_FIRST_PRICE
}

// OpenRTB 2.0: This object should be included if the ad supported content
// is a website as opposed to a non-browser application. A bid request must
// not contain both a Site and an App object. At a minimum, it is useful to
// provide a site ID or page URL, but this is not strictly required.
type BidRequest_Site struct {
	// Site ID on the exchange.
	// RECOMMENDED by the OpenRTB specification.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Site name (may be masked at publisher's request).
	// [AdX: BidRequest.anonymous_id]
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Domain of the site, used for advertiser side blocking.
	// For example, "foo.com".
	Domain *string `protobuf:"bytes,3,opt,name=domain" json:"domain,omitempty"`
	// Array of IAB content categories of the site.
	// See enum ContentCategory.
	Cat []string `protobuf:"bytes,4,rep,name=cat" json:"cat,omitempty"`
	// Array of IAB content categories that describe the current section
	// of the site.
	// See enum ContentCategory.
	Sectioncat []string `protobuf:"bytes,5,rep,name=sectioncat" json:"sectioncat,omitempty"`
	// Array of IAB content categories that describe the current page or view
	// of the site.
	// See enum ContentCategory.
	Pagecat []string `protobuf:"bytes,6,rep,name=pagecat" json:"pagecat,omitempty"`
	// URL of the page where the impression will be shown.
	// [AdX: BidRequest.url]
	Page *string `protobuf:"bytes,7,opt,name=page" json:"page,omitempty"`
	// Indicates if the site has a privacy policy, where 0 = no, 1 = yes.
	Privacypolicy *bool `protobuf:"varint,8,opt,name=privacypolicy" json:"privacypolicy,omitempty"`
	// Referrer URL that caused navigation to the current page.
	Ref *string `protobuf:"bytes,9,opt,name=ref" json:"ref,omitempty"`
	// Search string that caused navigation to the current page.
	Search *string `protobuf:"bytes,10,opt,name=search" json:"search,omitempty"`
	// Details about the Publisher (Section 3.2.8) of the site.
	// [AdX: BidRequest]
	Publisher *BidRequest_Publisher `protobuf:"bytes,11,opt,name=publisher" json:"publisher,omitempty"`
	// Details about the Content (Section 3.2.9) within the site.
	// [AdX: BidRequest]
	Content *BidRequest_Content `protobuf:"bytes,12,opt,name=content" json:"content,omitempty"`
	// Comma separated list of keywords about this site.
	// Note: OpenRTB 2.2 allowed an array-of-strings as alternate implementation
	// but this was fixed in 2.3+ where it's definitely a single string with CSV
	// content again. Compatibility with some OpenRTB 2.2 exchanges that adopted
	// the alternate representation may require custom handling of the JSON.
	Keywords *string `protobuf:"bytes,13,opt,name=keywords" json:"keywords,omitempty"`
	// Indicates if the site has been programmed to optimize layout
	// when viewed on mobile devices, where 0 = no, 1 = yes.
	// [AdX: BidRequest.Mobile.is_mobile_web_optimized]
	Mobile                       *bool `protobuf:"varint,15,opt,name=mobile" json:"mobile,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *BidRequest_Site) Reset()                    { *m = BidRequest_Site{} }
func (m *BidRequest_Site) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_Site) ProtoMessage()               {}
func (*BidRequest_Site) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

var extRange_BidRequest_Site = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest_Site) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest_Site
}

func (m *BidRequest_Site) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidRequest_Site) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *BidRequest_Site) GetDomain() string {
	if m != nil && m.Domain != nil {
		return *m.Domain
	}
	return ""
}

func (m *BidRequest_Site) GetCat() []string {
	if m != nil {
		return m.Cat
	}
	return nil
}

func (m *BidRequest_Site) GetSectioncat() []string {
	if m != nil {
		return m.Sectioncat
	}
	return nil
}

func (m *BidRequest_Site) GetPagecat() []string {
	if m != nil {
		return m.Pagecat
	}
	return nil
}

func (m *BidRequest_Site) GetPage() string {
	if m != nil && m.Page != nil {
		return *m.Page
	}
	return ""
}

func (m *BidRequest_Site) GetPrivacypolicy() bool {
	if m != nil && m.Privacypolicy != nil {
		return *m.Privacypolicy
	}
	return false
}

func (m *BidRequest_Site) GetRef() string {
	if m != nil && m.Ref != nil {
		return *m.Ref
	}
	return ""
}

func (m *BidRequest_Site) GetSearch() string {
	if m != nil && m.Search != nil {
		return *m.Search
	}
	return ""
}

func (m *BidRequest_Site) GetPublisher() *BidRequest_Publisher {
	if m != nil {
		return m.Publisher
	}
	return nil
}

func (m *BidRequest_Site) GetContent() *BidRequest_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *BidRequest_Site) GetKeywords() string {
	if m != nil && m.Keywords != nil {
		return *m.Keywords
	}
	return ""
}

func (m *BidRequest_Site) GetMobile() bool {
	if m != nil && m.Mobile != nil {
		return *m.Mobile
	}
	return false
}

// OpenRTB 2.0: This object should be included if the ad supported content
// is a non-browser application (typically in mobile) as opposed to a website.
// A bid request must not contain both an App and a Site object.
// At a minimum, it is useful to provide an App ID or bundle,
// but this is not strictly required.
type BidRequest_App struct {
	// Application ID on the exchange.
	// RECOMMENDED by the OpenRTB specification.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Application name (may be aliased at publisher's request).
	// [AdX: BidRequest.Mobile.app_name]
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Domain of the application. For example, "mygame.foo.com".
	Domain *string `protobuf:"bytes,3,opt,name=domain" json:"domain,omitempty"`
	// Array of IAB content categories of the app.
	// See enum ContentCategory.
	Cat []string `protobuf:"bytes,4,rep,name=cat" json:"cat,omitempty"`
	// Array of IAB content categories that describe the current section
	// of the app.
	// See enum ContentCategory.
	Sectioncat []string `protobuf:"bytes,5,rep,name=sectioncat" json:"sectioncat,omitempty"`
	// Array of IAB content categories that describe the current page or view
	// of the app.
	// See enum ContentCategory.
	Pagecat []string `protobuf:"bytes,6,rep,name=pagecat" json:"pagecat,omitempty"`
	// Application version.
	Ver *string `protobuf:"bytes,7,opt,name=ver" json:"ver,omitempty"`
	// A platform-specific application identifier intended to be
	// unique to the app and independent of the exchange. On Android,
	// this should be a bundle or package name (e.g., com.foo.mygame).
	// On iOS, it is a numeric ID.
	// [AdX: BidRequest.Mobile.app_id]
	Bundle *string `protobuf:"bytes,8,opt,name=bundle" json:"bundle,omitempty"`
	// Indicates if the app has a privacy policy, where 0 = no, 1 = yes.
	Privacypolicy *bool `protobuf:"varint,9,opt,name=privacypolicy" json:"privacypolicy,omitempty"`
	// 0 = app is free, 1 = the app is a paid version.
	Paid *bool `protobuf:"varint,10,opt,name=paid" json:"paid,omitempty"`
	// Details about the Publisher (Section 3.2.8) of the app.
	// [AdX: BidRequest]
	Publisher *BidRequest_Publisher `protobuf:"bytes,11,opt,name=publisher" json:"publisher,omitempty"`
	// Details about the Content (Section 3.2.9) within the app.
	// [AdX: BidRequest]
	Content *BidRequest_Content `protobuf:"bytes,12,opt,name=content" json:"content,omitempty"`
	// Comma separated list of keywords about the app.
	Keywords *string `protobuf:"bytes,13,opt,name=keywords" json:"keywords,omitempty"`
	// App store URL for an installed app; for QAG 1.5 compliance.
	Storeurl                     *string `protobuf:"bytes,16,opt,name=storeurl" json:"storeurl,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *BidRequest_App) Reset()                    { *m = BidRequest_App{} }
func (m *BidRequest_App) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_App) ProtoMessage()               {}
func (*BidRequest_App) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 2} }

var extRange_BidRequest_App = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest_App) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest_App
}

func (m *BidRequest_App) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidRequest_App) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *BidRequest_App) GetDomain() string {
	if m != nil && m.Domain != nil {
		return *m.Domain
	}
	return ""
}

func (m *BidRequest_App) GetCat() []string {
	if m != nil {
		return m.Cat
	}
	return nil
}

func (m *BidRequest_App) GetSectioncat() []string {
	if m != nil {
		return m.Sectioncat
	}
	return nil
}

func (m *BidRequest_App) GetPagecat() []string {
	if m != nil {
		return m.Pagecat
	}
	return nil
}

func (m *BidRequest_App) GetVer() string {
	if m != nil && m.Ver != nil {
		return *m.Ver
	}
	return ""
}

func (m *BidRequest_App) GetBundle() string {
	if m != nil && m.Bundle != nil {
		return *m.Bundle
	}
	return ""
}

func (m *BidRequest_App) GetPrivacypolicy() bool {
	if m != nil && m.Privacypolicy != nil {
		return *m.Privacypolicy
	}
	return false
}

func (m *BidRequest_App) GetPaid() bool {
	if m != nil && m.Paid != nil {
		return *m.Paid
	}
	return false
}

func (m *BidRequest_App) GetPublisher() *BidRequest_Publisher {
	if m != nil {
		return m.Publisher
	}
	return nil
}

func (m *BidRequest_App) GetContent() *BidRequest_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *BidRequest_App) GetKeywords() string {
	if m != nil && m.Keywords != nil {
		return *m.Keywords
	}
	return ""
}

func (m *BidRequest_App) GetStoreurl() string {
	if m != nil && m.Storeurl != nil {
		return *m.Storeurl
	}
	return ""
}

// OpenRTB 2.0: This object describes the publisher of the media in which
// the ad will be displayed. The publisher is typically the seller
// in an OpenRTB transaction.
type BidRequest_Publisher struct {
	// Exchange-specific publisher ID.
	// [AdX: BidRequest.seller_network_id]
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Publisher name (may be aliased at publisher's request).
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Array of IAB content categories that describe the publisher.
	// See enum ContentCategory.
	Cat []string `protobuf:"bytes,3,rep,name=cat" json:"cat,omitempty"`
	// Highest level domain of the publisher (e.g., "publisher.com").
	Domain                       *string `protobuf:"bytes,4,opt,name=domain" json:"domain,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *BidRequest_Publisher) Reset()                    { *m = BidRequest_Publisher{} }
func (m *BidRequest_Publisher) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_Publisher) ProtoMessage()               {}
func (*BidRequest_Publisher) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 3} }

var extRange_BidRequest_Publisher = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest_Publisher) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest_Publisher
}

func (m *BidRequest_Publisher) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidRequest_Publisher) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *BidRequest_Publisher) GetCat() []string {
	if m != nil {
		return m.Cat
	}
	return nil
}

func (m *BidRequest_Publisher) GetDomain() string {
	if m != nil && m.Domain != nil {
		return *m.Domain
	}
	return ""
}

// OpenRTB 2.0: This object describes the content in which the impression
// will appear, which may be syndicated or non-syndicated content.
// This object may be useful when syndicated content contains impressions and
// does not necessarily match the publisher's general content.
// The exchange might or might not have knowledge of the page where the
// content is running, as a result of the syndication method.
// For example might be a video impression embedded in an iframe on an
// unknown web property or device.
type BidRequest_Content struct {
	// ID uniquely identifying the content.
	// [AdX: (Only App.content) BidRequest.anonymous_id]
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Content episode number (typically applies to video content).
	Episode *int32 `protobuf:"varint,2,opt,name=episode" json:"episode,omitempty"`
	// Content title.
	// Video Examples: "Search Committee" (television), "A New Hope" (movie),
	// or "Endgame" (made for web).
	// Non-Video Example: "Why an Antarctic Glacier Is Melting So Quickly"
	// (Time magazine article).
	// [AdX: BidRequest.Video.ContentAttributes.title]
	Title *string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	// Content series.
	// Video Examples: "The Office" (television), "Star Wars" (movie),
	// or "Arby 'N' The Chief" (made for web).
	// Non-Video Example: "Ecocentric" (Time Magazine blog).
	Series *string `protobuf:"bytes,4,opt,name=series" json:"series,omitempty"`
	// Content season; typically for video content (e.g., "Season 3").
	Season *string `protobuf:"bytes,5,opt,name=season" json:"season,omitempty"`
	// Artist credited with the content.
	Artist *string `protobuf:"bytes,21,opt,name=artist" json:"artist,omitempty"`
	// Genre that best describes the content (e.g., rock, pop, etc).
	Genre *string `protobuf:"bytes,22,opt,name=genre" json:"genre,omitempty"`
	// Album to which the content belongs; typically for audio.
	Album *string `protobuf:"bytes,23,opt,name=album" json:"album,omitempty"`
	// International Standard Recording Code conforming to ISO-3901.
	Isrc *string `protobuf:"bytes,24,opt,name=isrc" json:"isrc,omitempty"`
	// URL of the content, for buy-side contextualization or review.
	// [AdX: (Only App.content) BidRequest.url]
	Url *string `protobuf:"bytes,6,opt,name=url" json:"url,omitempty"`
	// Array of IAB content categories that describe the content.
	// See enum ContentCategory.
	Cat []string `protobuf:"bytes,7,rep,name=cat" json:"cat,omitempty"`
	// Production quality.
	Prodq *ProductionQuality `protobuf:"varint,25,opt,name=prodq,enum=com.google.openrtb.ProductionQuality" json:"prodq,omitempty"`
	// NOTE: Deprecated in favor of prodq.
	// Video quality per IAB's classification.
	Videoquality *ProductionQuality `protobuf:"varint,8,opt,name=videoquality,enum=com.google.openrtb.ProductionQuality" json:"videoquality,omitempty"`
	// Comma separated list of keywords describing the content.
	// Note: OpenRTB 2.2 allowed an array-of-strings as alternate implementation
	// but this was fixed in 2.3+ where it's definitely a single string with CSV
	// content again. Compatibility with some OpenRTB 2.2 exchanges that adopted
	// the alternate representation may require custom handling of the JSON.
	// [AdX: BidRequest.Video.ContentAttributes.keywords]
	Keywords *string `protobuf:"bytes,9,opt,name=keywords" json:"keywords,omitempty"`
	// Content rating (e.g., MPAA).
	// [AdX: BidRequest.detected_content_label
	//       39: "DV_G", 40: "DV_PG", 41: "DV_T", 42: "DV_MA", 43: "DV_UNRATED"]
	Contentrating *string `protobuf:"bytes,10,opt,name=contentrating" json:"contentrating,omitempty"`
	// User rating of the content (e.g., number of stars, likes, etc.).
	// [AdX: (Only App.content) BidRequest.Mobile.app_rating]
	Userrating *string `protobuf:"bytes,11,opt,name=userrating" json:"userrating,omitempty"`
	// Type of content (game, video, text, etc.).
	Context *ContentContext `protobuf:"varint,20,opt,name=context,enum=com.google.openrtb.ContentContext" json:"context,omitempty"`
	// OpenRTB <= 2.2 compatibility; use context for 2.3+.
	Context_22 *string `protobuf:"bytes,12,opt,name=context_22,json=context22" json:"context_22,omitempty"`
	// 0 = not live, 1 = content is live (e.g., stream, live blog).
	Livestream *bool `protobuf:"varint,13,opt,name=livestream" json:"livestream,omitempty"`
	// 0 = indirect, 1 = direct.
	Sourcerelationship *bool `protobuf:"varint,14,opt,name=sourcerelationship" json:"sourcerelationship,omitempty"`
	// Details about the content Producer (Section 3.2.10).
	Producer *BidRequest_Producer `protobuf:"bytes,15,opt,name=producer" json:"producer,omitempty"`
	// Length of content in seconds; appropriate for video or audio.
	// [AdX: BidRequest.Video.ContentAttributes.duration_seconds]
	Len *int32 `protobuf:"varint,16,opt,name=len" json:"len,omitempty"`
	// Media rating per QAG guidelines.
	Qagmediarating *QAGMediaRating `protobuf:"varint,17,opt,name=qagmediarating,enum=com.google.openrtb.QAGMediaRating" json:"qagmediarating,omitempty"`
	// Indicator of whether or not the content is embeddable (e.g., an
	// embeddable video player), where 0 = no, 1 = yes.
	Embeddable *bool `protobuf:"varint,18,opt,name=embeddable" json:"embeddable,omitempty"`
	// Content language using ISO-639-1-alpha-2.
	// [AdX: BidRequest.detected_language]
	Language                     *string `protobuf:"bytes,19,opt,name=language" json:"language,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *BidRequest_Content) Reset()                    { *m = BidRequest_Content{} }
func (m *BidRequest_Content) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_Content) ProtoMessage()               {}
func (*BidRequest_Content) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 4} }

var extRange_BidRequest_Content = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest_Content) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest_Content
}

func (m *BidRequest_Content) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidRequest_Content) GetEpisode() int32 {
	if m != nil && m.Episode != nil {
		return *m.Episode
	}
	return 0
}

func (m *BidRequest_Content) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *BidRequest_Content) GetSeries() string {
	if m != nil && m.Series != nil {
		return *m.Series
	}
	return ""
}

func (m *BidRequest_Content) GetSeason() string {
	if m != nil && m.Season != nil {
		return *m.Season
	}
	return ""
}

func (m *BidRequest_Content) GetArtist() string {
	if m != nil && m.Artist != nil {
		return *m.Artist
	}
	return ""
}

func (m *BidRequest_Content) GetGenre() string {
	if m != nil && m.Genre != nil {
		return *m.Genre
	}
	return ""
}

func (m *BidRequest_Content) GetAlbum() string {
	if m != nil && m.Album != nil {
		return *m.Album
	}
	return ""
}

func (m *BidRequest_Content) GetIsrc() string {
	if m != nil && m.Isrc != nil {
		return *m.Isrc
	}
	return ""
}

func (m *BidRequest_Content) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *BidRequest_Content) GetCat() []string {
	if m != nil {
		return m.Cat
	}
	return nil
}

func (m *BidRequest_Content) GetProdq() ProductionQuality {
	if m != nil && m.Prodq != nil {
		return *m.Prodq
	}
	return ProductionQuality_QUALITY_UNKNOWN
}

func (m *BidRequest_Content) GetVideoquality() ProductionQuality {
	if m != nil && m.Videoquality != nil {
		return *m.Videoquality
	}
	return ProductionQuality_QUALITY_UNKNOWN
}

func (m *BidRequest_Content) GetKeywords() string {
	if m != nil && m.Keywords != nil {
		return *m.Keywords
	}
	return ""
}

func (m *BidRequest_Content) GetContentrating() string {
	if m != nil && m.Contentrating != nil {
		return *m.Contentrating
	}
	return ""
}

func (m *BidRequest_Content) GetUserrating() string {
	if m != nil && m.Userrating != nil {
		return *m.Userrating
	}
	return ""
}

func (m *BidRequest_Content) GetContext() ContentContext {
	if m != nil && m.Context != nil {
		return *m.Context
	}
	return ContentContext_VIDEO
}

func (m *BidRequest_Content) GetContext_22() string {
	if m != nil && m.Context_22 != nil {
		return *m.Context_22
	}
	return ""
}

func (m *BidRequest_Content) GetLivestream() bool {
	if m != nil && m.Livestream != nil {
		return *m.Livestream
	}
	return false
}

func (m *BidRequest_Content) GetSourcerelationship() bool {
	if m != nil && m.Sourcerelationship != nil {
		return *m.Sourcerelationship
	}
	return false
}

func (m *BidRequest_Content) GetProducer() *BidRequest_Producer {
	if m != nil {
		return m.Producer
	}
	return nil
}

func (m *BidRequest_Content) GetLen() int32 {
	if m != nil && m.Len != nil {
		return *m.Len
	}
	return 0
}

func (m *BidRequest_Content) GetQagmediarating() QAGMediaRating {
	if m != nil && m.Qagmediarating != nil {
		return *m.Qagmediarating
	}
	return QAGMediaRating_ALL_AUDIENCES
}

func (m *BidRequest_Content) GetEmbeddable() bool {
	if m != nil && m.Embeddable != nil {
		return *m.Embeddable
	}
	return false
}

func (m *BidRequest_Content) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return ""
}

// OpenRTB 2.0: This object defines the producer of the content in which
// the ad will be shown. This is particularly useful when the content is
// syndicated and may be distributed through different publishers and thus
// when the producer and publisher are not necessarily the same entity.
type BidRequest_Producer struct {
	// Content producer or originator ID. Useful if content is syndicated,
	// and may be posted on a site using embed tags.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Content producer or originator name (e.g., "Warner Bros").
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Array of IAB content categories that describe the content producer.
	// See enum ContentCategory.
	Cat []string `protobuf:"bytes,3,rep,name=cat" json:"cat,omitempty"`
	// Highest level domain of the content producer (e.g., "producer.com").
	Domain                       *string `protobuf:"bytes,4,opt,name=domain" json:"domain,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *BidRequest_Producer) Reset()                    { *m = BidRequest_Producer{} }
func (m *BidRequest_Producer) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_Producer) ProtoMessage()               {}
func (*BidRequest_Producer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 5} }

var extRange_BidRequest_Producer = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest_Producer) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest_Producer
}

func (m *BidRequest_Producer) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidRequest_Producer) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *BidRequest_Producer) GetCat() []string {
	if m != nil {
		return m.Cat
	}
	return nil
}

func (m *BidRequest_Producer) GetDomain() string {
	if m != nil && m.Domain != nil {
		return *m.Domain
	}
	return ""
}

// OpenRTB 2.0: This object provides information pertaining to the device
// through which the user is interacting. Device information includes its
// hardware, platform, location, and carrier data. The device can refer to a
// mobile handset, a desktop computer, set top box, or other digital device.
type BidRequest_Device struct {
	// Standard "Do Not Track" flag as set in the header by the browser,
	// where 0 = tracking is unrestricted, 1 = do not track.
	// RECOMMENDED by the OpenRTB specification.
	// [AdX: Unsupported; See Cookie Guide, google_error=1:
	//       https://developers.google.com/ad-exchange/rtb/cookie-guide]
	Dnt *bool `protobuf:"varint,1,opt,name=dnt" json:"dnt,omitempty"`
	// Browser user agent string.
	// RECOMMENDED by the OpenRTB specification.
	Ua *string `protobuf:"bytes,2,opt,name=ua" json:"ua,omitempty"`
	// IPv4 address closest to device.
	// RECOMMENDED by the OpenRTB specification.
	// [AdX: BidRequest.ip
	//     - AdX truncates to first 3 octets; OpenRTB is "X.X.X.0"]
	Ip *string `protobuf:"bytes,3,opt,name=ip" json:"ip,omitempty"`
	// Location of the device assumed to be the user's current location defined
	// by a Geo object (Section 3.2.12).
	// RECOMMENDED by the OpenRTB specification.
	// [AdX: BidRequest]
	Geo *BidRequest_Geo `protobuf:"bytes,4,opt,name=geo" json:"geo,omitempty"`
	// Hardware device ID (e.g., IMEI); hashed via SHA1.
	Didsha1 *string `protobuf:"bytes,5,opt,name=didsha1" json:"didsha1,omitempty"`
	// Hardware device ID (e.g., IMEI); hashed via MD5.
	Didmd5 *string `protobuf:"bytes,6,opt,name=didmd5" json:"didmd5,omitempty"`
	// Platform device ID (e.g., Android ID); hashed via SHA1.
	Dpidsha1 *string `protobuf:"bytes,7,opt,name=dpidsha1" json:"dpidsha1,omitempty"`
	// Platform device ID (e.g., Android ID); hashed via MD5.
	// [AdX: BidRequest.Mobile.hashed_idfa
	//     - AdX is binary, OpenRTB is base16 (lowercase hex)
	//       This is the hashed version of ifa. Either dpidmd5 or ifa is
	//       available depending on the mobile SDK version.]
	Dpidmd5 *string `protobuf:"bytes,8,opt,name=dpidmd5" json:"dpidmd5,omitempty"`
	// IPv6 address closest to device.
	// [AdX: BidRequest.ip
	//     - AdX truncates to first 6 octets; OpenRTB is "X:X:X:::::"]
	Ipv6 *string `protobuf:"bytes,9,opt,name=ipv6" json:"ipv6,omitempty"`
	// Carrier or ISP, e.g. "VERIZON", specified using Mobile Network Code (MNC).
	// "WIFI" is often used in mobile to indicate high bandwidth
	// (e.g., video friendly vs. cellular).
	// [AdX: BidRequest.Device.carrier_id
	//     - IDs will be the same Criterion IDs as in AdX protocol, see:
	// https://developers.google.com/adwords/api/docs/appendix/mobilecarriers]
	Carrier *string `protobuf:"bytes,10,opt,name=carrier" json:"carrier,omitempty"`
	// Browser language using ISO-639-1-alpha-2.
	Language *string `protobuf:"bytes,11,opt,name=language" json:"language,omitempty"`
	// Device make (e.g., "Apple").
	// [AdX: BidRequest.Device.brand]
	Make *string `protobuf:"bytes,12,opt,name=make" json:"make,omitempty"`
	// Device model (e.g., "iPhone").
	// [AdX: BidRequest.Device.model]
	Model *string `protobuf:"bytes,13,opt,name=model" json:"model,omitempty"`
	// Device operating system (e.g., "iOS").
	// [AdX: BidRequest.Device.platform]
	Os *string `protobuf:"bytes,14,opt,name=os" json:"os,omitempty"`
	// Device operating system version (e.g., "3.1.2").
	// [AdX: BidRequest.Device.os_version]
	Osv *string `protobuf:"bytes,15,opt,name=osv" json:"osv,omitempty"`
	// Hardware version of the device (e.g., "5S" for iPhone 5S).
	// [AdX: BidRequest.Device.hardware_version]
	Hwv *string `protobuf:"bytes,24,opt,name=hwv" json:"hwv,omitempty"`
	// Physical width of the screen in pixels.
	// [AdX: BidRequest.Device.screen_width]
	W *int32 `protobuf:"varint,25,opt,name=w" json:"w,omitempty"`
	// Physical height of the screen in pixels.
	// [AdX: BidRequest.Device.screen_height]
	H *int32 `protobuf:"varint,26,opt,name=h" json:"h,omitempty"`
	// Screen size as pixels per linear inch.
	Ppi *int32 `protobuf:"varint,27,opt,name=ppi" json:"ppi,omitempty"`
	// The ratio of physical pixels to device independent pixels.
	// [AdX: BidRequest.Device.screen_pixel_ratio_millis / 1,000]
	Pxratio *float64 `protobuf:"fixed64,28,opt,name=pxratio" json:"pxratio,omitempty"`
	// Support for JavaScript, where 0 = no, 1 = yes.
	Js *bool `protobuf:"varint,16,opt,name=js" json:"js,omitempty"`
	// Indicates if the geolocation API will be available to JavaScript
	// code running in the banner, where 0 = no, 1 = yes.
	Geofetch *bool `protobuf:"varint,29,opt,name=geofetch" json:"geofetch,omitempty"`
	// Network connection type.
	Connectiontype *ConnectionType `protobuf:"varint,17,opt,name=connectiontype,enum=com.google.openrtb.ConnectionType" json:"connectiontype,omitempty"`
	// The general type of device.
	// [AdX: BidRequest.Device.device_type]
	Devicetype *DeviceType `protobuf:"varint,18,opt,name=devicetype,enum=com.google.openrtb.DeviceType" json:"devicetype,omitempty"`
	// Version of Flash supported by the browser.
	Flashver *string `protobuf:"bytes,19,opt,name=flashver" json:"flashver,omitempty"`
	// ID sanctioned for advertiser use in the clear (i.e., not hashed).
	// [AdX: BidRequest.Mobile.advertising_id
	//     - AdX is binary, OpenRTB is 36-char UUID (Android ID: all lowercase,
	//       IDFA: all uppercase).
	//       ifa is either Android ID or Apple's IDFA, and either dpidmd5 or ifa
	//       is available depending on the mobile SDK version.]
	Ifa *string `protobuf:"bytes,20,opt,name=ifa" json:"ifa,omitempty"`
	// MAC address of the device; hashed via SHA1.
	Macsha1 *string `protobuf:"bytes,21,opt,name=macsha1" json:"macsha1,omitempty"`
	// MAC address of the device; hashed via MD5.
	Macmd5 *string `protobuf:"bytes,22,opt,name=macmd5" json:"macmd5,omitempty"`
	// "Limit Ad Tracking" signal commercially endorsed (e.g., iOS, Android),
	// where 0 = tracking is unrestricted, 1 = tracking must be limited per
	// commercial guidelines.
	// RECOMMENDED by the OpenRTB specification.
	Lmt                          *bool `protobuf:"varint,23,opt,name=lmt" json:"lmt,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *BidRequest_Device) Reset()                    { *m = BidRequest_Device{} }
func (m *BidRequest_Device) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_Device) ProtoMessage()               {}
func (*BidRequest_Device) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 6} }

var extRange_BidRequest_Device = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest_Device) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest_Device
}

func (m *BidRequest_Device) GetDnt() bool {
	if m != nil && m.Dnt != nil {
		return *m.Dnt
	}
	return false
}

func (m *BidRequest_Device) GetUa() string {
	if m != nil && m.Ua != nil {
		return *m.Ua
	}
	return ""
}

func (m *BidRequest_Device) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *BidRequest_Device) GetGeo() *BidRequest_Geo {
	if m != nil {
		return m.Geo
	}
	return nil
}

func (m *BidRequest_Device) GetDidsha1() string {
	if m != nil && m.Didsha1 != nil {
		return *m.Didsha1
	}
	return ""
}

func (m *BidRequest_Device) GetDidmd5() string {
	if m != nil && m.Didmd5 != nil {
		return *m.Didmd5
	}
	return ""
}

func (m *BidRequest_Device) GetDpidsha1() string {
	if m != nil && m.Dpidsha1 != nil {
		return *m.Dpidsha1
	}
	return ""
}

func (m *BidRequest_Device) GetDpidmd5() string {
	if m != nil && m.Dpidmd5 != nil {
		return *m.Dpidmd5
	}
	return ""
}

func (m *BidRequest_Device) GetIpv6() string {
	if m != nil && m.Ipv6 != nil {
		return *m.Ipv6
	}
	return ""
}

func (m *BidRequest_Device) GetCarrier() string {
	if m != nil && m.Carrier != nil {
		return *m.Carrier
	}
	return ""
}

func (m *BidRequest_Device) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return ""
}

func (m *BidRequest_Device) GetMake() string {
	if m != nil && m.Make != nil {
		return *m.Make
	}
	return ""
}

func (m *BidRequest_Device) GetModel() string {
	if m != nil && m.Model != nil {
		return *m.Model
	}
	return ""
}

func (m *BidRequest_Device) GetOs() string {
	if m != nil && m.Os != nil {
		return *m.Os
	}
	return ""
}

func (m *BidRequest_Device) GetOsv() string {
	if m != nil && m.Osv != nil {
		return *m.Osv
	}
	return ""
}

func (m *BidRequest_Device) GetHwv() string {
	if m != nil && m.Hwv != nil {
		return *m.Hwv
	}
	return ""
}

func (m *BidRequest_Device) GetW() int32 {
	if m != nil && m.W != nil {
		return *m.W
	}
	return 0
}

func (m *BidRequest_Device) GetH() int32 {
	if m != nil && m.H != nil {
		return *m.H
	}
	return 0
}

func (m *BidRequest_Device) GetPpi() int32 {
	if m != nil && m.Ppi != nil {
		return *m.Ppi
	}
	return 0
}

func (m *BidRequest_Device) GetPxratio() float64 {
	if m != nil && m.Pxratio != nil {
		return *m.Pxratio
	}
	return 0
}

func (m *BidRequest_Device) GetJs() bool {
	if m != nil && m.Js != nil {
		return *m.Js
	}
	return false
}

func (m *BidRequest_Device) GetGeofetch() bool {
	if m != nil && m.Geofetch != nil {
		return *m.Geofetch
	}
	return false
}

func (m *BidRequest_Device) GetConnectiontype() ConnectionType {
	if m != nil && m.Connectiontype != nil {
		return *m.Connectiontype
	}
	return ConnectionType_CONNECTION_UNKNOWN
}

func (m *BidRequest_Device) GetDevicetype() DeviceType {
	if m != nil && m.Devicetype != nil {
		return *m.Devicetype
	}
	return DeviceType_MOBILE
}

func (m *BidRequest_Device) GetFlashver() string {
	if m != nil && m.Flashver != nil {
		return *m.Flashver
	}
	return ""
}

func (m *BidRequest_Device) GetIfa() string {
	if m != nil && m.Ifa != nil {
		return *m.Ifa
	}
	return ""
}

func (m *BidRequest_Device) GetMacsha1() string {
	if m != nil && m.Macsha1 != nil {
		return *m.Macsha1
	}
	return ""
}

func (m *BidRequest_Device) GetMacmd5() string {
	if m != nil && m.Macmd5 != nil {
		return *m.Macmd5
	}
	return ""
}

func (m *BidRequest_Device) GetLmt() bool {
	if m != nil && m.Lmt != nil {
		return *m.Lmt
	}
	return false
}

// OpenRTB 2.0: This object encapsulates various methods for specifying a
// geographic location. When subordinate to a Device object, it indicates the
// location of the device which can also be interpreted as the user's current
// location. When subordinate to a User object, it indicates the location of
// the user's home base (i.e., not necessarily their current location).
//
// The lat/lon attributes should only be passed if they conform to the
// accuracy depicted in the type attribute. For example, the centroid of a
// geographic region such as postal code should not be passed.
//
// [AdX: Fine geolocation information is limited by the same constraints that
//       apply to the AdX Hyperlocal object: not all requests have this info,
//       and lat/lon represent some point (not necessarily center) of an area
//       the size of which is inversely proportional to population density.
//       That's good enough for targeting but not for individual tracking.]
type BidRequest_Geo struct {
	// Latitude from -90.0 to +90.0, where negative is south.
	// [AdX: BidRequest.[encrypted_]hyperlocal_set.center_point.latitude]
	Lat *float64 `protobuf:"fixed64,1,opt,name=lat" json:"lat,omitempty"`
	// Longitude from -180.0 to +180.0, where negative is west.
	// [AdX: BidRequest.[encrypted_]hyperlocal_set.center_point.longitude]
	Lon *float64 `protobuf:"fixed64,2,opt,name=lon" json:"lon,omitempty"`
	// Country using ISO-3166-1 Alpha-3.
	// [AdX: BidRequest.geo_criteria_id via geo-table.csv]
	Country *string `protobuf:"bytes,3,opt,name=country" json:"country,omitempty"`
	// Region code using ISO-3166-2; 2-letter state code if USA.
	// [AdX: BidRequest.geo_criteria_id via geo-table.csv]
	Region *string `protobuf:"bytes,4,opt,name=region" json:"region,omitempty"`
	// Region of a country using FIPS 10-4 notation. While OpenRTB supports
	// this attribute, it has been withdrawn by NIST in 2008.
	Regionfips104 *string `protobuf:"bytes,5,opt,name=regionfips104" json:"regionfips104,omitempty"`
	// Google metro code; similar to but not exactly Nielsen DMAs.
	// See Appendix A for a link to the codes.
	// (http://code.google.com/apis/adwords/docs/appendix/metrocodes.html).
	// [AdX: BidRequest.geo_criteria_id via geo-table.csv, cities-dma-regions.csv]
	Metro *string `protobuf:"bytes,6,opt,name=metro" json:"metro,omitempty"`
	// City using United Nations Code for Trade & Transport Locations.
	// See Appendix A for a link to the codes.
	// (http://www.unece.org/cefact/locode/service/location.htm).
	// [AdX: BidRequest.geo_criteria_id via geo-table.csv]
	City *string `protobuf:"bytes,7,opt,name=city" json:"city,omitempty"`
	// Zip/postal code.
	// [AdX: BidRequest.postal_code, BidRequest.postal_code_prefix]
	Zip *string `protobuf:"bytes,8,opt,name=zip" json:"zip,omitempty"`
	// Source of location data; recommended when passing lat/lon.
	Type *LocationType `protobuf:"varint,9,opt,name=type,enum=com.google.openrtb.LocationType" json:"type,omitempty"`
	// Estimated location accuracy in meters; recommended when lat/lon
	// are specified and derived from a device’s location services
	// (i.e., type = 1). Note that this is the accuracy as reported
	// from the device. Consult OS specific documentation
	// (e.g., Android, iOS) for exact interpretation.
	Accuracy *int32 `protobuf:"varint,11,opt,name=accuracy" json:"accuracy,omitempty"`
	// Number of seconds since this geolocation fix was established.
	// Note that devices may cache location data across multiple fetches.
	// Ideally, this value should be from the time the actual fix was taken.
	Lastfix *int32 `protobuf:"varint,12,opt,name=lastfix" json:"lastfix,omitempty"`
	// Service or provider used to determine geolocation from IP
	// address if applicable (i.e., type = 2).
	Ipservice *LocationService `protobuf:"varint,13,opt,name=ipservice,enum=com.google.openrtb.LocationService" json:"ipservice,omitempty"`
	// Local time as the number +/- of minutes from UTC.
	// [AdX: BidRequest.timezone_offset]
	Utcoffset                    *int32 `protobuf:"varint,10,opt,name=utcoffset" json:"utcoffset,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *BidRequest_Geo) Reset()                    { *m = BidRequest_Geo{} }
func (m *BidRequest_Geo) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_Geo) ProtoMessage()               {}
func (*BidRequest_Geo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 7} }

var extRange_BidRequest_Geo = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest_Geo) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest_Geo
}

func (m *BidRequest_Geo) GetLat() float64 {
	if m != nil && m.Lat != nil {
		return *m.Lat
	}
	return 0
}

func (m *BidRequest_Geo) GetLon() float64 {
	if m != nil && m.Lon != nil {
		return *m.Lon
	}
	return 0
}

func (m *BidRequest_Geo) GetCountry() string {
	if m != nil && m.Country != nil {
		return *m.Country
	}
	return ""
}

func (m *BidRequest_Geo) GetRegion() string {
	if m != nil && m.Region != nil {
		return *m.Region
	}
	return ""
}

func (m *BidRequest_Geo) GetRegionfips104() string {
	if m != nil && m.Regionfips104 != nil {
		return *m.Regionfips104
	}
	return ""
}

func (m *BidRequest_Geo) GetMetro() string {
	if m != nil && m.Metro != nil {
		return *m.Metro
	}
	return ""
}

func (m *BidRequest_Geo) GetCity() string {
	if m != nil && m.City != nil {
		return *m.City
	}
	return ""
}

func (m *BidRequest_Geo) GetZip() string {
	if m != nil && m.Zip != nil {
		return *m.Zip
	}
	return ""
}

func (m *BidRequest_Geo) GetType() LocationType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return LocationType_GPS_LOCATION
}

func (m *BidRequest_Geo) GetAccuracy() int32 {
	if m != nil && m.Accuracy != nil {
		return *m.Accuracy
	}
	return 0
}

func (m *BidRequest_Geo) GetLastfix() int32 {
	if m != nil && m.Lastfix != nil {
		return *m.Lastfix
	}
	return 0
}

func (m *BidRequest_Geo) GetIpservice() LocationService {
	if m != nil && m.Ipservice != nil {
		return *m.Ipservice
	}
	return LocationService_IP2LOCATION
}

func (m *BidRequest_Geo) GetUtcoffset() int32 {
	if m != nil && m.Utcoffset != nil {
		return *m.Utcoffset
	}
	return 0
}

// OpenRTB 2.0: This object contains information known or derived about
// the human user of the device (i.e., the audience for advertising).
// The user id is an exchange artifact and may be subject to rotation or other
// privacy policies. However, this user ID must be stable long enough to serve
// reasonably as the basis for frequency capping and retargeting.
type BidRequest_User struct {
	// Exchange-specific ID for the user. At least one of id or buyerid
	// is recommended.
	// [AdX: BidRequest.[constrained_usage_]google_user_id]
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Buyer-specific ID for the user as mapped by the exchange for the buyer.
	// At least one of buyerid or id is recommended.
	Buyeruid *string `protobuf:"bytes,2,opt,name=buyeruid" json:"buyeruid,omitempty"`
	// Year of birth as a 4-digit integer.
	// [AdX: BidRequest.UserDemographic.age_high if present, if not
	//       BidRequest.UserDemographic.age_low; subtracted from current year]
	Yob *int32 `protobuf:"varint,3,opt,name=yob" json:"yob,omitempty"`
	// Gender as "M" male, "F" female, "O" Other. (Null indicates unknown)
	// [AdX: BidRequest.UserDemographic.gender]
	Gender *string `protobuf:"bytes,4,opt,name=gender" json:"gender,omitempty"`
	// Comma separated list of keywords, interests, or intent.
	// Note: OpenRTB 2.2 allowed an array-of-strings as alternate implementation
	// but this was fixed in 2.3+ where it's definitely a single string with CSV
	// content again. Compatibility with some OpenRTB 2.2 exchanges that adopted
	// the alternate representation may require custom handling of the JSON.
	Keywords *string `protobuf:"bytes,5,opt,name=keywords" json:"keywords,omitempty"`
	// Optional feature to pass bidder data set in the exchange's cookie.
	// The string must be in base85 cookie safe characters and be in any format.
	// Proper JSON encoding must be used to include "escaped" quotation marks.
	// [AdX: BidRequest.[constrained_usage_]hosted_match_data
	//     - AdX is binary, OpenRTB is base64 (no padding)]
	Customdata *string `protobuf:"bytes,6,opt,name=customdata" json:"customdata,omitempty"`
	// Location of the user's home base defined by a Geo object
	// (Section 3.2.12). This is not necessarily their current location.
	Geo *BidRequest_Geo `protobuf:"bytes,7,opt,name=geo" json:"geo,omitempty"`
	// Additional user data. Each Data object (Section 3.2.14) represents a
	// different data source.
	// [AdX: BidRequest.Vertical ->
	//       (id: "DetectedVertical", name: "DoubleClick",
	//        segment[n]: (id: dv[n].id, value: dv[n].weight))]
	Data                         []*BidRequest_Data `protobuf:"bytes,8,rep,name=data" json:"data,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *BidRequest_User) Reset()                    { *m = BidRequest_User{} }
func (m *BidRequest_User) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_User) ProtoMessage()               {}
func (*BidRequest_User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 8} }

var extRange_BidRequest_User = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest_User) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest_User
}

func (m *BidRequest_User) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidRequest_User) GetBuyeruid() string {
	if m != nil && m.Buyeruid != nil {
		return *m.Buyeruid
	}
	return ""
}

func (m *BidRequest_User) GetYob() int32 {
	if m != nil && m.Yob != nil {
		return *m.Yob
	}
	return 0
}

func (m *BidRequest_User) GetGender() string {
	if m != nil && m.Gender != nil {
		return *m.Gender
	}
	return ""
}

func (m *BidRequest_User) GetKeywords() string {
	if m != nil && m.Keywords != nil {
		return *m.Keywords
	}
	return ""
}

func (m *BidRequest_User) GetCustomdata() string {
	if m != nil && m.Customdata != nil {
		return *m.Customdata
	}
	return ""
}

func (m *BidRequest_User) GetGeo() *BidRequest_Geo {
	if m != nil {
		return m.Geo
	}
	return nil
}

func (m *BidRequest_User) GetData() []*BidRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

// OpenRTB 2.0: The data and segment objects together allow additional data
// about the user to be specified. This data may be from multiple sources
// whether from the exchange itself or third party providers as specified by
// the id field. A bid request can mix data objects from multiple providers.
// The specific data providers in use should be published by the exchange
// a priori to its bidders.
type BidRequest_Data struct {
	// Exchange-specific ID for the data provider.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Exchange-specific name for the data provider.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Array of Segment (Section 3.2.15) objects that contain the actual
	// data values.
	Segment                      []*BidRequest_Data_Segment `protobuf:"bytes,3,rep,name=segment" json:"segment,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *BidRequest_Data) Reset()                    { *m = BidRequest_Data{} }
func (m *BidRequest_Data) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_Data) ProtoMessage()               {}
func (*BidRequest_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 9} }

var extRange_BidRequest_Data = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest_Data) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest_Data
}

func (m *BidRequest_Data) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidRequest_Data) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *BidRequest_Data) GetSegment() []*BidRequest_Data_Segment {
	if m != nil {
		return m.Segment
	}
	return nil
}

// OpenRTB 2.0: Segment objects are essentially key-value pairs that
// convey specific units of data about the user. The parent Data object
// is a collection of such values from a given data provider.
// The specific segment names and value options must be published by the
// exchange a priori to its bidders.
type BidRequest_Data_Segment struct {
	// ID of the data segment specific to the data provider.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Name of the data segment specific to the data provider.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// String representation of the data segment value.
	Value                        *string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *BidRequest_Data_Segment) Reset()                    { *m = BidRequest_Data_Segment{} }
func (m *BidRequest_Data_Segment) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_Data_Segment) ProtoMessage()               {}
func (*BidRequest_Data_Segment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 9, 0} }

var extRange_BidRequest_Data_Segment = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest_Data_Segment) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest_Data_Segment
}

func (m *BidRequest_Data_Segment) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidRequest_Data_Segment) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *BidRequest_Data_Segment) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

// OpenRTB 2.2: This object contains any legal, governmental, or industry
// regulations that apply to the request. The coppa flag signals whether
// or not the request falls under the United States Federal Trade Commission's
// regulations for the United States Children's Online Privacy Protection Act
// ("COPPA"). Refer to Section 7.1 for more information.
type BidRequest_Regs struct {
	// Flag indicating if this request is subject to the COPPA regulations
	// established by the USA FTC, where 0 = no, 1 = yes.
	// [AdX: BidRequest.user_data_treatment / TAG_FOR_CHILD_DIRECTED_TREATMENT]
	Coppa                        *bool `protobuf:"varint,1,opt,name=coppa" json:"coppa,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *BidRequest_Regs) Reset()                    { *m = BidRequest_Regs{} }
func (m *BidRequest_Regs) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_Regs) ProtoMessage()               {}
func (*BidRequest_Regs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 10} }

var extRange_BidRequest_Regs = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest_Regs) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest_Regs
}

func (m *BidRequest_Regs) GetCoppa() bool {
	if m != nil && m.Coppa != nil {
		return *m.Coppa
	}
	return false
}

// OpenRTB 2.0: This object is the top-level bid response object (i.e., the
// unnamed outer JSON object). The id attribute is a reflection of the bid
// request ID for logging purposes. Similarly, bidid is an optional response
// tracking ID for bidders. If specified, it can be included in the subsequent
// win notice call if the bidder wins. At least one seatbid object is required,
// which contains at least one bid for an impression. Other attributes are
// optional. To express a "no-bid", the options are to return an empty response
// with HTTP 204. Alternately if the bidder wishes to convey to the exchange a
// reason for not bidding, just a BidResponse object is returned with a
// reason code in the nbr attribute.
type BidResponse struct {
	// ID of the bid request to which this is a response.
	// REQUIRED by the OpenRTB specification.
	// [AdX: Not mapped to any field, but validated against the BidRequest.id]
	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// Array of seatbid objects; 1+ required if a bid is to be made.
	// [AdX: BidResponse.Ad]
	Seatbid []*BidResponse_SeatBid `protobuf:"bytes,2,rep,name=seatbid" json:"seatbid,omitempty"`
	// Bidder generated response ID to assist with logging/tracking.
	// [AdX: BidResponse.debug_string]
	Bidid *string `protobuf:"bytes,3,opt,name=bidid" json:"bidid,omitempty"`
	// Bid currency using ISO-4217 alpha codes.
	Cur *string `protobuf:"bytes,4,opt,name=cur" json:"cur,omitempty"`
	// Optional feature to allow a bidder to set data in the exchange's cookie.
	// The string must be in base85 cookie safe characters and be in any format.
	// Proper JSON encoding must be used to include "escaped" quotation marks.
	Customdata *string `protobuf:"bytes,5,opt,name=customdata" json:"customdata,omitempty"`
	// Reason for not bidding.
	Nbr                          *NoBidReason `protobuf:"varint,6,opt,name=nbr,enum=com.google.openrtb.NoBidReason" json:"nbr,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *BidResponse) Reset()                    { *m = BidResponse{} }
func (m *BidResponse) String() string            { return proto.CompactTextString(m) }
func (*BidResponse) ProtoMessage()               {}
func (*BidResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

var extRange_BidResponse = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidResponse) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidResponse
}

func (m *BidResponse) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidResponse) GetSeatbid() []*BidResponse_SeatBid {
	if m != nil {
		return m.Seatbid
	}
	return nil
}

func (m *BidResponse) GetBidid() string {
	if m != nil && m.Bidid != nil {
		return *m.Bidid
	}
	return ""
}

func (m *BidResponse) GetCur() string {
	if m != nil && m.Cur != nil {
		return *m.Cur
	}
	return ""
}

func (m *BidResponse) GetCustomdata() string {
	if m != nil && m.Customdata != nil {
		return *m.Customdata
	}
	return ""
}

func (m *BidResponse) GetNbr() NoBidReason {
	if m != nil && m.Nbr != nil {
		return *m.Nbr
	}
	return NoBidReason_UNKNOWN_ERROR
}

// OpenRTB 2.0: A bid response can contain multiple SeatBid objects, each on
// behalf of a different bidder seat and each containing one or more
// individual bids. If multiple impressions are presented in the request, the
// group attribute can be used to specify if a seat is willing to accept any
// impressions that it can win (default) or if it is only interested in
// winning any if it can win them all as a group.
type BidResponse_SeatBid struct {
	// Array of 1+ Bid objects (Section 4.2.3) each related to an impression.
	// Multiple bids can relate to the same impression.
	// [AdX: BidResponse.Ad]
	Bid []*BidResponse_SeatBid_Bid `protobuf:"bytes,1,rep,name=bid" json:"bid,omitempty"`
	// ID of the buyer seat (e.g., advertiser, agency) on whose behalf
	// this bid is made.
	Seat *string `protobuf:"bytes,2,opt,name=seat" json:"seat,omitempty"`
	// 0 = impressions can be won individually; 1 = impressions must be won or
	// lost as a group.
	Group                        *int `protobuf:"varint,3,opt,name=group,def=0" json:"group,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *BidResponse_SeatBid) Reset()                    { *m = BidResponse_SeatBid{} }
func (m *BidResponse_SeatBid) String() string            { return proto.CompactTextString(m) }
func (*BidResponse_SeatBid) ProtoMessage()               {}
func (*BidResponse_SeatBid) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

var extRange_BidResponse_SeatBid = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidResponse_SeatBid) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidResponse_SeatBid
}

const Default_BidResponse_SeatBid_Group int = 0

func (m *BidResponse_SeatBid) GetBid() []*BidResponse_SeatBid_Bid {
	if m != nil {
		return m.Bid
	}
	return nil
}

func (m *BidResponse_SeatBid) GetSeat() string {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return ""
}

func (m *BidResponse_SeatBid) GetGroup() int {
	if m != nil && m.Group != nil {
		return *m.Group
	}
	return Default_BidResponse_SeatBid_Group
}

// OpenRTB 2.0: A SeatBid object contains one or more Bid objects,
// each of which relates to a specific impression in the bid request
// via the impid attribute and constitutes an offer to buy that impression
// for a given price.
type BidResponse_SeatBid_Bid struct {
	// Bidder generated bid ID to assist with logging/tracking.
	// REQUIRED by the OpenRTB specification.
	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// ID of the Imp object in the related bid request.
	// REQUIRED by the OpenRTB specification.
	// [AdX: BidResponse.Ad.AdSlot.id]
	Impid *string `protobuf:"bytes,2,req,name=impid" json:"impid,omitempty"`
	// Bid price expressed as CPM although the actual transaction is for a
	// unit impression only. Note that while the type indicates float, integer
	// math is highly recommended when handling currencies
	// (e.g., BigDecimal in Java).
	// REQUIRED by the OpenRTB specification.
	// [AdX: BidResponse.Ad.AdSlot.max_cpm_micros * 1,000,000]
	Price *float64 `protobuf:"fixed64,3,req,name=price" json:"price,omitempty"`
	// ID of a preloaded ad to be served if the bid wins.
	Adid *string `protobuf:"bytes,4,opt,name=adid" json:"adid,omitempty"`
	// Win notice URL called by the exchange if the bid wins; optional means
	// of serving ad markup.
	// [AdX: BidResponse.Ad.impression_tracking_url
	//     - DoubleClick doesn't support win notices;
	//       use %%WINNING_PRICE%% in snippet's impression URL.]
	Nurl *string `protobuf:"bytes,5,opt,name=nurl" json:"nurl,omitempty"`
	// Types that are valid to be assigned to AdmOneof:
	//	*BidResponse_SeatBid_Bid_Adm
	//	*BidResponse_SeatBid_Bid_AdmNative
	AdmOneof isBidResponse_SeatBid_Bid_AdmOneof `protobuf_oneof:"adm_oneof"`
	// Advertiser domain for block list checking (e.g., "ford.com"). This can
	// be an array of for the case of rotating creatives. Exchanges can
	// mandate that only one domain is allowed.
	// [AdX: BidResponse.Ad.click_through_url
	//     - OpenRTB spec only allows domain names in adomain;
	//       AdX support full URLs too.]
	Adomain []string `protobuf:"bytes,7,rep,name=adomain" json:"adomain,omitempty"`
	// A platform-specific application identifier intended to be
	// unique to the app and independent of the exchange. On Android,
	// this should be a bundle or package name (e.g., com.foo.mygame).
	// On iOS, it is a numeric ID.
	Bundle *string `protobuf:"bytes,14,opt,name=bundle" json:"bundle,omitempty"`
	// URL without cache-busting to an image that is representative of the
	// content of the campaign for ad quality/safety checking.
	Iurl *string `protobuf:"bytes,8,opt,name=iurl" json:"iurl,omitempty"`
	// Campaign ID to assist with ad quality checking; the collection of
	// creatives for which iurl should be representative.
	// [AdX: BidResponse.Ad.AdSlot.billing_id]
	Cid *string `protobuf:"bytes,9,opt,name=cid" json:"cid,omitempty"`
	// Creative ID to assist with ad quality checking.
	// [AdX: BidResponse.Ad.buyer_creative_id]
	Crid *string `protobuf:"bytes,10,opt,name=crid" json:"crid,omitempty"`
	// IAB content categories of the creative.
	Cat []string `protobuf:"bytes,15,rep,name=cat" json:"cat,omitempty"`
	// Set of attributes describing the creative.
	// [AdX: BidResponse.Ad.attribute]
	Attr []CreativeAttribute `protobuf:"varint,11,rep,packed,name=attr,enum=com.google.openrtb.CreativeAttribute" json:"attr,omitempty"`
	// API required by the markup if applicable.
	Api *APIFramework `protobuf:"varint,18,opt,name=api,enum=com.google.openrtb.APIFramework" json:"api,omitempty"`
	// Video response protocol of the markup if applicable.
	Protocol *Protocol `protobuf:"varint,19,opt,name=protocol,enum=com.google.openrtb.Protocol" json:"protocol,omitempty"`
	// Creative media rating per QAG guidelines.
	Qagmediarating *QAGMediaRating `protobuf:"varint,20,opt,name=qagmediarating,enum=com.google.openrtb.QAGMediaRating" json:"qagmediarating,omitempty"`
	// Reference to the deal.id from the bid request if this bid pertains to a
	// private marketplace direct deal.
	// [AdX: BidResponse.Ad.AdSlot.deal_id]
	Dealid *string `protobuf:"bytes,13,opt,name=dealid" json:"dealid,omitempty"`
	// Width of the creative in device independent pixels (DIPS).
	// [AdX: BidResponse.Ad.width - only required if the impression is multisize]
	W *int32 `protobuf:"varint,16,opt,name=w" json:"w,omitempty"`
	// Height of the creative in device independent pixels (DIPS).
	// [AdX: BidResponse.Ad.height - only required if the impression is multisize]
	H *int32 `protobuf:"varint,17,opt,name=h" json:"h,omitempty"`
	// Advisory as to the number of seconds the bidder is willing to
	// wait between the auction and the actual impression.
	Exp                          *int32 `protobuf:"varint,21,opt,name=exp" json:"exp,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *BidResponse_SeatBid_Bid) Reset()                    { *m = BidResponse_SeatBid_Bid{} }
func (m *BidResponse_SeatBid_Bid) String() string            { return proto.CompactTextString(m) }
func (*BidResponse_SeatBid_Bid) ProtoMessage()               {}
func (*BidResponse_SeatBid_Bid) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0, 0} }

var extRange_BidResponse_SeatBid_Bid = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidResponse_SeatBid_Bid) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidResponse_SeatBid_Bid
}

type isBidResponse_SeatBid_Bid_AdmOneof interface {
	isBidResponse_SeatBid_Bid_AdmOneof()
}

type BidResponse_SeatBid_Bid_Adm struct {
	Adm string `protobuf:"bytes,6,opt,name=adm,oneof"`
}
type BidResponse_SeatBid_Bid_AdmNative struct {
	AdmNative *NativeResponse `protobuf:"bytes,50,opt,name=adm_native,json=admNative,oneof"`
}

func (*BidResponse_SeatBid_Bid_Adm) isBidResponse_SeatBid_Bid_AdmOneof()       {}
func (*BidResponse_SeatBid_Bid_AdmNative) isBidResponse_SeatBid_Bid_AdmOneof() {}

func (m *BidResponse_SeatBid_Bid) GetAdmOneof() isBidResponse_SeatBid_Bid_AdmOneof {
	if m != nil {
		return m.AdmOneof
	}
	return nil
}

func (m *BidResponse_SeatBid_Bid) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetImpid() string {
	if m != nil && m.Impid != nil {
		return *m.Impid
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetPrice() float64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *BidResponse_SeatBid_Bid) GetAdid() string {
	if m != nil && m.Adid != nil {
		return *m.Adid
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetNurl() string {
	if m != nil && m.Nurl != nil {
		return *m.Nurl
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetAdm() string {
	if x, ok := m.GetAdmOneof().(*BidResponse_SeatBid_Bid_Adm); ok {
		return x.Adm
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetAdmNative() *NativeResponse {
	if x, ok := m.GetAdmOneof().(*BidResponse_SeatBid_Bid_AdmNative); ok {
		return x.AdmNative
	}
	return nil
}

func (m *BidResponse_SeatBid_Bid) GetAdomain() []string {
	if m != nil {
		return m.Adomain
	}
	return nil
}

func (m *BidResponse_SeatBid_Bid) GetBundle() string {
	if m != nil && m.Bundle != nil {
		return *m.Bundle
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetIurl() string {
	if m != nil && m.Iurl != nil {
		return *m.Iurl
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetCid() string {
	if m != nil && m.Cid != nil {
		return *m.Cid
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetCrid() string {
	if m != nil && m.Crid != nil {
		return *m.Crid
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetCat() []string {
	if m != nil {
		return m.Cat
	}
	return nil
}

func (m *BidResponse_SeatBid_Bid) GetAttr() []CreativeAttribute {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *BidResponse_SeatBid_Bid) GetApi() APIFramework {
	if m != nil && m.Api != nil {
		return *m.Api
	}
	return APIFramework_VPAID_1
}

func (m *BidResponse_SeatBid_Bid) GetProtocol() Protocol {
	if m != nil && m.Protocol != nil {
		return *m.Protocol
	}
	return Protocol_VAST_1_0
}

func (m *BidResponse_SeatBid_Bid) GetQagmediarating() QAGMediaRating {
	if m != nil && m.Qagmediarating != nil {
		return *m.Qagmediarating
	}
	return QAGMediaRating_ALL_AUDIENCES
}

func (m *BidResponse_SeatBid_Bid) GetDealid() string {
	if m != nil && m.Dealid != nil {
		return *m.Dealid
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetW() int32 {
	if m != nil && m.W != nil {
		return *m.W
	}
	return 0
}

func (m *BidResponse_SeatBid_Bid) GetH() int32 {
	if m != nil && m.H != nil {
		return *m.H
	}
	return 0
}

func (m *BidResponse_SeatBid_Bid) GetExp() int32 {
	if m != nil && m.Exp != nil {
		return *m.Exp
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BidResponse_SeatBid_Bid) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BidResponse_SeatBid_Bid_OneofMarshaler, _BidResponse_SeatBid_Bid_OneofUnmarshaler, _BidResponse_SeatBid_Bid_OneofSizer, []interface{}{
		(*BidResponse_SeatBid_Bid_Adm)(nil),
		(*BidResponse_SeatBid_Bid_AdmNative)(nil),
	}
}

func _BidResponse_SeatBid_Bid_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BidResponse_SeatBid_Bid)
	// adm_oneof
	switch x := m.AdmOneof.(type) {
	case *BidResponse_SeatBid_Bid_Adm:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Adm)
	case *BidResponse_SeatBid_Bid_AdmNative:
		b.EncodeVarint(50<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdmNative); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BidResponse_SeatBid_Bid.AdmOneof has unexpected type %T", x)
	}
	return nil
}

func _BidResponse_SeatBid_Bid_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BidResponse_SeatBid_Bid)
	switch tag {
	case 6: // adm_oneof.adm
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.AdmOneof = &BidResponse_SeatBid_Bid_Adm{x}
		return true, err
	case 50: // adm_oneof.adm_native
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NativeResponse)
		err := b.DecodeMessage(msg)
		m.AdmOneof = &BidResponse_SeatBid_Bid_AdmNative{msg}
		return true, err
	default:
		return false, nil
	}
}

func _BidResponse_SeatBid_Bid_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BidResponse_SeatBid_Bid)
	// adm_oneof
	switch x := m.AdmOneof.(type) {
	case *BidResponse_SeatBid_Bid_Adm:
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Adm)))
		n += len(x.Adm)
	case *BidResponse_SeatBid_Bid_AdmNative:
		s := proto.Size(x.AdmNative)
		n += proto.SizeVarint(50<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// OpenRTB Native 1.0: The Native Object defines the native advertising
// opportunity available for bid via this bid request. It must be included
// directly in the impression object if the impression offered for auction
// is a native ad format.
type NativeRequest struct {
	// Version of the Native Markup version in use.
	// [AdX: "1.0" for OpenRTB 2.3; "1.1" for OpenRTB 2.4]
	Ver *string `protobuf:"bytes,1,opt,name=ver" json:"ver,omitempty"`
	// The Layout ID of the native ad unit.
	// RECOMMENDED by OpenRTB Native 1.0; optional in 1.1, to be deprecated.
	Layout *LayoutId `protobuf:"varint,2,opt,name=layout,enum=com.google.openrtb.LayoutId" json:"layout,omitempty"`
	// The Ad unit ID of the native ad unit. This corresponds to one of
	// IAB Core-6 native ad units.
	// RECOMMENDED by OpenRTB Native 1.0; optional in 1.1, to be deprecated.
	Adunit *AdUnitId `protobuf:"varint,3,opt,name=adunit,enum=com.google.openrtb.AdUnitId" json:"adunit,omitempty"`
	// The context in which the ad appears.
	Context *ContextType `protobuf:"varint,7,opt,name=context,enum=com.google.openrtb.ContextType" json:"context,omitempty"`
	// A more detailed context in which the ad appears.
	Contextsubtype *ContextSubtype `protobuf:"varint,8,opt,name=contextsubtype,enum=com.google.openrtb.ContextSubtype" json:"contextsubtype,omitempty"`
	// The design/format/layout of the ad unit being offered.
	// RECOMMENDED by the OpenRTB Native specification.
	Plcmttype *PlacementType `protobuf:"varint,9,opt,name=plcmttype,enum=com.google.openrtb.PlacementType" json:"plcmttype,omitempty"`
	// The number of identical placements in this Layout.
	Plcmtcnt *int32 `protobuf:"varint,4,opt,name=plcmtcnt,def=1" json:"plcmtcnt,omitempty"`
	// 0 for the first ad, 1 for the second ad, and so on. Note this would
	// generally NOT be used in combination with plcmtcnt - either you are
	// auctioning multiple identical placements (in which case
	// plcmtcnt>1, seq=0) or you are holding separate auctions for distinct
	// items in the feed (in which case plcmtcnt=1, seq>=1).
	Seq *int32 `protobuf:"varint,5,opt,name=seq,def=0" json:"seq,omitempty"`
	// Any bid must comply with the array of elements expressed by the Exchange.
	// REQUIRED by the OpenRTB Native specification: at least 1 element.
	// [AdX: BidRequest.AdSlot.native_ad_template[0]
	//     - AdX supports multiple templates, only the first will be mapped.
	//       Each field specified in the template is mapped to a separate Asset.]
	Assets                       []*NativeRequest_Asset `protobuf:"bytes,6,rep,name=assets" json:"assets,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *NativeRequest) Reset()                    { *m = NativeRequest{} }
func (m *NativeRequest) String() string            { return proto.CompactTextString(m) }
func (*NativeRequest) ProtoMessage()               {}
func (*NativeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

var extRange_NativeRequest = []proto.ExtensionRange{
	{100, 9999},
}

func (*NativeRequest) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_NativeRequest
}

const Default_NativeRequest_Plcmtcnt int32 = 1
const Default_NativeRequest_Seq int32 = 0

func (m *NativeRequest) GetVer() string {
	if m != nil && m.Ver != nil {
		return *m.Ver
	}
	return ""
}

func (m *NativeRequest) GetLayout() LayoutId {
	if m != nil && m.Layout != nil {
		return *m.Layout
	}
	return LayoutId_CONTENT_WALL
}

func (m *NativeRequest) GetAdunit() AdUnitId {
	if m != nil && m.Adunit != nil {
		return *m.Adunit
	}
	return AdUnitId_PAID_SEARCH_UNIT
}

func (m *NativeRequest) GetContext() ContextType {
	if m != nil && m.Context != nil {
		return *m.Context
	}
	return ContextType_CONTENT
}

func (m *NativeRequest) GetContextsubtype() ContextSubtype {
	if m != nil && m.Contextsubtype != nil {
		return *m.Contextsubtype
	}
	return ContextSubtype_CONTENT_GENERAL_OR_MIXED
}

func (m *NativeRequest) GetPlcmttype() PlacementType {
	if m != nil && m.Plcmttype != nil {
		return *m.Plcmttype
	}
	return PlacementType_IN_FEED
}

func (m *NativeRequest) GetPlcmtcnt() int32 {
	if m != nil && m.Plcmtcnt != nil {
		return *m.Plcmtcnt
	}
	return Default_NativeRequest_Plcmtcnt
}

func (m *NativeRequest) GetSeq() int32 {
	if m != nil && m.Seq != nil {
		return *m.Seq
	}
	return Default_NativeRequest_Seq
}

func (m *NativeRequest) GetAssets() []*NativeRequest_Asset {
	if m != nil {
		return m.Assets
	}
	return nil
}

// OpenRTB Native 1.0: The main container object for each asset requested or
// supported by Exchange on behalf of the rendering client.
// Any object that is required is to be flagged as such. Only one of the
// {title,img,video,data} objects should be present in each object.
// All others should be null/absent. The id is to be unique within the
// Asset array so that the response can be aligned.
type NativeRequest_Asset struct {
	// Unique asset ID, assigned by exchange. Typically a counter for the array.
	// REQUIRED by the OpenRTB Native specification.
	// [AdX: 1..N for N assets in unspecified order, corresponding to recommended
	//       or required fields in the first NativeAdTemplate.]
	Id *int32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// Set to true if asset is required
	// (exchange will not accept a bid without it).
	// [AdX: BidRequest.AdSlot.native_ad_template[0].required_fields]
	Required *bool `protobuf:"varint,2,opt,name=required,def=0" json:"required,omitempty"`
	// RECOMMENDED by the OpenRTB Native specification.
	//
	// Types that are valid to be assigned to AssetOneof:
	//	*NativeRequest_Asset_Title_
	//	*NativeRequest_Asset_Img
	//	*NativeRequest_Asset_Video
	//	*NativeRequest_Asset_Data_
	AssetOneof                   isNativeRequest_Asset_AssetOneof `protobuf_oneof:"asset_oneof"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *NativeRequest_Asset) Reset()                    { *m = NativeRequest_Asset{} }
func (m *NativeRequest_Asset) String() string            { return proto.CompactTextString(m) }
func (*NativeRequest_Asset) ProtoMessage()               {}
func (*NativeRequest_Asset) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

var extRange_NativeRequest_Asset = []proto.ExtensionRange{
	{100, 9999},
}

func (*NativeRequest_Asset) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_NativeRequest_Asset
}

const Default_NativeRequest_Asset_Required bool = false

type isNativeRequest_Asset_AssetOneof interface {
	isNativeRequest_Asset_AssetOneof()
}

type NativeRequest_Asset_Title_ struct {
	Title *NativeRequest_Asset_Title `protobuf:"bytes,3,opt,name=title,oneof"`
}
type NativeRequest_Asset_Img struct {
	Img *NativeRequest_Asset_Image `protobuf:"bytes,4,opt,name=img,oneof"`
}
type NativeRequest_Asset_Video struct {
	Video *BidRequest_Imp_Video `protobuf:"bytes,5,opt,name=video,oneof"`
}
type NativeRequest_Asset_Data_ struct {
	Data *NativeRequest_Asset_Data `protobuf:"bytes,6,opt,name=data,oneof"`
}

func (*NativeRequest_Asset_Title_) isNativeRequest_Asset_AssetOneof() {}
func (*NativeRequest_Asset_Img) isNativeRequest_Asset_AssetOneof()    {}
func (*NativeRequest_Asset_Video) isNativeRequest_Asset_AssetOneof()  {}
func (*NativeRequest_Asset_Data_) isNativeRequest_Asset_AssetOneof()  {}

func (m *NativeRequest_Asset) GetAssetOneof() isNativeRequest_Asset_AssetOneof {
	if m != nil {
		return m.AssetOneof
	}
	return nil
}

func (m *NativeRequest_Asset) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *NativeRequest_Asset) GetRequired() bool {
	if m != nil && m.Required != nil {
		return *m.Required
	}
	return Default_NativeRequest_Asset_Required
}

func (m *NativeRequest_Asset) GetTitle() *NativeRequest_Asset_Title {
	if x, ok := m.GetAssetOneof().(*NativeRequest_Asset_Title_); ok {
		return x.Title
	}
	return nil
}

func (m *NativeRequest_Asset) GetImg() *NativeRequest_Asset_Image {
	if x, ok := m.GetAssetOneof().(*NativeRequest_Asset_Img); ok {
		return x.Img
	}
	return nil
}

func (m *NativeRequest_Asset) GetVideo() *BidRequest_Imp_Video {
	if x, ok := m.GetAssetOneof().(*NativeRequest_Asset_Video); ok {
		return x.Video
	}
	return nil
}

func (m *NativeRequest_Asset) GetData() *NativeRequest_Asset_Data {
	if x, ok := m.GetAssetOneof().(*NativeRequest_Asset_Data_); ok {
		return x.Data
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*NativeRequest_Asset) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _NativeRequest_Asset_OneofMarshaler, _NativeRequest_Asset_OneofUnmarshaler, _NativeRequest_Asset_OneofSizer, []interface{}{
		(*NativeRequest_Asset_Title_)(nil),
		(*NativeRequest_Asset_Img)(nil),
		(*NativeRequest_Asset_Video)(nil),
		(*NativeRequest_Asset_Data_)(nil),
	}
}

func _NativeRequest_Asset_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*NativeRequest_Asset)
	// asset_oneof
	switch x := m.AssetOneof.(type) {
	case *NativeRequest_Asset_Title_:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Title); err != nil {
			return err
		}
	case *NativeRequest_Asset_Img:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Img); err != nil {
			return err
		}
	case *NativeRequest_Asset_Video:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Video); err != nil {
			return err
		}
	case *NativeRequest_Asset_Data_:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Data); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("NativeRequest_Asset.AssetOneof has unexpected type %T", x)
	}
	return nil
}

func _NativeRequest_Asset_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*NativeRequest_Asset)
	switch tag {
	case 3: // asset_oneof.title
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NativeRequest_Asset_Title)
		err := b.DecodeMessage(msg)
		m.AssetOneof = &NativeRequest_Asset_Title_{msg}
		return true, err
	case 4: // asset_oneof.img
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NativeRequest_Asset_Image)
		err := b.DecodeMessage(msg)
		m.AssetOneof = &NativeRequest_Asset_Img{msg}
		return true, err
	case 5: // asset_oneof.video
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BidRequest_Imp_Video)
		err := b.DecodeMessage(msg)
		m.AssetOneof = &NativeRequest_Asset_Video{msg}
		return true, err
	case 6: // asset_oneof.data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NativeRequest_Asset_Data)
		err := b.DecodeMessage(msg)
		m.AssetOneof = &NativeRequest_Asset_Data_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _NativeRequest_Asset_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*NativeRequest_Asset)
	// asset_oneof
	switch x := m.AssetOneof.(type) {
	case *NativeRequest_Asset_Title_:
		s := proto.Size(x.Title)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NativeRequest_Asset_Img:
		s := proto.Size(x.Img)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NativeRequest_Asset_Video:
		s := proto.Size(x.Video)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NativeRequest_Asset_Data_:
		s := proto.Size(x.Data)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// OpenRTB Native 1.0: The Title object is to be used for title element
// of the Native ad.
type NativeRequest_Asset_Title struct {
	// Maximum length of the text in the title element.
	// RECOMMENDED that the value be either of: 25, 90, 140.
	// REQUIRED by the OpenRTB Native specification.
	// [AdX: BidRequest.AdSlot.native_ad_template[0].headline_max_safe_length]
	Len                          *int32 `protobuf:"varint,1,req,name=len" json:"len,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *NativeRequest_Asset_Title) Reset()                    { *m = NativeRequest_Asset_Title{} }
func (m *NativeRequest_Asset_Title) String() string            { return proto.CompactTextString(m) }
func (*NativeRequest_Asset_Title) ProtoMessage()               {}
func (*NativeRequest_Asset_Title) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0, 0} }

var extRange_NativeRequest_Asset_Title = []proto.ExtensionRange{
	{100, 9999},
}

func (*NativeRequest_Asset_Title) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_NativeRequest_Asset_Title
}

func (m *NativeRequest_Asset_Title) GetLen() int32 {
	if m != nil && m.Len != nil {
		return *m.Len
	}
	return 0
}

// OpenRTB Native 1.0: The Image object to be used for all image elements
// of the Native ad such as Icons, Main Image, etc.
type NativeRequest_Asset_Image struct {
	// Type ID of the image element supported by the publisher.
	// The publisher can display this information in an appropriate format.
	// [AdX: BidRequest.AdSlot.native_ad_template[0] field type]
	Type *ImageAssetType `protobuf:"varint,1,opt,name=type,enum=com.google.openrtb.ImageAssetType" json:"type,omitempty"`
	// Width of the image in pixels.
	W *int32 `protobuf:"varint,2,opt,name=w" json:"w,omitempty"`
	// Height of the image in pixels.
	H *int32 `protobuf:"varint,3,opt,name=h" json:"h,omitempty"`
	// The minimum requested width of the image in pixels. This option should
	// be used for any rescaling of images by the client. Either w or wmin
	// should be transmitted. If only w is included, it should be considered
	// an exact requirement.
	// RECOMMENDED by the OpenRTB Native specification.
	// [AdX: BidRequest.AdSlot.native_ad_template[0] of type:
	//       MAIN/IMAGE: image_width
	//       LOGO/LOGO: logo_width
	//       ICON/APP_ICON: app_icon_width]
	Wmin *int32 `protobuf:"varint,4,opt,name=wmin" json:"wmin,omitempty"`
	// The minimum requested height of the image in pixels. This option should
	// be used for any rescaling of images by the client. Either h or hmin
	// should be transmitted. If only h is included, it should be considered
	// an exact requirement.
	// RECOMMENDED by the OpenRTB Native specification.
	// [AdX: BidRequest.AdSlot.native_ad_template[0] of type:
	//       MAIN/IMAGE: image_width
	//       LOGO/LOGO: logo_width
	//       ICON/APP_ICON: app_icon_width]
	Hmin *int32 `protobuf:"varint,5,opt,name=hmin" json:"hmin,omitempty"`
	// Whitelist of content MIME types supported. Popular MIME types include,
	// but are not limited to "image/jpg" and "image/gif". Each implementing
	// Exchange should have their own list of supported types in the
	// integration docs. See Wikipedia's MIME page for more information and
	// links to all IETF RFCs. If blank, assume all types are allowed.
	Mimes                        []string `protobuf:"bytes,6,rep,name=mimes" json:"mimes,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *NativeRequest_Asset_Image) Reset()                    { *m = NativeRequest_Asset_Image{} }
func (m *NativeRequest_Asset_Image) String() string            { return proto.CompactTextString(m) }
func (*NativeRequest_Asset_Image) ProtoMessage()               {}
func (*NativeRequest_Asset_Image) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0, 1} }

var extRange_NativeRequest_Asset_Image = []proto.ExtensionRange{
	{100, 9999},
}

func (*NativeRequest_Asset_Image) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_NativeRequest_Asset_Image
}

func (m *NativeRequest_Asset_Image) GetType() ImageAssetType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ImageAssetType_ICON
}

func (m *NativeRequest_Asset_Image) GetW() int32 {
	if m != nil && m.W != nil {
		return *m.W
	}
	return 0
}

func (m *NativeRequest_Asset_Image) GetH() int32 {
	if m != nil && m.H != nil {
		return *m.H
	}
	return 0
}

func (m *NativeRequest_Asset_Image) GetWmin() int32 {
	if m != nil && m.Wmin != nil {
		return *m.Wmin
	}
	return 0
}

func (m *NativeRequest_Asset_Image) GetHmin() int32 {
	if m != nil && m.Hmin != nil {
		return *m.Hmin
	}
	return 0
}

func (m *NativeRequest_Asset_Image) GetMimes() []string {
	if m != nil {
		return m.Mimes
	}
	return nil
}

// OpenRTB Native 1.0: The Data Object is to be used for all non-core
// elements of the native unit such as Ratings, Review Count, Stars,
// Download count, descriptions etc. It is also generic for future of Native
// elements not contemplated at the time of the writing of this document.
type NativeRequest_Asset_Data struct {
	// Type ID of the element supported by the publisher. The publisher can
	// display this information in an appropriate format.
	// REQUIRED by the OpenRTB Native specification.
	// [AdX: BidRequest.AdSlot.native_ad_template[0] field type]
	Type *DataAssetType `protobuf:"varint,1,req,name=type,enum=com.google.openrtb.DataAssetType" json:"type,omitempty"`
	// Maximum length of the text in the element's response.
	// [AdX: BidRequest.AdSlot.native_ad_template[0] of type:
	//       DESC/BODY: body_max_safe_length
	//       CTATEXT/CALL_TO_ACTION: call_to_action_max_safe_length
	//       SPONSORED/ADVERTISER: advertiser_max_safe_length
	//       PRICE/PRICE: price_max_safe_length
	//       ADDRESS/STORE: store_max_safe_length
	//     - Note: not used for RATING/STAR_RATING, AdX needs a double 0..5]
	Len                          *int32 `protobuf:"varint,2,opt,name=len" json:"len,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *NativeRequest_Asset_Data) Reset()                    { *m = NativeRequest_Asset_Data{} }
func (m *NativeRequest_Asset_Data) String() string            { return proto.CompactTextString(m) }
func (*NativeRequest_Asset_Data) ProtoMessage()               {}
func (*NativeRequest_Asset_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0, 2} }

var extRange_NativeRequest_Asset_Data = []proto.ExtensionRange{
	{100, 9999},
}

func (*NativeRequest_Asset_Data) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_NativeRequest_Asset_Data
}

func (m *NativeRequest_Asset_Data) GetType() DataAssetType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return DataAssetType_SPONSORED
}

func (m *NativeRequest_Asset_Data) GetLen() int32 {
	if m != nil && m.Len != nil {
		return *m.Len
	}
	return 0
}

// OpenRTB Native 1.0: The native response object is the top level JSON object
// which identifies an native response.
type NativeResponse struct {
	// Version of the Native Markup version in use.
	// [AdX: "1.0" for OpenRTB 2.3; "1.1" for OpenRTB 2.4]
	Ver *string `protobuf:"bytes,1,opt,name=ver" json:"ver,omitempty"`
	// List of native ad's assets.
	// [AdX: BidResponse.Ad.native_ad[0]
	//     - All assets are mapped to fields of a single NativeAd.]
	Assets []*NativeResponse_Asset `protobuf:"bytes,2,rep,name=assets" json:"assets,omitempty"`
	// Destination Link.
	// REQUIRED by the OpenRTB Native specification.
	// [AdX: BidResponse.Ad.native_ad[0]]
	Link *NativeResponse_Link `protobuf:"bytes,3,req,name=link" json:"link,omitempty"`
	// Array of impression tracking URLs, expected to return a 1x1 image or
	// 204 response - typically only passed when using 3rd party trackers.
	// [AdX: BidResponse.Ad.impression_tracking_url]
	Imptrackers []string `protobuf:"bytes,4,rep,name=imptrackers" json:"imptrackers,omitempty"`
	// Optional javascript impression tracker. Contains <script> tags to be
	// executed at impression time where it can be supported.
	Jstracker                    *string `protobuf:"bytes,5,opt,name=jstracker" json:"jstracker,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *NativeResponse) Reset()                    { *m = NativeResponse{} }
func (m *NativeResponse) String() string            { return proto.CompactTextString(m) }
func (*NativeResponse) ProtoMessage()               {}
func (*NativeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

var extRange_NativeResponse = []proto.ExtensionRange{
	{100, 9999},
}

func (*NativeResponse) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_NativeResponse
}

func (m *NativeResponse) GetVer() string {
	if m != nil && m.Ver != nil {
		return *m.Ver
	}
	return ""
}

func (m *NativeResponse) GetAssets() []*NativeResponse_Asset {
	if m != nil {
		return m.Assets
	}
	return nil
}

func (m *NativeResponse) GetLink() *NativeResponse_Link {
	if m != nil {
		return m.Link
	}
	return nil
}

func (m *NativeResponse) GetImptrackers() []string {
	if m != nil {
		return m.Imptrackers
	}
	return nil
}

func (m *NativeResponse) GetJstracker() string {
	if m != nil && m.Jstracker != nil {
		return *m.Jstracker
	}
	return ""
}

// OpenRTB Native 1.0: Used for "call to action" assets, or other links from
// the Native ad. This Object should be associated to its peer object in the
// parent Asset Object. When that peer object is activated (clicked)
// the action should take the user to the location of the link.
type NativeResponse_Link struct {
	// Landing URL of the clickable link.
	// [AdX: (NativeResponse.link)
	//           BidResponse.Ad.click_through_url
	//       (NativeResponse.Asset.link, for asset of type STORE)
	//           BidResponse.Ad.native_ad[0].store]
	Url *string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	// Third-party tracker URLs to be fired on click of the URL. Google click
	// trackers redirect HTTP 30x to the bidder's tracker. Google only maps the
	// first click tracking url and the remaining are ignored.
	// [AdX: (NativeResponse.link)
	//           BidResponse.Ad.NativeAd.click_tracking_url[0]]
	Clicktrackers []string `protobuf:"bytes,2,rep,name=clicktrackers" json:"clicktrackers,omitempty"`
	// Fallback URL for deeplink. To be used if the URL given in url is not
	// supported by the device.
	Fallback                     *string `protobuf:"bytes,3,opt,name=fallback" json:"fallback,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *NativeResponse_Link) Reset()                    { *m = NativeResponse_Link{} }
func (m *NativeResponse_Link) String() string            { return proto.CompactTextString(m) }
func (*NativeResponse_Link) ProtoMessage()               {}
func (*NativeResponse_Link) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

var extRange_NativeResponse_Link = []proto.ExtensionRange{
	{100, 9999},
}

func (*NativeResponse_Link) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_NativeResponse_Link
}

func (m *NativeResponse_Link) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *NativeResponse_Link) GetClicktrackers() []string {
	if m != nil {
		return m.Clicktrackers
	}
	return nil
}

func (m *NativeResponse_Link) GetFallback() string {
	if m != nil && m.Fallback != nil {
		return *m.Fallback
	}
	return ""
}

// OpenRTB Native 1.0: Corresponds to the Asset Object in the request.
// The main container object for each asset requested or supported by Exchange
// on behalf of the rendering client. Any object that is required is to be
// flagged as such. Only one of the {title,img,video,data} objects should be
// present in each object. All others should be null/absent. The id is to be
// unique within the Asset array so that the response can be aligned.
type NativeResponse_Asset struct {
	// Unique asset ID, assigned by exchange, must match one of the asset IDs
	// in request.
	// REQUIRED by the OpenRTB Native specification.
	Id *int32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// Set to 1 if asset is required. (bidder requires it to be displayed).
	Required *bool `protobuf:"varint,2,opt,name=required,def=0" json:"required,omitempty"`
	// RECOMMENDED by the OpenRTB Native specification.
	//
	// Types that are valid to be assigned to AssetOneof:
	//	*NativeResponse_Asset_Title_
	//	*NativeResponse_Asset_Img
	//	*NativeResponse_Asset_Video_
	//	*NativeResponse_Asset_Data_
	AssetOneof isNativeResponse_Asset_AssetOneof `protobuf_oneof:"asset_oneof"`
	// Link object for call to actions. This link is to associated to the other
	// populated field within the object.
	// [AdX: BidResponse.Ad.native_ad[0]]
	Link                         *NativeResponse_Link `protobuf:"bytes,7,opt,name=link" json:"link,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *NativeResponse_Asset) Reset()                    { *m = NativeResponse_Asset{} }
func (m *NativeResponse_Asset) String() string            { return proto.CompactTextString(m) }
func (*NativeResponse_Asset) ProtoMessage()               {}
func (*NativeResponse_Asset) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 1} }

var extRange_NativeResponse_Asset = []proto.ExtensionRange{
	{100, 9999},
}

func (*NativeResponse_Asset) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_NativeResponse_Asset
}

const Default_NativeResponse_Asset_Required bool = false

type isNativeResponse_Asset_AssetOneof interface {
	isNativeResponse_Asset_AssetOneof()
}

type NativeResponse_Asset_Title_ struct {
	Title *NativeResponse_Asset_Title `protobuf:"bytes,3,opt,name=title,oneof"`
}
type NativeResponse_Asset_Img struct {
	Img *NativeResponse_Asset_Image `protobuf:"bytes,4,opt,name=img,oneof"`
}
type NativeResponse_Asset_Video_ struct {
	Video *NativeResponse_Asset_Video `protobuf:"bytes,5,opt,name=video,oneof"`
}
type NativeResponse_Asset_Data_ struct {
	Data *NativeResponse_Asset_Data `protobuf:"bytes,6,opt,name=data,oneof"`
}

func (*NativeResponse_Asset_Title_) isNativeResponse_Asset_AssetOneof() {}
func (*NativeResponse_Asset_Img) isNativeResponse_Asset_AssetOneof()    {}
func (*NativeResponse_Asset_Video_) isNativeResponse_Asset_AssetOneof() {}
func (*NativeResponse_Asset_Data_) isNativeResponse_Asset_AssetOneof()  {}

func (m *NativeResponse_Asset) GetAssetOneof() isNativeResponse_Asset_AssetOneof {
	if m != nil {
		return m.AssetOneof
	}
	return nil
}

func (m *NativeResponse_Asset) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *NativeResponse_Asset) GetRequired() bool {
	if m != nil && m.Required != nil {
		return *m.Required
	}
	return Default_NativeResponse_Asset_Required
}

func (m *NativeResponse_Asset) GetTitle() *NativeResponse_Asset_Title {
	if x, ok := m.GetAssetOneof().(*NativeResponse_Asset_Title_); ok {
		return x.Title
	}
	return nil
}

func (m *NativeResponse_Asset) GetImg() *NativeResponse_Asset_Image {
	if x, ok := m.GetAssetOneof().(*NativeResponse_Asset_Img); ok {
		return x.Img
	}
	return nil
}

func (m *NativeResponse_Asset) GetVideo() *NativeResponse_Asset_Video {
	if x, ok := m.GetAssetOneof().(*NativeResponse_Asset_Video_); ok {
		return x.Video
	}
	return nil
}

func (m *NativeResponse_Asset) GetData() *NativeResponse_Asset_Data {
	if x, ok := m.GetAssetOneof().(*NativeResponse_Asset_Data_); ok {
		return x.Data
	}
	return nil
}

func (m *NativeResponse_Asset) GetLink() *NativeResponse_Link {
	if m != nil {
		return m.Link
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*NativeResponse_Asset) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _NativeResponse_Asset_OneofMarshaler, _NativeResponse_Asset_OneofUnmarshaler, _NativeResponse_Asset_OneofSizer, []interface{}{
		(*NativeResponse_Asset_Title_)(nil),
		(*NativeResponse_Asset_Img)(nil),
		(*NativeResponse_Asset_Video_)(nil),
		(*NativeResponse_Asset_Data_)(nil),
	}
}

func _NativeResponse_Asset_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*NativeResponse_Asset)
	// asset_oneof
	switch x := m.AssetOneof.(type) {
	case *NativeResponse_Asset_Title_:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Title); err != nil {
			return err
		}
	case *NativeResponse_Asset_Img:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Img); err != nil {
			return err
		}
	case *NativeResponse_Asset_Video_:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Video); err != nil {
			return err
		}
	case *NativeResponse_Asset_Data_:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Data); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("NativeResponse_Asset.AssetOneof has unexpected type %T", x)
	}
	return nil
}

func _NativeResponse_Asset_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*NativeResponse_Asset)
	switch tag {
	case 3: // asset_oneof.title
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NativeResponse_Asset_Title)
		err := b.DecodeMessage(msg)
		m.AssetOneof = &NativeResponse_Asset_Title_{msg}
		return true, err
	case 4: // asset_oneof.img
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NativeResponse_Asset_Image)
		err := b.DecodeMessage(msg)
		m.AssetOneof = &NativeResponse_Asset_Img{msg}
		return true, err
	case 5: // asset_oneof.video
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NativeResponse_Asset_Video)
		err := b.DecodeMessage(msg)
		m.AssetOneof = &NativeResponse_Asset_Video_{msg}
		return true, err
	case 6: // asset_oneof.data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NativeResponse_Asset_Data)
		err := b.DecodeMessage(msg)
		m.AssetOneof = &NativeResponse_Asset_Data_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _NativeResponse_Asset_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*NativeResponse_Asset)
	// asset_oneof
	switch x := m.AssetOneof.(type) {
	case *NativeResponse_Asset_Title_:
		s := proto.Size(x.Title)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NativeResponse_Asset_Img:
		s := proto.Size(x.Img)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NativeResponse_Asset_Video_:
		s := proto.Size(x.Video)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NativeResponse_Asset_Data_:
		s := proto.Size(x.Data)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// OpenRTB Native 1.0: Corresponds to the Title Object in the request,
// with the value filled in.
type NativeResponse_Asset_Title struct {
	// The text associated with the text element.
	// REQUIRED by the OpenRTB Native specification.
	// [AdX: BidResponse.Ad.native_ad[0].headline]
	Text                         *string `protobuf:"bytes,1,req,name=text" json:"text,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *NativeResponse_Asset_Title) Reset()         { *m = NativeResponse_Asset_Title{} }
func (m *NativeResponse_Asset_Title) String() string { return proto.CompactTextString(m) }
func (*NativeResponse_Asset_Title) ProtoMessage()    {}
func (*NativeResponse_Asset_Title) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3, 1, 0}
}

var extRange_NativeResponse_Asset_Title = []proto.ExtensionRange{
	{100, 9999},
}

func (*NativeResponse_Asset_Title) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_NativeResponse_Asset_Title
}

func (m *NativeResponse_Asset_Title) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

// OpenRTB Native 1.0: Corresponds to the Image Object in the request.
// The Image object to be used for all image elements of the Native ad
// such as Icons, Main Image, etc.
type NativeResponse_Asset_Image struct {
	// URL of the image asset.
	// REQUIRED by the OpenRTB Native specification.
	// [AdX: BidResponse.Ad.native_ad[0] for request asset type:
	//       MAIN/IMAGE: image.url
	//       ICON/APP_ICON: app_icon.url
	//       LOGO/LOGO: logo.url]
	Url *string `protobuf:"bytes,1,req,name=url" json:"url,omitempty"`
	// Width of the image in pixels.
	// RECOMMENDED by the OpenRTB Native specification.
	// [AdX: BidResponse.Ad.native_ad[0] for request asset type:
	//       MAIN/IMAGE: image.url
	//       ICON/APP_ICON: app_icon.url
	//       LOGO/LOGO: logo.url]
	W *int32 `protobuf:"varint,2,opt,name=w" json:"w,omitempty"`
	// Height of the image in pixels.
	// RECOMMENDED by the OpenRTB Native specification.
	// [AdX: BidResponse.Ad.native_ad[0] for request asset type:
	//       MAIN/IMAGE: image.url
	//       ICON/APP_ICON: app_icon.url
	//       LOGO/LOGO: logo.url]
	H                            *int32 `protobuf:"varint,3,opt,name=h" json:"h,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *NativeResponse_Asset_Image) Reset()         { *m = NativeResponse_Asset_Image{} }
func (m *NativeResponse_Asset_Image) String() string { return proto.CompactTextString(m) }
func (*NativeResponse_Asset_Image) ProtoMessage()    {}
func (*NativeResponse_Asset_Image) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3, 1, 1}
}

var extRange_NativeResponse_Asset_Image = []proto.ExtensionRange{
	{100, 9999},
}

func (*NativeResponse_Asset_Image) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_NativeResponse_Asset_Image
}

func (m *NativeResponse_Asset_Image) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *NativeResponse_Asset_Image) GetW() int32 {
	if m != nil && m.W != nil {
		return *m.W
	}
	return 0
}

func (m *NativeResponse_Asset_Image) GetH() int32 {
	if m != nil && m.H != nil {
		return *m.H
	}
	return 0
}

// OpenRTB Native 1.0: Corresponds to the Data Object in the request, with
// the value filled in. The Data Object is to be used for all miscellaneous
// elements of the native unit such as Ratings, Review Count, Stars,
// Downloads, Price count etc. It is also generic for future of Native
// elements not contemplated at the time of the writing of this document.
type NativeResponse_Asset_Data struct {
	// The optional formatted string name of the data type to be displayed.
	Label *string `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	// The formatted string of data to be displayed. Can contain a formatted
	// value such as "5 stars" or "$10" or "3.4 stars out of 5".
	// REQUIRED by the OpenRTB Native specification.
	// [AdX: BidResponse.Ad.native_ad[0] for request asset type OpenRTB/AdX:
	//       CTATEXT/CALL_TO_ACTION: call_to_action
	//       DESC/BODY: body
	//       SPONSORED/ADVERTISER: advertiser
	//       PRICE/PRICE: price
	//       RATING/STAR_RATING: star_rating (AdX requires a double 0..5)
	//     - Note: ADDRESS/STORE not mapped via data.value, use asset.link.url]
	Value                        *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *NativeResponse_Asset_Data) Reset()                    { *m = NativeResponse_Asset_Data{} }
func (m *NativeResponse_Asset_Data) String() string            { return proto.CompactTextString(m) }
func (*NativeResponse_Asset_Data) ProtoMessage()               {}
func (*NativeResponse_Asset_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 1, 2} }

var extRange_NativeResponse_Asset_Data = []proto.ExtensionRange{
	{100, 9999},
}

func (*NativeResponse_Asset_Data) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_NativeResponse_Asset_Data
}

func (m *NativeResponse_Asset_Data) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

func (m *NativeResponse_Asset_Data) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

// OpenRTB Native 1.0: Corresponds to the Video Object in the request,
// yet containing a value of a conforming VAST tag as a value.
type NativeResponse_Asset_Video struct {
	// VAST xml.
	// REQUIRED by the OpenRTB Native specification.
	Vasttag                      *string `protobuf:"bytes,1,req,name=vasttag" json:"vasttag,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *NativeResponse_Asset_Video) Reset()         { *m = NativeResponse_Asset_Video{} }
func (m *NativeResponse_Asset_Video) String() string { return proto.CompactTextString(m) }
func (*NativeResponse_Asset_Video) ProtoMessage()    {}
func (*NativeResponse_Asset_Video) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3, 1, 3}
}

var extRange_NativeResponse_Asset_Video = []proto.ExtensionRange{
	{100, 9999},
}

func (*NativeResponse_Asset_Video) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_NativeResponse_Asset_Video
}

func (m *NativeResponse_Asset_Video) GetVasttag() string {
	if m != nil && m.Vasttag != nil {
		return *m.Vasttag
	}
	return ""
}

func init() {
	proto.RegisterType((*BidRequest)(nil), "com.google.openrtb.BidRequest")
	proto.RegisterType((*BidRequest_Imp)(nil), "com.google.openrtb.BidRequest.Imp")
	proto.RegisterType((*BidRequest_Imp_Banner)(nil), "com.google.openrtb.BidRequest.Imp.Banner")
	proto.RegisterType((*BidRequest_Imp_Banner_Format)(nil), "com.google.openrtb.BidRequest.Imp.Banner.Format")
	proto.RegisterType((*BidRequest_Imp_Video)(nil), "com.google.openrtb.BidRequest.Imp.Video")
	proto.RegisterType((*BidRequest_Imp_Video_CompanionAd)(nil), "com.google.openrtb.BidRequest.Imp.Video.CompanionAd")
	proto.RegisterType((*BidRequest_Imp_Audio)(nil), "com.google.openrtb.BidRequest.Imp.Audio")
	proto.RegisterType((*BidRequest_Imp_Native)(nil), "com.google.openrtb.BidRequest.Imp.Native")
	proto.RegisterType((*BidRequest_Imp_Pmp)(nil), "com.google.openrtb.BidRequest.Imp.Pmp")
	proto.RegisterType((*BidRequest_Imp_Pmp_Deal)(nil), "com.google.openrtb.BidRequest.Imp.Pmp.Deal")
	proto.RegisterType((*BidRequest_Site)(nil), "com.google.openrtb.BidRequest.Site")
	proto.RegisterType((*BidRequest_App)(nil), "com.google.openrtb.BidRequest.App")
	proto.RegisterType((*BidRequest_Publisher)(nil), "com.google.openrtb.BidRequest.Publisher")
	proto.RegisterType((*BidRequest_Content)(nil), "com.google.openrtb.BidRequest.Content")
	proto.RegisterType((*BidRequest_Producer)(nil), "com.google.openrtb.BidRequest.Producer")
	proto.RegisterType((*BidRequest_Device)(nil), "com.google.openrtb.BidRequest.Device")
	proto.RegisterType((*BidRequest_Geo)(nil), "com.google.openrtb.BidRequest.Geo")
	proto.RegisterType((*BidRequest_User)(nil), "com.google.openrtb.BidRequest.User")
	proto.RegisterType((*BidRequest_Data)(nil), "com.google.openrtb.BidRequest.Data")
	proto.RegisterType((*BidRequest_Data_Segment)(nil), "com.google.openrtb.BidRequest.Data.Segment")
	proto.RegisterType((*BidRequest_Regs)(nil), "com.google.openrtb.BidRequest.Regs")
	proto.RegisterType((*BidResponse)(nil), "com.google.openrtb.BidResponse")
	proto.RegisterType((*BidResponse_SeatBid)(nil), "com.google.openrtb.BidResponse.SeatBid")
	proto.RegisterType((*BidResponse_SeatBid_Bid)(nil), "com.google.openrtb.BidResponse.SeatBid.Bid")
	proto.RegisterType((*NativeRequest)(nil), "com.google.openrtb.NativeRequest")
	proto.RegisterType((*NativeRequest_Asset)(nil), "com.google.openrtb.NativeRequest.Asset")
	proto.RegisterType((*NativeRequest_Asset_Title)(nil), "com.google.openrtb.NativeRequest.Asset.Title")
	proto.RegisterType((*NativeRequest_Asset_Image)(nil), "com.google.openrtb.NativeRequest.Asset.Image")
	proto.RegisterType((*NativeRequest_Asset_Data)(nil), "com.google.openrtb.NativeRequest.Asset.Data")
	proto.RegisterType((*NativeResponse)(nil), "com.google.openrtb.NativeResponse")
	proto.RegisterType((*NativeResponse_Link)(nil), "com.google.openrtb.NativeResponse.Link")
	proto.RegisterType((*NativeResponse_Asset)(nil), "com.google.openrtb.NativeResponse.Asset")
	proto.RegisterType((*NativeResponse_Asset_Title)(nil), "com.google.openrtb.NativeResponse.Asset.Title")
	proto.RegisterType((*NativeResponse_Asset_Image)(nil), "com.google.openrtb.NativeResponse.Asset.Image")
	proto.RegisterType((*NativeResponse_Asset_Data)(nil), "com.google.openrtb.NativeResponse.Asset.Data")
	proto.RegisterType((*NativeResponse_Asset_Video)(nil), "com.google.openrtb.NativeResponse.Asset.Video")
	proto.RegisterEnum("com.google.openrtb.ContentCategory", ContentCategory_name, ContentCategory_value)
	proto.RegisterEnum("com.google.openrtb.AuctionType", AuctionType_name, AuctionType_value)
	proto.RegisterEnum("com.google.openrtb.BannerAdType", BannerAdType_name, BannerAdType_value)
	proto.RegisterEnum("com.google.openrtb.CreativeAttribute", CreativeAttribute_name, CreativeAttribute_value)
	proto.RegisterEnum("com.google.openrtb.APIFramework", APIFramework_name, APIFramework_value)
	proto.RegisterEnum("com.google.openrtb.AdPosition", AdPosition_name, AdPosition_value)
	proto.RegisterEnum("com.google.openrtb.VideoLinearity", VideoLinearity_name, VideoLinearity_value)
	proto.RegisterEnum("com.google.openrtb.Protocol", Protocol_name, Protocol_value)
	proto.RegisterEnum("com.google.openrtb.PlaybackMethod", PlaybackMethod_name, PlaybackMethod_value)
	proto.RegisterEnum("com.google.openrtb.StartDelay", StartDelay_name, StartDelay_value)
	proto.RegisterEnum("com.google.openrtb.ConnectionType", ConnectionType_name, ConnectionType_value)
	proto.RegisterEnum("com.google.openrtb.ExpandableDirection", ExpandableDirection_name, ExpandableDirection_value)
	proto.RegisterEnum("com.google.openrtb.ContentDeliveryMethod", ContentDeliveryMethod_name, ContentDeliveryMethod_value)
	proto.RegisterEnum("com.google.openrtb.ContentContext", ContentContext_name, ContentContext_value)
	proto.RegisterEnum("com.google.openrtb.ProductionQuality", ProductionQuality_name, ProductionQuality_value)
	proto.RegisterEnum("com.google.openrtb.LocationType", LocationType_name, LocationType_value)
	proto.RegisterEnum("com.google.openrtb.LocationService", LocationService_name, LocationService_value)
	proto.RegisterEnum("com.google.openrtb.DeviceType", DeviceType_name, DeviceType_value)
	proto.RegisterEnum("com.google.openrtb.CompanionType", CompanionType_name, CompanionType_value)
	proto.RegisterEnum("com.google.openrtb.QAGMediaRating", QAGMediaRating_name, QAGMediaRating_value)
	proto.RegisterEnum("com.google.openrtb.NoBidReason", NoBidReason_name, NoBidReason_value)
	proto.RegisterEnum("com.google.openrtb.FeedType", FeedType_name, FeedType_value)
	proto.RegisterEnum("com.google.openrtb.VolumeNormalizationMode", VolumeNormalizationMode_name, VolumeNormalizationMode_value)
	proto.RegisterEnum("com.google.openrtb.LayoutId", LayoutId_name, LayoutId_value)
	proto.RegisterEnum("com.google.openrtb.AdUnitId", AdUnitId_name, AdUnitId_value)
	proto.RegisterEnum("com.google.openrtb.ContextType", ContextType_name, ContextType_value)
	proto.RegisterEnum("com.google.openrtb.ContextSubtype", ContextSubtype_name, ContextSubtype_value)
	proto.RegisterEnum("com.google.openrtb.PlacementType", PlacementType_name, PlacementType_value)
	proto.RegisterEnum("com.google.openrtb.DataAssetType", DataAssetType_name, DataAssetType_value)
	proto.RegisterEnum("com.google.openrtb.ImageAssetType", ImageAssetType_name, ImageAssetType_value)
}

func init() { proto.RegisterFile("openrtb.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 7419 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xd4, 0x9c, 0x77, 0x98, 0x24, 0x49,
	0x75, 0xe0, 0xa7, 0x5c, 0x57, 0x55, 0xb4, 0x99, 0x37, 0xb9, 0x33, 0xbb, 0xb5, 0xbd, 0x6e, 0x76,
	0x58, 0x60, 0x68, 0xa0, 0xd5, 0x95, 0xe5, 0x77, 0x59, 0x76, 0xb3, 0xab, 0xb2, 0xbb, 0x8b, 0x29,
	0xb7, 0x51, 0x55, 0x3d, 0x3b, 0x77, 0xba, 0x4b, 0x65, 0x57, 0xe5, 0xf4, 0x24, 0x53, 0x6e, 0xcb,
	0x8c, 0xe1, 0x74, 0x77, 0x78, 0x90, 0x43, 0x20, 0x10, 0xf2, 0x12, 0xf2, 0x48, 0x42, 0x5e, 0x08,
	0x09, 0x64, 0x90, 0x84, 0x10, 0x72, 0x48, 0xc8, 0x0b, 0x59, 0xe4, 0x1d, 0x12, 0x72, 0x20, 0x84,
	0x80, 0xfb, 0x5e, 0x44, 0x64, 0x64, 0x54, 0x4f, 0xcf, 0x4c, 0x2f, 0xdc, 0x7d, 0x77, 0x37, 0xff,
	0xf4, 0xfb, 0x45, 0xc6, 0x0b, 0xfb, 0xe2, 0xc5, 0x8b, 0xc8, 0xac, 0x21, 0xcb, 0xc3, 0x91, 0x33,
	0x18, 0x4f, 0xf7, 0xd6, 0x47, 0xe3, 0xe1, 0x74, 0xa8, 0x69, 0x9d, 0x61, 0x7f, 0x7d, 0x7f, 0x38,
	0xdc, 0xef, 0x39, 0xeb, 0xe2, 0xc9, 0x99, 0x57, 0x19, 0x84, 0x6c, 0xba, 0x5d, 0xea, 0x3c, 0x35,
	0x73, 0x26, 0x53, 0x6d, 0x85, 0x04, 0xdd, 0x6e, 0x22, 0x70, 0x3a, 0x78, 0x36, 0x4e, 0x83, 0x6e,
	0x57, 0x4b, 0x93, 0x90, 0xdb, 0x1f, 0x25, 0x82, 0xa7, 0x43, 0x67, 0x17, 0xf5, 0x33, 0xeb, 0x37,
	0x16, 0xb0, 0xee, 0x2b, 0xaf, 0x97, 0xfb, 0x23, 0x8a, 0xd9, 0xb5, 0x02, 0x09, 0x4f, 0xdc, 0xa9,
	0x93, 0x08, 0x9d, 0x0e, 0x9c, 0x5d, 0xd4, 0x9f, 0x71, 0x1b, 0xb5, 0xa6, 0x3b, 0x75, 0x76, 0x8e,
	0x51, 0xa6, 0xa2, 0x65, 0x49, 0xc8, 0x1e, 0x8d, 0x12, 0x61, 0xa6, 0x79, 0xbb, 0x0a, 0x8d, 0xd1,
	0x68, 0xe7, 0x18, 0x45, 0x05, 0xed, 0x51, 0xb2, 0xd0, 0x75, 0xae, 0xb8, 0x1d, 0x27, 0x11, 0x61,
	0xaa, 0xcf, 0xbc, 0x8d, 0x6a, 0x89, 0x65, 0xa6, 0x42, 0x49, 0xcb, 0x91, 0xf0, 0xd8, 0xd9, 0x9f,
	0x24, 0x56, 0x8e, 0xd4, 0x62, 0xea, 0xec, 0x4f, 0x28, 0x53, 0x40, 0xc5, 0xd9, 0xc4, 0x19, 0x27,
	0x16, 0x8e, 0xa4, 0xd8, 0x9e, 0x38, 0x63, 0xca, 0x14, 0xb4, 0x47, 0x49, 0xd0, 0x9e, 0x26, 0xa2,
	0xa7, 0x03, 0x67, 0x57, 0xf4, 0x07, 0x0e, 0x53, 0x33, 0x66, 0x9d, 0xa9, 0x3b, 0x1c, 0xb4, 0xae,
	0x8f, 0x9c, 0x87, 0x97, 0x9a, 0x66, 0xb1, 0x5e, 0x2b, 0x59, 0x0d, 0x5a, 0x2e, 0x9a, 0x34, 0x68,
	0x4f, 0x35, 0x8d, 0x84, 0xa7, 0x7d, 0xfb, 0x5a, 0x22, 0x76, 0x3a, 0x70, 0x36, 0x42, 0x99, 0xac,
	0x9d, 0x24, 0x91, 0xab, 0x13, 0xc7, 0x9e, 0x26, 0xe2, 0xa7, 0x43, 0x67, 0xe3, 0x94, 0x83, 0xf6,
	0x00, 0x89, 0xda, 0xbd, 0x9e, 0xdb, 0x1f, 0x4d, 0x12, 0xe4, 0x74, 0xe0, 0x6c, 0xec, 0xe1, 0xc8,
	0x45, 0xbb, 0x37, 0x71, 0xa8, 0x97, 0xaa, 0x01, 0x09, 0x75, 0x66, 0xe3, 0xc4, 0x22, 0x53, 0x42,
	0x11, 0x0b, 0xdf, 0xeb, 0xd8, 0xd3, 0xc4, 0x12, 0x4b, 0x62, 0x32, 0x4b, 0xb3, 0xbb, 0x57, 0x12,
	0xcb, 0x22, 0xcd, 0xee, 0x5e, 0xe1, 0x69, 0xa3, 0x51, 0x02, 0xbc, 0xb4, 0xd1, 0x48, 0xbb, 0x9b,
	0x84, 0xa7, 0xce, 0x64, 0x9a, 0x38, 0xae, 0xd6, 0xc5, 0x92, 0x56, 0xdf, 0xfe, 0x00, 0x09, 0x95,
	0xfb, 0xa3, 0x1b, 0x8c, 0xcc, 0x20, 0x0b, 0x7b, 0xf6, 0x60, 0xe0, 0x8c, 0x13, 0x41, 0x36, 0x8a,
	0xcf, 0xb9, 0xbd, 0x9d, 0xad, 0x6f, 0x32, 0x05, 0x2a, 0x14, 0xb5, 0x17, 0x92, 0xc8, 0x15, 0xb7,
	0xeb, 0x0c, 0x85, 0xc9, 0x9d, 0x3d, 0x42, 0x09, 0xbb, 0x98, 0x9f, 0x72, 0x35, 0xd4, 0xb7, 0x67,
	0x5d, 0x77, 0xc8, 0x9a, 0x7d, 0x34, 0x7d, 0x03, 0xf3, 0x53, 0xae, 0xa6, 0x3d, 0x8b, 0xac, 0x74,
	0xdd, 0xc9, 0xa8, 0x67, 0x5f, 0xef, 0xdb, 0x03, 0x7b, 0xdf, 0x19, 0x33, 0x0b, 0x8e, 0xd3, 0x03,
	0xa9, 0xda, 0xf3, 0xc8, 0x89, 0xf9, 0x94, 0x2b, 0xce, 0x98, 0x59, 0x6c, 0x9c, 0xde, 0xf8, 0x00,
	0x27, 0xd4, 0x1d, 0x4c, 0xa6, 0x3d, 0x66, 0x5d, 0x31, 0xca, 0x01, 0x53, 0xa7, 0xf6, 0xbe, 0xdb,
	0x65, 0xc6, 0x13, 0xa7, 0x1c, 0xb4, 0xfb, 0x48, 0x6c, 0xcf, 0xed, 0x5e, 0xec, 0x0d, 0x87, 0x63,
	0x66, 0x14, 0x81, 0x87, 0x03, 0x1b, 0x54, 0x26, 0x69, 0xcf, 0x24, 0x8b, 0x9e, 0x8c, 0x93, 0x1d,
	0x47, 0xd5, 0x87, 0x43, 0xed, 0x66, 0x89, 0xaa, 0xe9, 0xda, 0x19, 0xb2, 0xd4, 0xe9, 0xb9, 0x9d,
	0xcb, 0x7b, 0xe3, 0xe1, 0x55, 0x34, 0x6b, 0x60, 0x15, 0xcf, 0xa5, 0x69, 0x77, 0x92, 0x85, 0x89,
	0xd3, 0x99, 0x8d, 0x9d, 0xc4, 0x12, 0x7b, 0x2a, 0x08, 0x75, 0xdd, 0x8b, 0x63, 0xbb, 0xef, 0xec,
	0xcd, 0x26, 0x53, 0x67, 0x9c, 0x20, 0xcc, 0x2a, 0xe6, 0xd2, 0xb4, 0x3c, 0x09, 0x8d, 0xfa, 0xa3,
	0xc4, 0x22, 0x1b, 0xe5, 0x67, 0x1d, 0x61, 0x94, 0x1b, 0xe8, 0x53, 0x46, 0xfd, 0x11, 0x1a, 0xc9,
	0xc0, 0x9e, 0xba, 0x57, 0x9c, 0xc4, 0xf2, 0x91, 0x8d, 0xa4, 0xc6, 0x14, 0xa8, 0x50, 0x44, 0x43,
	0x77, 0xae, 0x8d, 0xd8, 0x1a, 0x8f, 0x50, 0x14, 0x57, 0x3f, 0x12, 0x26, 0x0b, 0xdc, 0x92, 0xb4,
	0x25, 0x12, 0xb8, 0x9a, 0x08, 0xb0, 0x47, 0x81, 0xab, 0x48, 0x97, 0x98, 0x35, 0x46, 0x68, 0xe0,
	0x92, 0xb6, 0x43, 0x16, 0x2e, 0x0e, 0xc7, 0x7d, 0x1b, 0xad, 0x1a, 0x1d, 0xe1, 0xc6, 0x91, 0x0d,
	0x74, 0x7d, 0x8b, 0xe9, 0x51, 0xa1, 0xaf, 0xdd, 0x49, 0xc2, 0x57, 0x71, 0xd9, 0xe2, 0x00, 0x44,
	0x36, 0x83, 0x89, 0x00, 0x65, 0x8c, 0xe9, 0x97, 0x30, 0x7d, 0xc9, 0x4f, 0xbf, 0x24, 0xd2, 0xaf,
	0xf6, 0xdd, 0x01, 0xeb, 0xb3, 0xcc, 0xef, 0x0e, 0x78, 0x7e, 0x77, 0xc0, 0xfb, 0xe2, 0xe5, 0x77,
	0x07, 0x62, 0x69, 0x85, 0x98, 0x61, 0xe0, 0xd2, 0xda, 0x20, 0xa1, 0xd1, 0x70, 0xc2, 0x8c, 0x71,
	0x45, 0xbf, 0xff, 0x50, 0x37, 0xd3, 0x6d, 0x0c, 0x27, 0x2e, 0x7a, 0x1a, 0x8a, 0x59, 0xb5, 0x87,
	0x49, 0x64, 0x6f, 0x7a, 0x7d, 0x84, 0x7e, 0x34, 0x74, 0x76, 0x45, 0x3f, 0x7d, 0x68, 0x57, 0x59,
	0xdf, 0x8c, 0x2e, 0xfa, 0xa6, 0xcd, 0x20, 0x04, 0x28, 0x57, 0xd1, 0x1e, 0x23, 0x91, 0x3d, 0x7b,
	0x3a, 0x45, 0x6f, 0x88, 0xba, 0x87, 0xfa, 0xe0, 0xe2, 0xd8, 0x61, 0xb3, 0x61, 0x4c, 0xa7, 0x63,
	0x77, 0x6f, 0x36, 0xf5, 0x0a, 0x40, 0x3d, 0x34, 0xed, 0xbe, 0xdb, 0x77, 0x26, 0x89, 0x28, 0xf7,
	0x60, 0x0c, 0xb4, 0x55, 0x12, 0x9b, 0x0e, 0x47, 0xcc, 0x8c, 0x98, 0x69, 0xc7, 0xa8, 0x64, 0xad,
	0x48, 0x16, 0x9c, 0x6b, 0xa3, 0xae, 0x3b, 0x66, 0x4e, 0x6f, 0x45, 0x7f, 0xf6, 0x61, 0x75, 0x9a,
	0xd7, 0x46, 0xf6, 0xa0, 0x6b, 0xef, 0xf5, 0x9c, 0x92, 0x3b, 0x76, 0x98, 0x5b, 0x65, 0xb5, 0x0a,
	0x55, 0xbe, 0xe9, 0xb8, 0xcc, 0x60, 0x6f, 0xd2, 0x63, 0xa3, 0x51, 0xde, 0xc2, 0xfa, 0xae, 0x0e,
	0xc7, 0x97, 0x99, 0x2a, 0x2a, 0xac, 0x3e, 0x97, 0x2c, 0xf0, 0xf9, 0xbd, 0x95, 0xf5, 0xac, 0x45,
	0x62, 0x5d, 0x78, 0x7d, 0x4d, 0xfc, 0x59, 0xfd, 0x58, 0x9c, 0x44, 0x98, 0xeb, 0xf1, 0x3b, 0x1b,
	0x50, 0x3b, 0xfb, 0x38, 0x89, 0xf7, 0xdc, 0x81, 0x63, 0x8f, 0xdd, 0xe9, 0x75, 0x56, 0xc6, 0xca,
	0xe1, 0xdb, 0x20, 0x2b, 0xa3, 0xe2, 0xe5, 0xa4, 0xbe, 0x92, 0x76, 0x9a, 0x2c, 0xf6, 0xdd, 0x41,
	0x77, 0x36, 0xb6, 0xb1, 0xa3, 0xcc, 0x18, 0x22, 0x54, 0x4d, 0x62, 0x39, 0xec, 0x6b, 0x32, 0x47,
	0x58, 0xe4, 0xf0, 0x93, 0xb4, 0x17, 0x90, 0x18, 0x8b, 0x19, 0x3a, 0xc3, 0x1e, 0x73, 0x4f, 0x2b,
	0xfa, 0xbd, 0x87, 0x35, 0xa2, 0x21, 0xf2, 0x30, 0x0b, 0x94, 0x1a, 0xda, 0x0b, 0x49, 0xdc, 0x93,
	0x27, 0x89, 0x53, 0x6c, 0x54, 0x6f, 0xa3, 0x0e, 0x01, 0xea, 0xab, 0xf0, 0xd1, 0x5c, 0x98, 0x1b,
	0xcd, 0xa8, 0xb7, 0x16, 0xef, 0x27, 0x64, 0x32, 0xb5, 0xc7, 0xd3, 0xae, 0xd3, 0xb3, 0xaf, 0x8b,
	0xed, 0x4f, 0x49, 0xc1, 0x3d, 0x69, 0x72, 0xd9, 0x1d, 0x25, 0xee, 0x62, 0x86, 0xc2, 0x64, 0x2d,
	0x41, 0xa2, 0xf8, 0x17, 0x17, 0x4c, 0x82, 0x29, 0x78, 0xa8, 0xdd, 0x4b, 0xe2, 0x28, 0xda, 0x17,
	0xd1, 0x61, 0xdd, 0xcd, 0x9e, 0xf9, 0x09, 0xe8, 0x53, 0x27, 0xb8, 0xa4, 0x07, 0x1d, 0x87, 0x79,
	0xcc, 0xc8, 0xc3, 0x81, 0x24, 0x95, 0x49, 0xbe, 0xb9, 0x93, 0xcf, 0xd0, 0xdc, 0xf9, 0x3c, 0x38,
	0xd7, 0xa6, 0xce, 0xa0, 0xeb, 0x74, 0xb9, 0x53, 0xa0, 0x6a, 0x12, 0xf6, 0xb6, 0xef, 0x0e, 0xf6,
	0xdc, 0xe9, 0xd8, 0x9e, 0x72, 0x7f, 0x1b, 0xa1, 0x4a, 0x0a, 0x7b, 0x6e, 0x5f, 0xf3, 0x9e, 0x2f,
	0x8b, 0xe7, 0x32, 0x45, 0x5b, 0x23, 0xcb, 0x7b, 0xc3, 0x6b, 0xee, 0x60, 0xdf, 0xee, 0xf5, 0x86,
	0x57, 0x9d, 0x2e, 0x73, 0x18, 0xb1, 0x87, 0xc3, 0xd3, 0xf1, 0xcc, 0xa1, 0xf3, 0x8f, 0xb4, 0x1a,
	0x59, 0xc1, 0xfd, 0x67, 0xcf, 0xee, 0x5c, 0xee, 0x3b, 0xd3, 0x4b, 0xc3, 0x2e, 0xf3, 0x76, 0x37,
	0x31, 0xbf, 0x86, 0xc8, 0x59, 0x65, 0x39, 0x59, 0xa7, 0x0e, 0x68, 0x6b, 0x65, 0x12, 0xeb, 0x3a,
	0x3d, 0xf7, 0x8a, 0x33, 0xbe, 0xce, 0x22, 0x84, 0x95, 0xc3, 0x7d, 0x76, 0x71, 0x38, 0x98, 0x3a,
	0x83, 0x69, 0x49, 0x64, 0x55, 0x0a, 0x94, 0xea, 0x9e, 0x1b, 0x3b, 0x71, 0x74, 0x37, 0x76, 0x8e,
	0x2c, 0x76, 0x86, 0xfd, 0x91, 0x3d, 0x70, 0x87, 0x03, 0xbb, 0x9b, 0xd0, 0x98, 0xdf, 0x7e, 0x1a,
	0x81, 0x85, 0xaa, 0xad, 0x59, 0x64, 0x45, 0x41, 0x4b, 0x4f, 0x26, 0xee, 0x64, 0x7b, 0x50, 0xfa,
	0xa8, 0x61, 0xc6, 0x7a, 0xd1, 0x53, 0x37, 0xba, 0x6c, 0xad, 0x2c, 0x2b, 0xe5, 0xe9, 0x49, 0xcf,
	0x01, 0xdd, 0xf1, 0x34, 0x1d, 0x90, 0x76, 0x8e, 0xf8, 0x05, 0x31, 0xa7, 0x7d, 0x92, 0x95, 0xf0,
	0xe0, 0xe1, 0xe3, 0x2c, 0x32, 0x4a, 0xaf, 0x3d, 0xaf, 0xbb, 0x7a, 0x9e, 0x2c, 0x2a, 0xcd, 0x54,
	0xa2, 0xb2, 0xc0, 0xd3, 0x1d, 0x3c, 0xa1, 0x78, 0xc0, 0xf3, 0xbd, 0x7f, 0x81, 0x44, 0x58, 0xd0,
	0x74, 0x13, 0xcf, 0x77, 0xc0, 0x6f, 0x05, 0x6f, 0xeb, 0xb7, 0x42, 0x37, 0xfa, 0xad, 0x39, 0xcf,
	0x13, 0x7e, 0xfa, 0x9e, 0x67, 0xde, 0xbb, 0x44, 0x6e, 0xf0, 0x2e, 0xaa, 0x47, 0x58, 0xb8, 0x85,
	0x47, 0x88, 0xfe, 0xef, 0xf1, 0x08, 0xb1, 0xdb, 0x79, 0x84, 0xf8, 0x6d, 0x3c, 0x02, 0xb9, 0xc1,
	0x23, 0xa8, 0xab, 0x72, 0xf1, 0xb3, 0x5b, 0x95, 0x07, 0xd6, 0xd8, 0xd2, 0x67, 0xb5, 0xc6, 0xc4,
	0x12, 0x58, 0xfe, 0xbf, 0xb9, 0x04, 0x30, 0xb4, 0xed, 0xdb, 0xd7, 0x26, 0xce, 0x53, 0x89, 0x53,
	0x6c, 0xe0, 0x04, 0x69, 0x1b, 0x24, 0x7c, 0xd1, 0x71, 0xba, 0x6c, 0xd9, 0xdf, 0xc4, 0xa2, 0xb6,
	0x1c, 0x87, 0xc5, 0x43, 0x94, 0xe5, 0xc4, 0x98, 0x65, 0x32, 0x75, 0xa7, 0x9d, 0x4b, 0x4e, 0x57,
	0x6c, 0x45, 0x92, 0xb5, 0xc7, 0x48, 0x78, 0x70, 0x65, 0xd8, 0x63, 0x7b, 0xd1, 0x8a, 0xfe, 0xdc,
	0x43, 0x77, 0xf7, 0x61, 0x6f, 0xd6, 0x77, 0x6a, 0x18, 0x5c, 0xf4, 0xdc, 0x97, 0x30, 0xdb, 0xae,
	0x0e, 0xbb, 0x0e, 0x65, 0x8a, 0xde, 0x82, 0x7a, 0x63, 0x90, 0x2c, 0xf0, 0x10, 0x57, 0x5b, 0x25,
	0xd1, 0x31, 0x1f, 0x60, 0x16, 0x85, 0xc4, 0x77, 0x8e, 0x51, 0x2f, 0x41, 0x7b, 0x11, 0x59, 0x11,
	0xa2, 0x25, 0x22, 0x68, 0x9d, 0x79, 0xaf, 0x43, 0x87, 0x48, 0x84, 0xcc, 0x3c, 0xff, 0xce, 0x31,
	0xba, 0x2c, 0x54, 0x6b, 0x32, 0x84, 0xbe, 0x22, 0xce, 0x69, 0x71, 0x8a, 0xa2, 0x37, 0x6f, 0xa1,
	0xa7, 0x3b, 0x6f, 0x72, 0xa9, 0x84, 0x3f, 0xb3, 0xa5, 0x22, 0x06, 0x61, 0xf3, 0x38, 0xf1, 0x9a,
	0x68, 0x0d, 0x07, 0xce, 0xf0, 0xe2, 0xea, 0xfb, 0x82, 0x24, 0xd4, 0xe8, 0x8f, 0xb4, 0x75, 0x72,
	0x7c, 0x34, 0x76, 0xaf, 0xd8, 0x53, 0xc7, 0xb2, 0xf9, 0x51, 0x9a, 0x0d, 0x8d, 0x3c, 0x93, 0xae,
	0x88, 0xa7, 0xe2, 0x9c, 0xad, 0x19, 0x24, 0xd2, 0x75, 0xec, 0xde, 0x44, 0x5c, 0x76, 0x3c, 0xf7,
	0x68, 0x87, 0x93, 0xf5, 0x92, 0x63, 0xf7, 0x28, 0xd7, 0x5c, 0x7d, 0x6f, 0x80, 0x84, 0x91, 0x6f,
	0x38, 0xe1, 0xaa, 0x87, 0xb3, 0xe0, 0x6d, 0x0f, 0x67, 0xa1, 0x9b, 0x1c, 0xce, 0xe4, 0xf9, 0x3e,
	0xac, 0x9e, 0xef, 0x57, 0x49, 0xec, 0xaa, 0xdd, 0x1d, 0xf6, 0x6d, 0x77, 0xc0, 0x62, 0xf6, 0x38,
	0x95, 0xac, 0x7d, 0x0e, 0xbb, 0x64, 0x58, 0x38, 0xd2, 0x25, 0x03, 0x0d, 0xda, 0xd3, 0x79, 0x8f,
	0xed, 0xd9, 0xd9, 0x3b, 0x42, 0x24, 0xdc, 0x74, 0xa7, 0x8e, 0xec, 0x96, 0x77, 0xba, 0xd0, 0x48,
	0x78, 0x80, 0x41, 0x39, 0x37, 0x07, 0x26, 0xe3, 0x12, 0x12, 0x8d, 0xe1, 0xa7, 0x10, 0x41, 0xec,
	0x96, 0x41, 0x36, 0x1d, 0x45, 0xe6, 0x6b, 0x79, 0x30, 0x8e, 0x0f, 0x78, 0xd3, 0x95, 0x14, 0x8c,
	0xda, 0x46, 0xf6, 0xbe, 0xd3, 0x61, 0x3d, 0xc0, 0x87, 0x1e, 0x62, 0xbd, 0x28, 0x8a, 0x03, 0x30,
	0x93, 0xb5, 0x87, 0xc8, 0x32, 0x9b, 0xd0, 0xce, 0xf5, 0xd1, 0xb0, 0xe7, 0x76, 0xae, 0x8b, 0x93,
	0xc2, 0x7c, 0x22, 0xb6, 0x62, 0xec, 0x5c, 0xe4, 0xc7, 0x5f, 0x8a, 0x22, 0x3f, 0xcd, 0xda, 0xe3,
	0xce, 0x25, 0xe6, 0x2b, 0xe3, 0x54, 0x90, 0xb6, 0x45, 0xe2, 0xa3, 0xd9, 0x5e, 0xcf, 0x9d, 0x5c,
	0x72, 0xc6, 0xe2, 0xbc, 0x7a, 0xbb, 0x5b, 0x81, 0x86, 0x97, 0x9f, 0xfa, 0xaa, 0xda, 0xe3, 0x24,
	0xda, 0xe1, 0xbe, 0x94, 0x85, 0x6f, 0xb7, 0x3f, 0xf5, 0x0a, 0xcf, 0x4b, 0x3d, 0x35, 0x9c, 0xe0,
	0xcb, 0xce, 0xf5, 0xab, 0xc3, 0x71, 0x77, 0xc2, 0x22, 0xbc, 0x38, 0x95, 0xcc, 0x1c, 0xd6, 0x70,
	0xcf, 0xed, 0x39, 0xfc, 0xbe, 0x85, 0x0a, 0xf2, 0x66, 0xee, 0x9d, 0x21, 0x12, 0x32, 0x46, 0xa3,
	0xff, 0x67, 0x26, 0x4e, 0xb8, 0x8f, 0xa8, 0xef, 0x3e, 0xee, 0x24, 0x0b, 0x7b, 0xb3, 0x41, 0xb7,
	0xc7, 0x4f, 0x76, 0x71, 0x2a, 0xe8, 0xc6, 0xe9, 0x8c, 0x1f, 0x36, 0x9d, 0xcc, 0x10, 0xdc, 0x2e,
	0xbf, 0xd8, 0xa2, 0x4c, 0xfe, 0xff, 0x64, 0xe2, 0xd8, 0xfe, 0x30, 0x1c, 0x3b, 0xb3, 0x71, 0x8f,
	0x5d, 0xb2, 0xc4, 0xa9, 0x64, 0x6f, 0xf2, 0x3e, 0x8f, 0xc4, 0x65, 0xc3, 0x8e, 0x34, 0x83, 0x62,
	0xa6, 0x42, 0xfe, 0x4c, 0xf9, 0x73, 0x1a, 0x56, 0xe7, 0xd4, 0xab, 0xe1, 0xa3, 0x0b, 0x24, 0x2a,
	0x5a, 0x7d, 0x43, 0x05, 0x09, 0x12, 0x75, 0x46, 0xee, 0x64, 0xd8, 0x75, 0x44, 0x24, 0xe6, 0x21,
	0xbb, 0x7f, 0x72, 0xa7, 0x3d, 0x47, 0xd8, 0x09, 0x07, 0xbe, 0x8e, 0xc6, 0xae, 0x33, 0xf1, 0xaa,
	0xe2, 0x24, 0xd6, 0xd7, 0x64, 0x38, 0x10, 0xd7, 0x5c, 0x82, 0x30, 0xdd, 0x1e, 0x4f, 0xdd, 0xc9,
	0x94, 0x6d, 0xb5, 0x71, 0x2a, 0x08, 0x4b, 0xdf, 0x77, 0x06, 0x63, 0x87, 0xed, 0xb5, 0x71, 0xca,
	0x01, 0x53, 0xed, 0xde, 0xde, 0xac, 0xcf, 0xf6, 0xd2, 0x38, 0xe5, 0x80, 0x83, 0xe0, 0x4e, 0xc6,
	0x1d, 0xb6, 0x91, 0xc6, 0x29, 0x93, 0x71, 0x10, 0x70, 0x4c, 0x17, 0xb8, 0x89, 0xcd, 0xc6, 0x3d,
	0x6f, 0x58, 0xa2, 0xfe, 0xb0, 0x3c, 0x42, 0x22, 0xa3, 0xf1, 0xb0, 0xfb, 0x14, 0x3b, 0xf1, 0xdd,
	0x64, 0xef, 0x69, 0x8c, 0x87, 0x5d, 0xee, 0x1c, 0x9f, 0x98, 0xd9, 0x3d, 0x3c, 0x62, 0x73, 0x1d,
	0xad, 0x4a, 0x96, 0xd8, 0x9d, 0xe1, 0x53, 0x3c, 0x99, 0xd9, 0xed, 0x51, 0xcb, 0x60, 0xb1, 0xff,
	0x9c, 0xfa, 0x9c, 0x91, 0xc4, 0x0f, 0x18, 0xc9, 0x43, 0x18, 0xdb, 0xb0, 0xe9, 0xc1, 0xf0, 0x76,
	0xb0, 0x2f, 0x5c, 0xd4, 0x7c, 0x22, 0x2e, 0xc7, 0xd9, 0xc4, 0x19, 0x8b, 0x2c, 0x8b, 0x2c, 0x8b,
	0x92, 0xa2, 0xbd, 0x40, 0x18, 0xf2, 0xb5, 0x69, 0xe2, 0xe4, 0xcd, 0xef, 0x13, 0x84, 0x1d, 0x14,
	0x79, 0x4e, 0xea, 0xa9, 0x68, 0xf7, 0x11, 0x22, 0x44, 0x4b, 0xd7, 0xd9, 0x4a, 0x88, 0xd3, 0xb8,
	0x48, 0xd1, 0x75, 0xac, 0x1c, 0xa3, 0xc1, 0xc9, 0x74, 0xec, 0xd8, 0x7d, 0x66, 0xe5, 0x31, 0xaa,
	0xa4, 0x68, 0xeb, 0x44, 0x9b, 0x0c, 0x67, 0xe3, 0x8e, 0x33, 0x76, 0x7a, 0x2c, 0x8c, 0x99, 0x5c,
	0x72, 0xf9, 0x15, 0x5c, 0x8c, 0x1e, 0xf2, 0x44, 0x2b, 0xb2, 0x8b, 0x87, 0xee, 0xac, 0xe3, 0x8c,
	0xc5, 0x5d, 0xec, 0xb3, 0x6f, 0xb7, 0x78, 0x45, 0x76, 0x2a, 0x15, 0x71, 0xc6, 0x7b, 0xce, 0x80,
	0xad, 0xab, 0x08, 0x45, 0x11, 0x63, 0xa0, 0xa7, 0xec, 0xfd, 0xbe, 0xd3, 0x75, 0x6d, 0x31, 0x4e,
	0x27, 0x6e, 0x3e, 0x14, 0x4f, 0x18, 0xdb, 0x55, 0xcc, 0x49, 0x59, 0x4e, 0x7a, 0x40, 0x13, 0xbb,
	0xec, 0xf4, 0xf7, 0x9c, 0x2e, 0xbb, 0x50, 0x4a, 0x68, 0xbc, 0xcb, 0x7e, 0x0a, 0xce, 0x68, 0xcf,
	0x1e, 0xec, 0xcf, 0x70, 0x87, 0xba, 0x83, 0xcf, 0xa8, 0xc7, 0xde, 0xc2, 0xb3, 0x48, 0xcc, 0x6b,
	0xf6, 0xff, 0x99, 0x95, 0xfd, 0xf1, 0x08, 0x59, 0xe0, 0xaf, 0x38, 0x50, 0xb7, 0x3b, 0xe0, 0x61,
	0x61, 0x8c, 0xa2, 0x88, 0x35, 0xce, 0x6c, 0x51, 0x7e, 0x70, 0x66, 0xb3, 0x16, 0x8c, 0xe4, 0xa5,
	0xe1, 0x48, 0x4b, 0x93, 0xd0, 0xbe, 0x33, 0x3c, 0xe2, 0x3b, 0x98, 0x6d, 0x67, 0x48, 0x31, 0x3b,
	0x3a, 0x8c, 0xae, 0xdb, 0x9d, 0x5c, 0xb2, 0x93, 0x62, 0xa5, 0x7b, 0xc8, 0xda, 0xea, 0x76, 0xfb,
	0xdd, 0x8c, 0x58, 0x95, 0x82, 0x70, 0xa0, 0xba, 0x23, 0xa1, 0xc2, 0xb7, 0x04, 0xc9, 0xac, 0xb4,
	0x11, 0x57, 0x8a, 0x89, 0xd2, 0x38, 0xb2, 0x45, 0x3f, 0xba, 0x92, 0x15, 0x8b, 0x85, 0xc9, 0x98,
	0xbb, 0x63, 0x8f, 0xc7, 0x2e, 0xbb, 0x75, 0x66, 0xb9, 0x05, 0xce, 0x4d, 0xc6, 0xe2, 0xfc, 0x64,
	0x60, 0x49, 0x7d, 0xfb, 0xb2, 0x23, 0x8c, 0x9a, 0xc9, 0xec, 0x68, 0x3a, 0xec, 0x3a, 0x3d, 0xe1,
	0xb0, 0x39, 0xe0, 0x08, 0x0d, 0xf9, 0xcb, 0xa1, 0x38, 0x0d, 0x0e, 0xd9, 0x2b, 0x93, 0xe1, 0xe4,
	0x0a, 0x33, 0xd0, 0x38, 0x45, 0x11, 0x53, 0x2e, 0x5d, 0xbd, 0x22, 0x3c, 0x11, 0x8a, 0xfc, 0x12,
	0xeb, 0xee, 0xb9, 0x4b, 0xac, 0x55, 0xef, 0x12, 0x0b, 0x48, 0x68, 0x34, 0x72, 0x13, 0xf7, 0x70,
	0x03, 0x1d, 0x8d, 0x5c, 0xb6, 0x67, 0x5e, 0x63, 0x87, 0xd8, 0xc4, 0xbd, 0x18, 0x20, 0x52, 0x0f,
	0xb1, 0xee, 0x17, 0x4f, 0xc4, 0x45, 0x7c, 0xf0, 0xc5, 0x6c, 0xe7, 0xd8, 0x77, 0x86, 0x17, 0x9d,
	0x69, 0xe7, 0x52, 0xe2, 0x3e, 0x7e, 0xb2, 0xf0, 0x18, 0xcd, 0xbc, 0x33, 0x1c, 0x0c, 0xf8, 0x56,
	0xcc, 0x4e, 0x43, 0x27, 0x6e, 0xb9, 0xe2, 0x45, 0x4e, 0x16, 0xfe, 0x1d, 0xd0, 0xd4, 0x5e, 0x48,
	0x08, 0x7f, 0x39, 0xc6, 0xca, 0xd1, 0x6e, 0x7e, 0xf5, 0xc2, 0xed, 0x8c, 0x95, 0xa1, 0x68, 0x60,
	0x3b, 0x2f, 0xf6, 0xec, 0xc9, 0x25, 0xdc, 0xf0, 0xc5, 0x32, 0xf0, 0x18, 0xfb, 0xef, 0x5e, 0xb4,
	0x99, 0x3b, 0x8a, 0x53, 0x14, 0xb1, 0xff, 0x7d, 0xbb, 0xc3, 0x4c, 0x81, 0xef, 0x07, 0x1e, 0xf2,
	0x33, 0x59, 0x07, 0x0d, 0x81, 0xef, 0x08, 0x82, 0xd8, 0x22, 0xef, 0x4f, 0xc5, 0xe1, 0x0a, 0x45,
	0xcf, 0xf6, 0xdf, 0x10, 0x22, 0xa1, 0x6d, 0x67, 0xc8, 0x32, 0xd8, 0xdc, 0xf0, 0x03, 0x14, 0x45,
	0x96, 0x22, 0x6e, 0x16, 0x30, 0x65, 0x38, 0x60, 0x86, 0x33, 0x9c, 0x0d, 0xa6, 0xe3, 0xeb, 0xc2,
	0xfe, 0x3d, 0xc4, 0x6a, 0xc7, 0xce, 0xbe, 0x77, 0x3d, 0x1a, 0xa7, 0x82, 0xd0, 0x27, 0x73, 0xe9,
	0xa2, 0x3b, 0x9a, 0x24, 0x37, 0xd2, 0xc2, 0xd8, 0xe7, 0x13, 0x99, 0x19, 0x39, 0xd3, 0xf1, 0x50,
	0x58, 0x3c, 0x07, 0x34, 0xb8, 0x0e, 0x6e, 0x19, 0x22, 0x6e, 0x45, 0x19, 0xdb, 0xf4, 0x12, 0x77,
	0x24, 0x8c, 0x1c, 0x45, 0x2d, 0x4d, 0xc2, 0x6c, 0xc8, 0xe3, 0x6c, 0xc8, 0x0f, 0x3d, 0x52, 0x55,
	0x86, 0x1d, 0x5b, 0x4e, 0x5c, 0xd8, 0x1b, 0x6e, 0xbb, 0xd3, 0x99, 0x8d, 0xed, 0xce, 0x75, 0x71,
	0x91, 0x28, 0x19, 0x7b, 0xd9, 0xb3, 0x27, 0xd3, 0x8b, 0xae, 0x78, 0xc1, 0x40, 0x3d, 0xd4, 0x0c,
	0x12, 0x77, 0x47, 0x13, 0x67, 0xcc, 0xde, 0x9c, 0x2e, 0xb3, 0x0a, 0x9f, 0x71, 0xab, 0x0a, 0x9b,
	0x3c, 0x2b, 0xf5, 0xb5, 0xb4, 0x7b, 0x49, 0x7c, 0x36, 0xed, 0x0c, 0x2f, 0x5e, 0x9c, 0x38, 0x53,
	0x71, 0xdf, 0xe0, 0x27, 0x78, 0x73, 0xf2, 0xba, 0x20, 0x09, 0xb7, 0x27, 0x87, 0x78, 0xbb, 0x55,
	0x12, 0xdb, 0x9b, 0x5d, 0x77, 0xc6, 0x33, 0xb7, 0x2b, 0x3c, 0x92, 0x64, 0x1c, 0x9a, 0xeb, 0xc3,
	0x3d, 0x71, 0xcd, 0x83, 0x22, 0x4e, 0xca, 0xbe, 0x33, 0xe8, 0xca, 0xd7, 0x6b, 0x82, 0xe6, 0x36,
	0xd1, 0xc8, 0x81, 0x4d, 0xf4, 0x7e, 0x42, 0x3a, 0xb3, 0xc9, 0x74, 0xd8, 0xef, 0xda, 0x53, 0x5b,
	0xcc, 0x87, 0x92, 0xe2, 0x79, 0xbb, 0xe8, 0xd3, 0xf3, 0x76, 0x39, 0x12, 0x66, 0xe5, 0xc5, 0xd8,
	0x61, 0xf1, 0x76, 0xef, 0x7d, 0x4b, 0xf6, 0xd4, 0xa6, 0x4c, 0xc1, 0x1b, 0x90, 0xf7, 0xe0, 0x51,
	0x11, 0xab, 0x3f, 0x8a, 0xfb, 0x37, 0x49, 0x74, 0xe2, 0xec, 0xf7, 0x31, 0x14, 0x0d, 0x1d, 0xe9,
	0x70, 0x8a, 0x25, 0xaf, 0x37, 0xb9, 0x0a, 0xf5, 0x74, 0x57, 0x5f, 0x44, 0xa2, 0x22, 0xed, 0x48,
	0xb5, 0x9e, 0x24, 0x91, 0x2b, 0x76, 0x6f, 0x26, 0xe3, 0x3c, 0x06, 0x07, 0x8e, 0x86, 0xcf, 0x20,
	0x61, 0xea, 0xec, 0x4f, 0x30, 0x6f, 0x67, 0x38, 0x1a, 0xd9, 0x62, 0x9b, 0xe1, 0x30, 0x9f, 0x77,
	0xf3, 0x1e, 0x72, 0x77, 0xd7, 0x9d, 0xf0, 0x93, 0x3c, 0x9e, 0x14, 0x2e, 0xd9, 0x83, 0x81, 0xd3,
	0xe3, 0xa7, 0xf6, 0x33, 0x9f, 0x88, 0x92, 0x45, 0xd6, 0x81, 0xc9, 0x68, 0x38, 0x98, 0x38, 0x87,
	0xbc, 0x23, 0x8e, 0xe2, 0x69, 0x77, 0x8f, 0x99, 0x49, 0xe8, 0x96, 0x61, 0x01, 0x2f, 0x61, 0xbd,
	0xe9, 0xd8, 0x53, 0x64, 0x4f, 0x0f, 0xdb, 0xb8, 0xe7, 0x76, 0xe5, 0xeb, 0x31, 0x0e, 0xde, 0xdb,
	0x6f, 0x6e, 0x4f, 0xec, 0xed, 0xf7, 0xbc, 0xc1, 0x44, 0x6e, 0x30, 0x98, 0x24, 0x09, 0x0d, 0xf6,
	0xc6, 0xb7, 0x3a, 0x55, 0xd7, 0x86, 0xac, 0x21, 0x18, 0xe7, 0x52, 0xcc, 0xbb, 0xfa, 0xe6, 0x05,
	0x1c, 0x7a, 0xd6, 0x1e, 0xed, 0x51, 0x12, 0xda, 0x63, 0x5d, 0xbb, 0xf5, 0x44, 0xce, 0xf7, 0x82,
	0xa5, 0xa1, 0x1e, 0x7b, 0xbf, 0xe1, 0xd8, 0x53, 0x6f, 0xa6, 0xd8, 0x15, 0xc0, 0x3d, 0x24, 0xb2,
	0x3f, 0x1e, 0xce, 0xf8, 0x1e, 0x2e, 0x2f, 0x38, 0x78, 0xda, 0xea, 0x1b, 0x23, 0x24, 0x84, 0xf5,
	0x1e, 0x1c, 0xd1, 0x93, 0x24, 0xe2, 0xf6, 0x47, 0x6c, 0x3c, 0x31, 0x89, 0x03, 0xa6, 0x8e, 0xc6,
	0xe8, 0x0c, 0x42, 0xa7, 0x83, 0x67, 0x03, 0x94, 0x03, 0x56, 0x6a, 0xe3, 0xc8, 0xf1, 0x51, 0x62,
	0x32, 0x33, 0x19, 0x8c, 0xb4, 0x23, 0xc2, 0x64, 0x30, 0xd4, 0xd6, 0x48, 0xc8, 0xee, 0xf6, 0xf9,
	0x22, 0x63, 0x5f, 0x66, 0x74, 0xfb, 0x5a, 0x91, 0x10, 0xbb, 0xdb, 0x9f, 0xbf, 0x7a, 0x3a, 0x73,
	0xab, 0xab, 0x27, 0xde, 0xf3, 0x9d, 0x63, 0x34, 0x6e, 0x77, 0xfb, 0xe2, 0xde, 0x29, 0x41, 0xa2,
	0xde, 0x1d, 0x07, 0x8f, 0xe3, 0x3d, 0x54, 0x0e, 0x90, 0x2b, 0x73, 0x07, 0x48, 0x0c, 0x13, 0xb0,
	0x79, 0x31, 0x11, 0x26, 0x78, 0x27, 0x01, 0xb7, 0xeb, 0x9d, 0xfe, 0x3b, 0xbc, 0x13, 0x9d, 0xb1,
	0x38, 0x40, 0xa2, 0x47, 0x1e, 0x0b, 0x8b, 0x10, 0xaf, 0x7a, 0x45, 0xb0, 0xf5, 0x28, 0x09, 0xb3,
	0xab, 0xaa, 0xc5, 0xa7, 0x7b, 0x55, 0xc5, 0xd4, 0x34, 0x9d, 0x5f, 0x91, 0x69, 0x37, 0xf7, 0xe7,
	0xea, 0x15, 0x19, 0xbf, 0x1e, 0xcb, 0x2b, 0x2f, 0xe0, 0xee, 0xb8, 0xfd, 0x0b, 0x38, 0xe5, 0xe5,
	0xdb, 0x8d, 0xa1, 0xee, 0xc9, 0xcf, 0x38, 0xd4, 0xc5, 0xc8, 0xcd, 0xb1, 0x7b, 0x6e, 0x57, 0x84,
	0x43, 0x82, 0x78, 0x6c, 0x03, 0x73, 0xb1, 0xcd, 0x09, 0x25, 0xb6, 0x71, 0xae, 0x8d, 0xc4, 0x05,
	0x2a, 0x8a, 0xde, 0xfa, 0x5f, 0x24, 0x38, 0xa1, 0x7c, 0xbd, 0xcf, 0xbb, 0x86, 0x33, 0x1f, 0x88,
	0x91, 0xe5, 0xb9, 0x9b, 0x47, 0xef, 0xa6, 0x20, 0xe0, 0xdf, 0x14, 0xa4, 0xc9, 0x42, 0xcf, 0xbe,
	0x3e, 0x9c, 0x4d, 0xc5, 0x5b, 0xd1, 0x43, 0xc7, 0xa3, 0xc2, 0x72, 0x94, 0xbb, 0x54, 0xe4, 0x45,
	0x2d, 0xbb, 0x3b, 0x1b, 0xb8, 0x53, 0xb6, 0x36, 0x6e, 0xa2, 0x65, 0x74, 0xdb, 0x03, 0x97, 0x69,
	0xf1, 0xbc, 0x5a, 0xc1, 0x3f, 0x32, 0xdd, 0xe2, 0x0b, 0x1d, 0x71, 0x56, 0x62, 0x9b, 0xb0, 0x3c,
	0x2f, 0xf1, 0x10, 0x0c, 0xc5, 0xc9, 0x8c, 0xbf, 0x48, 0x8f, 0xdd, 0xe6, 0xd0, 0x75, 0x6d, 0xda,
	0xe4, 0x39, 0xe9, 0x01, 0x4d, 0xed, 0x31, 0x12, 0x1f, 0xf5, 0x3a, 0xfd, 0xa9, 0x12, 0x0e, 0x3c,
	0x78, 0x93, 0x97, 0x71, 0x1d, 0x07, 0xfd, 0x3a, 0x6b, 0x8a, 0xaf, 0xa3, 0xdd, 0x47, 0x62, 0x0c,
	0x3a, 0x83, 0x29, 0x7f, 0xcb, 0xcb, 0x5e, 0x57, 0x78, 0x49, 0xda, 0x1d, 0x24, 0x34, 0x71, 0x9e,
	0xe2, 0xaf, 0x39, 0x1e, 0x0e, 0x6c, 0x50, 0x24, 0xed, 0x31, 0xb2, 0x60, 0x4f, 0x26, 0xce, 0x74,
	0xc2, 0x2e, 0x6f, 0x6e, 0xe2, 0x68, 0xe7, 0x26, 0x6b, 0xdd, 0xc0, 0xfc, 0x54, 0xa8, 0xad, 0x7e,
	0x32, 0x4c, 0x22, 0x2c, 0x45, 0x71, 0x39, 0x11, 0xe6, 0x72, 0x1e, 0x24, 0xb1, 0xb1, 0xf3, 0xd4,
	0xcc, 0x1d, 0x3b, 0x7c, 0xb3, 0x97, 0xae, 0x4a, 0x26, 0x6b, 0xa6, 0x7a, 0xb9, 0xb0, 0xa8, 0x3f,
	0xff, 0x88, 0x95, 0xaf, 0xb7, 0x50, 0x69, 0xe7, 0x98, 0x77, 0x1b, 0x61, 0x90, 0x90, 0xdb, 0xdf,
	0x17, 0x47, 0x98, 0x23, 0x17, 0x52, 0xee, 0xdb, 0xfb, 0x58, 0x08, 0xea, 0x6a, 0x8f, 0x7b, 0x9f,
	0x14, 0x45, 0x9e, 0xde, 0x27, 0x45, 0xd8, 0x08, 0xfe, 0x51, 0xd1, 0xa6, 0x88, 0x11, 0xf8, 0xb7,
	0x61, 0xcf, 0x3b, 0x6a, 0x2b, 0x70, 0xf3, 0xde, 0x39, 0xc6, 0xc3, 0x85, 0xd5, 0xd3, 0x24, 0xc2,
	0xba, 0xe6, 0x9d, 0x69, 0xf9, 0x60, 0xa2, 0xe8, 0x6d, 0xc1, 0x6f, 0x09, 0x90, 0x08, 0x6b, 0xb8,
	0x96, 0x15, 0x81, 0x63, 0xe0, 0xe6, 0x06, 0xc7, 0x32, 0xb2, 0x6a, 0x94, 0xd0, 0x91, 0xad, 0xe6,
	0xe0, 0xdc, 0x6a, 0x0e, 0x79, 0xab, 0x59, 0x13, 0x1f, 0xa0, 0xf0, 0x6f, 0x04, 0xf8, 0xc7, 0x27,
	0x9a, 0xf8, 0xf8, 0x84, 0xbf, 0x1e, 0xe3, 0x1f, 0x9e, 0xc8, 0x57, 0x7a, 0x0b, 0xca, 0x2b, 0x3d,
	0xaf, 0x89, 0xbb, 0x22, 0xd6, 0xc9, 0xc8, 0x06, 0x06, 0x6f, 0x66, 0xca, 0x98, 0xef, 0x60, 0xfb,
	0x44, 0xd7, 0x83, 0xf2, 0x38, 0x7f, 0x20, 0xb0, 0x58, 0x26, 0x8b, 0xcc, 0xf4, 0xe6, 0x5c, 0xcb,
	0x99, 0x77, 0x45, 0xc9, 0xca, 0xfc, 0x96, 0x72, 0x88, 0x53, 0x79, 0x5c, 0x1a, 0x3b, 0x8f, 0x2a,
	0xce, 0xde, 0x7e, 0x63, 0x9a, 0xb7, 0x76, 0xed, 0x11, 0x12, 0xee, 0xb9, 0x83, 0xcb, 0x6c, 0xbf,
	0xbc, 0xcd, 0x62, 0x11, 0xfa, 0x15, 0x77, 0x70, 0x99, 0x32, 0x25, 0xed, 0x34, 0x59, 0x74, 0xfb,
	0xa3, 0xe9, 0xd8, 0xee, 0x5c, 0x76, 0xc6, 0x13, 0x71, 0xc7, 0xaa, 0x26, 0x61, 0x74, 0xfd, 0xe2,
	0x89, 0x20, 0xb1, 0xd5, 0xfa, 0x09, 0xab, 0x36, 0x09, 0x63, 0x69, 0xde, 0xa5, 0x57, 0xc0, 0xbf,
	0xf4, 0x7a, 0x88, 0x2c, 0xb3, 0x8f, 0xb6, 0x64, 0xd9, 0x41, 0x56, 0xf6, 0x7c, 0x22, 0x3b, 0xa3,
	0xd9, 0xbd, 0xde, 0x9e, 0xdd, 0xb9, 0x2c, 0xa2, 0x22, 0xc9, 0xde, 0xdc, 0x7d, 0xf8, 0xb3, 0x59,
	0xcd, 0x5b, 0xf3, 0xab, 0x79, 0xfd, 0xa8, 0xa3, 0x7b, 0x70, 0x39, 0x6f, 0xaa, 0xcb, 0xf9, 0xe8,
	0xa5, 0xcc, 0xad, 0xe7, 0xad, 0xf9, 0xf5, 0x7c, 0xf4, 0x52, 0x0e, 0xac, 0xea, 0xe2, 0xdc, 0xaa,
	0x7e, 0xfe, 0x91, 0x8b, 0x51, 0x97, 0xb5, 0xb4, 0x9a, 0xe8, 0xcd, 0xaf, 0xb8, 0x6e, 0x6a, 0x35,
	0xab, 0x67, 0x3c, 0x9f, 0xa0, 0x91, 0x30, 0xdb, 0xa3, 0x78, 0x50, 0xc7, 0x64, 0x6f, 0xda, 0x5e,
	0xe0, 0x39, 0x05, 0x69, 0x1a, 0x41, 0xcf, 0x34, 0x6e, 0xb1, 0xdc, 0x3d, 0xed, 0x82, 0x58, 0xb0,
	0x27, 0x49, 0xa4, 0x67, 0xef, 0x39, 0x9e, 0x65, 0x71, 0xf0, 0x0f, 0x06, 0x22, 0x72, 0x54, 0x0f,
	0x06, 0xab, 0x67, 0xbd, 0xcf, 0x9b, 0x12, 0x24, 0x7a, 0xc5, 0x9e, 0x4c, 0xa7, 0xf6, 0xbe, 0xa8,
	0xdc, 0xc3, 0xa3, 0xac, 0xde, 0xb5, 0x0f, 0x3e, 0x87, 0x1c, 0xf7, 0xae, 0x24, 0xed, 0xa9, 0xb3,
	0x3f, 0x1c, 0x5f, 0xd7, 0x96, 0x49, 0xbc, 0x5d, 0x2b, 0x99, 0x5b, 0xe5, 0x9a, 0x59, 0x82, 0x63,
	0x5a, 0x8c, 0x84, 0xcb, 0xc6, 0x66, 0x12, 0x02, 0x1a, 0x21, 0x0b, 0x28, 0x59, 0x49, 0x08, 0x4a,
	0x59, 0x87, 0x90, 0x94, 0x53, 0x10, 0x96, 0x72, 0x1a, 0x22, 0x52, 0xce, 0xc0, 0x82, 0x94, 0xb3,
	0x10, 0x95, 0x72, 0x0e, 0x62, 0xa2, 0x74, 0x1d, 0xe2, 0x22, 0x55, 0xb7, 0x92, 0x40, 0xa4, 0xac,
	0xc3, 0xa2, 0x94, 0x53, 0xb0, 0x24, 0xe5, 0x34, 0x2c, 0x4b, 0x39, 0x03, 0x2b, 0x52, 0xce, 0xc2,
	0x71, 0x29, 0xe7, 0x00, 0xa4, 0x9c, 0x87, 0x13, 0x52, 0x2e, 0x80, 0xa6, 0x2d, 0x92, 0x28, 0xaf,
	0x6b, 0x03, 0xee, 0xf0, 0x21, 0x09, 0x27, 0x7d, 0xd0, 0xe1, 0x94, 0x0f, 0x29, 0xb8, 0xd3, 0x87,
	0x34, 0xdc, 0xe5, 0x43, 0x06, 0x12, 0x3e, 0x64, 0xe1, 0x6e, 0x1f, 0x72, 0xb0, 0xea, 0x43, 0x1e,
	0xee, 0xf1, 0xa1, 0x00, 0xf7, 0x4a, 0xd0, 0x37, 0xe0, 0x3e, 0x1f, 0x92, 0x70, 0xbf, 0x0f, 0x3a,
	0x3c, 0xe0, 0x43, 0x0a, 0x4e, 0x8b, 0xb1, 0x4a, 0xc1, 0x83, 0xa2, 0x2f, 0x29, 0x2b, 0x09, 0x67,
	0xa4, 0xac, 0xc3, 0x33, 0xa4, 0x9c, 0x82, 0x87, 0xa4, 0x9c, 0x86, 0x67, 0x4a, 0x39, 0x03, 0xcf,
	0x92, 0x72, 0x16, 0x9e, 0x2d, 0xe5, 0x1c, 0x9c, 0x95, 0x72, 0x1e, 0x9e, 0x23, 0xe5, 0x02, 0xac,
	0x89, 0x26, 0xa4, 0x70, 0xac, 0x9e, 0xeb, 0x43, 0x12, 0x9e, 0xe7, 0x83, 0x0e, 0xcf, 0x17, 0x8d,
	0x4b, 0xc3, 0xba, 0x50, 0x4e, 0x5b, 0x49, 0xf8, 0x1c, 0x29, 0xeb, 0xb0, 0x21, 0xe5, 0x14, 0x24,
	0xa5, 0x9c, 0x06, 0x5d, 0xca, 0x19, 0x48, 0x49, 0x39, 0x0b, 0x69, 0x29, 0xe7, 0x20, 0x23, 0xe5,
	0x3c, 0x64, 0xa5, 0x5c, 0x80, 0x9c, 0x68, 0x42, 0x1a, 0x1b, 0x97, 0xf7, 0x21, 0x09, 0x05, 0xd1,
	0x9e, 0x0c, 0x3c, 0x2c, 0xf2, 0x67, 0xac, 0x24, 0x3c, 0x22, 0x65, 0x1d, 0x5e, 0x20, 0xe5, 0x14,
	0x3c, 0x2a, 0xe5, 0x34, 0xbc, 0x50, 0xca, 0x19, 0x78, 0x4c, 0xca, 0x59, 0x78, 0x5c, 0xca, 0x39,
	0x30, 0xa4, 0x9c, 0x87, 0x4d, 0x29, 0x17, 0xa0, 0x28, 0x9a, 0x90, 0xc1, 0xf6, 0x94, 0x7c, 0x48,
	0x82, 0xe9, 0x83, 0x0e, 0x5b, 0x3e, 0xa4, 0x60, 0xdb, 0x87, 0x34, 0xec, 0xf8, 0x90, 0x81, 0xb2,
	0xe8, 0x43, 0x16, 0x5e, 0x24, 0xea, 0xc8, 0x5a, 0x49, 0x38, 0x27, 0x65, 0x1d, 0x2a, 0x52, 0x4e,
	0x41, 0x55, 0xca, 0x69, 0xa8, 0x49, 0x39, 0x03, 0x75, 0x29, 0x67, 0xa1, 0x21, 0xe5, 0x1c, 0x3c,
	0x21, 0xe5, 0x3c, 0x50, 0x29, 0x17, 0xa0, 0x29, 0x6a, 0xcd, 0x41, 0x4b, 0xa4, 0xe6, 0xac, 0x24,
	0xb4, 0xa5, 0xac, 0xc3, 0xae, 0x94, 0x53, 0x70, 0x5e, 0xca, 0x69, 0x78, 0x52, 0xca, 0x19, 0xb8,
	0x20, 0xe5, 0x2c, 0xfc, 0x27, 0x29, 0xe7, 0xe0, 0x3f, 0x4b, 0x39, 0x0f, 0x9f, 0x2b, 0xe5, 0x02,
	0xfc, 0x17, 0xd1, 0xf1, 0x1c, 0x8e, 0xdc, 0x7f, 0xf5, 0x21, 0x09, 0x96, 0x0f, 0x3a, 0x7c, 0x9e,
	0x0f, 0x29, 0xb0, 0x7d, 0x48, 0xc3, 0x9e, 0x0f, 0x19, 0xe8, 0xf8, 0x90, 0x85, 0xae, 0x0f, 0x39,
	0x70, 0x7c, 0xc8, 0xc3, 0x45, 0x1f, 0x0a, 0xb0, 0x2f, 0x41, 0xdf, 0x80, 0x4b, 0x3e, 0x24, 0xc1,
	0xf5, 0x41, 0x87, 0x17, 0xfb, 0x90, 0x82, 0xcb, 0x3e, 0xa4, 0xa1, 0xe7, 0x43, 0x06, 0xfa, 0x3e,
	0x64, 0x61, 0xe0, 0x43, 0x0e, 0x86, 0x3e, 0xe4, 0x61, 0xe4, 0x43, 0x01, 0x9e, 0x92, 0x90, 0xda,
	0x80, 0xb1, 0x0f, 0x49, 0x98, 0xf8, 0xa0, 0xc3, 0xd4, 0x87, 0x14, 0xcc, 0x7c, 0x48, 0xc3, 0x15,
	0x1f, 0x32, 0x70, 0xd5, 0x87, 0x2c, 0x5c, 0xf3, 0x21, 0x07, 0xd7, 0x7d, 0xc8, 0xc3, 0x4b, 0x7c,
	0x28, 0xc0, 0x7f, 0x93, 0x90, 0xde, 0x80, 0xcf, 0xf7, 0x21, 0x09, 0xff, 0xdd, 0x07, 0x1d, 0xfe,
	0x87, 0x0f, 0x29, 0xf8, 0x9f, 0xda, 0x92, 0x07, 0x69, 0x78, 0x69, 0xc0, 0xa7, 0x0c, 0xbc, 0x2c,
	0xa0, 0xc5, 0x99, 0x2d, 0xe5, 0xe1, 0xe5, 0x01, 0x6d, 0x91, 0x4d, 0x76, 0xde, 0x4a, 0xc2, 0x2b,
	0x7c, 0xd0, 0xe1, 0x95, 0x3e, 0xa4, 0xe0, 0x55, 0x3e, 0xa4, 0xe1, 0xd5, 0x3e, 0x64, 0xe0, 0x35,
	0x3e, 0x64, 0xe1, 0xb5, 0x3e, 0xe4, 0xe0, 0x0b, 0x7c, 0xc8, 0xc3, 0x17, 0xfa, 0x50, 0x80, 0x2f,
	0xf2, 0x5a, 0x93, 0x47, 0xab, 0xfa, 0x62, 0x85, 0x92, 0xf0, 0x25, 0x0a, 0xe9, 0xf0, 0x3a, 0x85,
	0x52, 0xf0, 0xa5, 0x0a, 0xa5, 0xe1, 0xf5, 0x0a, 0x65, 0xe0, 0x0d, 0x0a, 0x65, 0xe1, 0xcb, 0x14,
	0xca, 0xc1, 0x1b, 0x15, 0xca, 0xc3, 0x9b, 0xbc, 0xde, 0x17, 0xe0, 0xcb, 0xbd, 0x56, 0x15, 0xac,
	0x24, 0xbc, 0xd9, 0x07, 0x1d, 0xbe, 0xc2, 0x87, 0x14, 0x7c, 0xa5, 0x0f, 0x69, 0xf8, 0x2a, 0x1f,
	0x32, 0xf0, 0xd5, 0x3e, 0x64, 0xe1, 0x6b, 0x7c, 0xc8, 0xc1, 0xd7, 0xfa, 0x90, 0x87, 0xaf, 0xf3,
	0xa1, 0x00, 0x5f, 0xef, 0xb5, 0xa6, 0x80, 0xbd, 0xff, 0x06, 0x85, 0x92, 0xf0, 0x16, 0x85, 0x74,
	0xf8, 0x46, 0x85, 0x52, 0xf0, 0x4d, 0x0a, 0xa5, 0xe1, 0x9b, 0x15, 0xca, 0xc0, 0xb7, 0x28, 0x94,
	0x85, 0x6f, 0x55, 0x28, 0x07, 0xdf, 0xa6, 0x50, 0x1e, 0xbe, 0x5d, 0xa1, 0x02, 0xbc, 0xd5, 0x27,
	0x7d, 0x03, 0xbe, 0x43, 0xa1, 0x24, 0x7c, 0xa7, 0x42, 0x3a, 0x7c, 0x97, 0x42, 0x29, 0x78, 0x9b,
	0x42, 0x69, 0xf8, 0x6e, 0x85, 0x32, 0xf0, 0x3d, 0x0a, 0x65, 0xe1, 0x7b, 0x15, 0xca, 0xc1, 0xf7,
	0x29, 0x94, 0x87, 0xef, 0x57, 0xa8, 0x00, 0x3f, 0xe0, 0x53, 0x6a, 0x03, 0x7e, 0x50, 0xa1, 0x24,
	0xfc, 0x10, 0x06, 0x39, 0x11, 0x0c, 0x4e, 0x36, 0xe0, 0xed, 0xde, 0x93, 0xe4, 0x86, 0x95, 0x84,
	0x1f, 0x56, 0x48, 0x87, 0x77, 0x28, 0x94, 0x82, 0x1f, 0x51, 0x28, 0x0d, 0x3f, 0xaa, 0x50, 0x06,
	0xde, 0xa9, 0x50, 0x16, 0xde, 0xa5, 0x50, 0x0e, 0x7e, 0x4c, 0xa1, 0x3c, 0xfc, 0xb8, 0x42, 0x05,
	0xf8, 0x09, 0xd9, 0x92, 0x24, 0xfc, 0xa4, 0x7c, 0x82, 0xb1, 0xd7, 0xbb, 0x15, 0xd2, 0xe1, 0xa7,
	0x14, 0x4a, 0xc1, 0x4f, 0x2b, 0x94, 0x86, 0x9f, 0x51, 0x28, 0x03, 0xef, 0x91, 0x25, 0xea, 0xf0,
	0xb3, 0xf2, 0x09, 0xc6, 0x5b, 0xef, 0x55, 0x48, 0x87, 0x9f, 0x53, 0x28, 0x05, 0xef, 0x93, 0x5a,
	0x29, 0xf8, 0x79, 0xf9, 0x04, 0x23, 0x8f, 0x5f, 0x50, 0x48, 0x87, 0x5f, 0x54, 0x28, 0x05, 0xbf,
	0xa4, 0x50, 0x1a, 0x7e, 0x59, 0xa1, 0x0c, 0xbc, 0x5f, 0xa1, 0x2c, 0xfc, 0x8a, 0x42, 0x39, 0xf8,
	0x55, 0x85, 0xf2, 0xf0, 0x01, 0x85, 0x0a, 0xf0, 0x6b, 0x01, 0x6d, 0x99, 0xc4, 0x44, 0xed, 0x1b,
	0xf0, 0xeb, 0x2a, 0x26, 0xe1, 0x37, 0x54, 0xd4, 0xe1, 0x37, 0x65, 0xb3, 0xd3, 0xf0, 0x5b, 0xb2,
	0x18, 0x8c, 0x49, 0x7e, 0x5b, 0x21, 0x1d, 0x7e, 0x47, 0xa1, 0x14, 0xfc, 0xae, 0x42, 0x69, 0xf8,
	0xa0, 0x42, 0x19, 0xf8, 0x3d, 0x85, 0xb2, 0xf0, 0xfb, 0x0a, 0xe5, 0xe0, 0x0f, 0x14, 0xca, 0xc3,
	0x1f, 0xca, 0xba, 0x33, 0xf0, 0x47, 0xf2, 0x09, 0xc6, 0x1f, 0x7f, 0xac, 0x90, 0x0e, 0x1f, 0x52,
	0x28, 0x05, 0x7f, 0xa2, 0x50, 0x1a, 0xfe, 0x54, 0xa1, 0x0c, 0xfc, 0x99, 0x42, 0x59, 0xf8, 0x73,
	0x85, 0x72, 0xf0, 0x17, 0x0a, 0xe5, 0xe1, 0x2f, 0x15, 0x2a, 0xc0, 0x5f, 0xc9, 0x41, 0x61, 0x11,
	0xc9, 0x5f, 0xcb, 0x86, 0x65, 0xe1, 0x6f, 0x64, 0x46, 0x0c, 0x2a, 0xfe, 0x56, 0x21, 0x1d, 0xfe,
	0x4e, 0xa1, 0x14, 0x7c, 0x58, 0xa1, 0x34, 0xfc, 0xbd, 0x42, 0x19, 0xf8, 0x07, 0x85, 0xb2, 0xf0,
	0x11, 0x85, 0x72, 0xf0, 0x8f, 0xb2, 0xb6, 0x1c, 0xfc, 0x93, 0x7c, 0x82, 0xc1, 0xc4, 0x3f, 0x2b,
	0xa4, 0xc3, 0xbf, 0x28, 0x94, 0x82, 0x7f, 0x55, 0x28, 0x0d, 0x1f, 0x55, 0x28, 0x03, 0x1f, 0x53,
	0x28, 0x0b, 0xff, 0xa6, 0x50, 0x0e, 0x3e, 0xae, 0x50, 0x1e, 0xfe, 0x5d, 0xa1, 0x02, 0x7c, 0x42,
	0x0e, 0x03, 0x0b, 0x2f, 0xfe, 0x43, 0xc5, 0x24, 0x7c, 0x52, 0x45, 0x1d, 0x3e, 0xa5, 0x62, 0x0a,
	0x3e, 0xad, 0x62, 0x1a, 0x5e, 0x1a, 0x54, 0x30, 0x03, 0x2f, 0x53, 0x31, 0x0b, 0x2f, 0x57, 0x31,
	0x07, 0xaf, 0x50, 0x31, 0x0f, 0xaf, 0x54, 0xb1, 0x00, 0xaf, 0x52, 0x50, 0xdf, 0x80, 0x57, 0xab,
	0x98, 0x84, 0xd7, 0xa8, 0xa8, 0xc3, 0x6b, 0x55, 0x4c, 0xc1, 0x17, 0xa8, 0x98, 0x86, 0x2f, 0x54,
	0x31, 0x03, 0x5f, 0xa4, 0x62, 0x16, 0xbe, 0x58, 0xc5, 0x1c, 0x7c, 0x89, 0x8a, 0x79, 0x78, 0x9d,
	0x8a, 0x05, 0xf8, 0x52, 0x05, 0x53, 0x1b, 0xf0, 0x7a, 0x15, 0x93, 0xf0, 0x06, 0x15, 0x75, 0xf8,
	0x32, 0x15, 0x53, 0xf0, 0x46, 0x15, 0xd3, 0xf0, 0x26, 0x15, 0x33, 0xf0, 0xe5, 0x2a, 0x66, 0xe1,
	0xcd, 0x2a, 0xe6, 0xe0, 0x2b, 0x54, 0xcc, 0xc3, 0x57, 0xaa, 0x58, 0x80, 0xaf, 0x52, 0x30, 0xbd,
	0x01, 0x5f, 0xad, 0x62, 0x12, 0xbe, 0x46, 0x45, 0x1d, 0xbe, 0x56, 0xc5, 0x14, 0x7c, 0x9d, 0x8a,
	0x69, 0xf8, 0xfa, 0xa0, 0x67, 0x96, 0x79, 0xf8, 0x86, 0xa0, 0x67, 0x26, 0x18, 0x96, 0xbc, 0x45,
	0x21, 0x1d, 0xbe, 0x51, 0xa1, 0x14, 0x7c, 0x93, 0x42, 0x69, 0xf8, 0x66, 0x85, 0x32, 0xf0, 0x2d,
	0x0a, 0x65, 0xe1, 0x5b, 0x65, 0xf9, 0x05, 0xf8, 0x36, 0xf9, 0x04, 0x37, 0xfe, 0x6f, 0x57, 0x48,
	0x87, 0xb7, 0x2a, 0x94, 0x82, 0xef, 0x50, 0x28, 0x0d, 0xdf, 0xa9, 0x50, 0x06, 0xbe, 0x4b, 0xa1,
	0x2c, 0xbc, 0x4d, 0xa1, 0x1c, 0x7c, 0xb7, 0x42, 0x79, 0xf8, 0x1e, 0x85, 0x0a, 0xf0, 0xbd, 0xb2,
	0xe3, 0x2c, 0x02, 0xf8, 0x3e, 0x15, 0x93, 0xf0, 0xfd, 0x2a, 0xea, 0xf0, 0x03, 0x2a, 0xa6, 0xe0,
	0x07, 0x55, 0x4c, 0xc3, 0x0f, 0xa9, 0x98, 0x81, 0xb7, 0xab, 0x98, 0x85, 0x1f, 0x56, 0x31, 0x07,
	0xef, 0x50, 0x31, 0x0f, 0x3f, 0xa2, 0x62, 0x01, 0x7e, 0x54, 0x41, 0x7d, 0x03, 0xde, 0xa9, 0x62,
	0x12, 0xde, 0xa5, 0xa2, 0x0e, 0x3f, 0xa6, 0x62, 0x0a, 0x7e, 0x5c, 0xc5, 0x34, 0xfc, 0x84, 0x8a,
	0x19, 0xf8, 0x49, 0x15, 0xb3, 0xf0, 0x6e, 0x15, 0x73, 0xf0, 0x53, 0x2a, 0xe6, 0xe1, 0xa7, 0x55,
	0x2c, 0xc0, 0xcf, 0x28, 0x98, 0xda, 0x80, 0xf7, 0xa8, 0x98, 0x84, 0x9f, 0x55, 0x51, 0x87, 0xf7,
	0xaa, 0x98, 0x82, 0x9f, 0x53, 0x31, 0x0d, 0xef, 0x53, 0x31, 0x03, 0x3f, 0xaf, 0x62, 0x16, 0x7e,
	0xc1, 0x33, 0x0f, 0x7d, 0x03, 0x7e, 0xd1, 0x9b, 0x2e, 0x1d, 0x23, 0x8c, 0x5f, 0x52, 0x48, 0x87,
	0x5f, 0x56, 0x28, 0x05, 0xef, 0x57, 0x28, 0x0d, 0xbf, 0xa2, 0x50, 0x06, 0x7e, 0x55, 0xa1, 0x2c,
	0x7c, 0x40, 0xa1, 0x1c, 0xfc, 0x9a, 0x42, 0x79, 0xf8, 0x75, 0x85, 0x0a, 0xf0, 0x1b, 0x5e, 0xc3,
	0xb0, 0xf6, 0x0d, 0xf8, 0x4d, 0x15, 0x93, 0xf0, 0x5b, 0x2a, 0xea, 0xf0, 0xdb, 0x2a, 0xa6, 0xe0,
	0x77, 0x54, 0x4c, 0xc3, 0xef, 0xaa, 0x98, 0x81, 0x0f, 0xaa, 0x98, 0x85, 0xdf, 0x53, 0x31, 0x07,
	0xbf, 0xaf, 0x62, 0x1e, 0xfe, 0x40, 0xc5, 0x02, 0xfc, 0xa1, 0x82, 0xfa, 0x06, 0xfc, 0x91, 0x8a,
	0x49, 0xf8, 0x63, 0x15, 0x75, 0xf8, 0x90, 0x8a, 0x29, 0xf8, 0x13, 0x15, 0xd3, 0xf0, 0xa7, 0x2a,
	0x66, 0xe0, 0xcf, 0x54, 0xcc, 0xc2, 0x9f, 0xab, 0x98, 0x83, 0xbf, 0x90, 0xf3, 0x92, 0x84, 0xbf,
	0x94, 0xe3, 0x84, 0xf1, 0xd6, 0x5f, 0x29, 0xa4, 0xc3, 0x5f, 0x2b, 0x94, 0x82, 0xbf, 0x91, 0x5a,
	0x3a, 0xfc, 0xad, 0x7c, 0x82, 0x31, 0xd5, 0xdf, 0x29, 0xa4, 0xc3, 0x87, 0x15, 0x4a, 0xc1, 0xdf,
	0x2b, 0x94, 0x86, 0x7f, 0x90, 0x65, 0xa4, 0xe0, 0x23, 0xf2, 0x09, 0x46, 0x58, 0xff, 0xa8, 0x90,
	0x0e, 0xff, 0xa4, 0x50, 0x0a, 0xfe, 0x59, 0xa1, 0x34, 0xfc, 0x8b, 0x42, 0x19, 0xf8, 0x57, 0x85,
	0xb2, 0xf0, 0x51, 0x85, 0x72, 0xf0, 0x31, 0x85, 0xf2, 0xf0, 0x6f, 0x0a, 0x15, 0xe0, 0xe3, 0x72,
	0x48, 0x58, 0x84, 0xf5, 0xef, 0xb2, 0x61, 0x69, 0xf8, 0x84, 0x94, 0x33, 0xf0, 0x1f, 0x52, 0x09,
	0x63, 0x9a, 0x4f, 0x2a, 0xa4, 0xc3, 0xa7, 0x14, 0x4a, 0xc1, 0xa7, 0x15, 0x4a, 0xc3, 0x4b, 0x43,
	0x3e, 0x65, 0xe0, 0x65, 0x0a, 0x65, 0xe1, 0xe5, 0x0a, 0xe5, 0xe0, 0x15, 0x21, 0xaf, 0xb6, 0x2c,
	0xbc, 0x52, 0x3e, 0xc1, 0x40, 0xe5, 0x55, 0x0a, 0xe9, 0xf0, 0x6a, 0x85, 0x52, 0xf0, 0x1a, 0x85,
	0xd2, 0xf0, 0xda, 0xd0, 0x9a, 0x41, 0x16, 0x95, 0x0f, 0xef, 0xb5, 0xe3, 0x64, 0x71, 0xab, 0x4c,
	0x9b, 0x2d, 0xfe, 0xf3, 0x7e, 0x08, 0x68, 0x40, 0xe6, 0x7e, 0xf0, 0x0f, 0x41, 0x9e, 0xe5, 0x49,
	0xd3, 0x4b, 0x08, 0xad, 0xb5, 0xc9, 0x92, 0xfa, 0x2b, 0x5c, 0xed, 0x04, 0x59, 0x7e, 0x72, 0xa7,
	0x55, 0xad, 0x58, 0x2d, 0xf3, 0xc9, 0x96, 0x65, 0x94, 0x20, 0xa0, 0xdd, 0x41, 0x8e, 0xf3, 0xa4,
	0x4d, 0xa3, 0x56, 0x33, 0x29, 0x26, 0x06, 0x31, 0xdf, 0x8b, 0x8c, 0x5d, 0xa3, 0x59, 0xa4, 0xe5,
	0x06, 0xcb, 0xc7, 0x6f, 0x49, 0xb7, 0xa8, 0x51, 0x35, 0x21, 0xbc, 0xf6, 0xb6, 0x10, 0x39, 0x71,
	0xc3, 0xab, 0x6c, 0x2c, 0xc9, 0x68, 0x97, 0xca, 0x75, 0xcb, 0x68, 0xb7, 0xea, 0x56, 0xa3, 0x62,
	0x5c, 0x80, 0x80, 0x96, 0x20, 0x27, 0x79, 0x62, 0xbb, 0x69, 0x52, 0xab, 0x5c, 0x2b, 0xb7, 0xca,
	0x46, 0xcb, 0xc4, 0x3a, 0x12, 0xe4, 0xa4, 0xf9, 0x64, 0xc3, 0xa8, 0x95, 0x8c, 0xcd, 0x8a, 0xc9,
	0x74, 0xaa, 0x46, 0xab, 0x5c, 0x84, 0x90, 0x76, 0x3f, 0x59, 0x55, 0x9e, 0x14, 0x2b, 0xe5, 0xe2,
	0x39, 0x45, 0x33, 0xac, 0x3d, 0x48, 0xee, 0x53, 0x9e, 0xd3, 0x7a, 0xa5, 0x52, 0xdf, 0x9d, 0x2b,
	0x3c, 0xa2, 0xdd, 0x47, 0xee, 0xde, 0x2d, 0x97, 0xcc, 0xba, 0x55, 0xae, 0xc9, 0x8e, 0xc9, 0x56,
	0x2d, 0x68, 0x67, 0xc8, 0xfd, 0x07, 0x1f, 0x1f, 0x68, 0x5f, 0x54, 0x8b, 0x92, 0x50, 0xa3, 0xde,
	0x80, 0x18, 0x96, 0xd5, 0xa0, 0xf5, 0xdd, 0x7a, 0xd1, 0x68, 0x95, 0x77, 0x4d, 0xab, 0x4e, 0xad,
	0x66, 0x7b, 0x7b, 0xdb, 0x6c, 0x22, 0x41, 0x5c, 0x5b, 0x22, 0x31, 0xa3, 0x56, 0xab, 0x5f, 0x28,
	0xd7, 0xb6, 0x81, 0x68, 0x8b, 0x24, 0xda, 0x6c, 0xd3, 0x5d, 0xf3, 0x42, 0x13, 0x16, 0xb5, 0x65,
	0x12, 0x67, 0x03, 0x5d, 0xaf, 0x55, 0x2e, 0xc0, 0x92, 0x76, 0x92, 0x80, 0xa8, 0xa5, 0x65, 0x52,
	0xa3, 0xc8, 0xf4, 0x97, 0xb1, 0x37, 0xe7, 0xcb, 0xb5, 0x52, 0xfd, 0x7c, 0xd3, 0x2a, 0x95, 0x8d,
	0x4a, 0x7d, 0x1b, 0x6b, 0x30, 0x2a, 0x26, 0x6d, 0x59, 0xcd, 0xd6, 0x85, 0x8a, 0x09, 0x2b, 0xda,
	0x3d, 0xe4, 0xae, 0x1d, 0xa3, 0x69, 0xf1, 0x81, 0xac, 0xd7, 0xac, 0xfa, 0xd6, 0x96, 0xb5, 0xd9,
	0x6e, 0xb5, 0xea, 0x35, 0x38, 0xae, 0x9d, 0x22, 0x27, 0x8c, 0x92, 0x55, 0x34, 0x6a, 0xd6, 0xa6,
	0x69, 0x35, 0xcf, 0x95, 0x1b, 0x0d, 0xb3, 0x04, 0xa0, 0xc5, 0x49, 0x64, 0xab, 0x62, 0x34, 0x77,
	0xe0, 0xc4, 0x5a, 0x95, 0x2c, 0xa9, 0x9f, 0x0e, 0x60, 0x1b, 0x77, 0x1b, 0x46, 0xb9, 0x64, 0x25,
	0x21, 0xe0, 0x83, 0x0e, 0x41, 0x84, 0x2a, 0xe5, 0x4f, 0x42, 0x58, 0x42, 0x9d, 0x56, 0xab, 0x06,
	0x84, 0xfd, 0x74, 0x1d, 0x22, 0x6b, 0x6f, 0x0d, 0x10, 0xe2, 0xff, 0x90, 0x12, 0x9f, 0xb5, 0x6b,
	0xe7, 0x6a, 0xf5, 0xf3, 0x35, 0x38, 0xa6, 0x69, 0x64, 0xc5, 0xd8, 0xac, 0xef, 0x9a, 0x56, 0x6b,
	0xc7, 0xb4, 0xb6, 0xea, 0x15, 0xb4, 0xb0, 0x87, 0xc8, 0xe9, 0x92, 0xd9, 0xa0, 0x66, 0x11, 0x07,
	0xd6, 0xaa, 0x94, 0xcf, 0x99, 0x95, 0x0b, 0xd6, 0xa6, 0x59, 0xa9, 0x9f, 0xf7, 0x73, 0x05, 0x51,
	0xf3, 0x40, 0x1a, 0xb3, 0xb9, 0x1d, 0xd3, 0x28, 0x99, 0x94, 0xdf, 0xcc, 0x6f, 0xd5, 0xeb, 0x2d,
	0x93, 0x42, 0x84, 0x0d, 0x72, 0xb9, 0x64, 0x6e, 0x1a, 0x14, 0x16, 0xb4, 0x55, 0x72, 0xa7, 0x51,
	0xb2, 0x1a, 0xf5, 0x66, 0xb9, 0x55, 0xae, 0xd7, 0xac, 0xad, 0x76, 0xa5, 0xd2, 0x2c, 0x52, 0xd3,
	0xac, 0x41, 0x74, 0xed, 0x79, 0x64, 0x65, 0xfe, 0x17, 0xd0, 0x58, 0x4c, 0xa5, 0x5c, 0x33, 0x0d,
	0x0a, 0x01, 0x6d, 0x85, 0x90, 0x5a, 0xbd, 0x66, 0x09, 0x0e, 0xae, 0xbd, 0x3b, 0xc0, 0x3e, 0xb8,
	0xe5, 0x1f, 0x48, 0x2c, 0x91, 0xd8, 0xae, 0xd1, 0x6c, 0x59, 0x49, 0x6b, 0x03, 0x02, 0x92, 0x74,
	0x6b, 0x03, 0x82, 0x92, 0x52, 0xd6, 0x06, 0x84, 0x70, 0x5a, 0xbd, 0x9c, 0xd6, 0x79, 0x6a, 0x34,
	0x1a, 0xac, 0xbd, 0x5e, 0xaa, 0xae, 0xa4, 0x46, 0x64, 0x6a, 0x4a, 0x49, 0x5d, 0x90, 0xe5, 0xa5,
	0xad, 0x0d, 0x88, 0xca, 0x3c, 0x69, 0x25, 0x4f, 0x0c, 0x6d, 0xa9, 0x64, 0x78, 0x0d, 0x8a, 0xe3,
	0xac, 0x4b, 0x94, 0xb9, 0xc8, 0x5a, 0x97, 0xac, 0xcc, 0xff, 0xe6, 0x56, 0xbb, 0x93, 0x68, 0xd2,
	0xf2, 0xad, 0x66, 0xbd, 0x5d, 0x2b, 0x59, 0xf5, 0x1a, 0x04, 0xb4, 0xbb, 0xc8, 0x1d, 0x37, 0xa4,
	0x6f, 0x6d, 0xf1, 0xb5, 0xcf, 0x97, 0x9c, 0xb7, 0x5c, 0x42, 0x38, 0x50, 0xd5, 0x7a, 0xbb, 0x69,
	0x5a, 0xb8, 0xce, 0x20, 0xbc, 0x76, 0x81, 0x90, 0xe6, 0xd4, 0x1e, 0x4f, 0x4b, 0xec, 0xd7, 0x8e,
	0x4b, 0x24, 0xd6, 0xa0, 0x7c, 0x1d, 0xc2, 0x31, 0xed, 0x3e, 0x02, 0xdb, 0x66, 0xcd, 0xa4, 0xe5,
	0xa2, 0x55, 0x2d, 0x97, 0x78, 0xea, 0xa7, 0xbd, 0x7f, 0x01, 0xed, 0x7e, 0x72, 0xc2, 0x7b, 0xdc,
	0xa8, 0x37, 0x5b, 0xfc, 0xf9, 0xa7, 0xe4, 0xf3, 0xb5, 0xeb, 0x64, 0x65, 0xfe, 0x8b, 0x53, 0xec,
	0x40, 0xb1, 0x5e, 0xab, 0x99, 0x45, 0x36, 0xbd, 0xbe, 0xa9, 0x2d, 0x91, 0x98, 0xd9, 0xda, 0x31,
	0x69, 0xcd, 0x6c, 0x41, 0x40, 0x8b, 0x91, 0xf0, 0xf9, 0xf2, 0x56, 0x19, 0x82, 0xe8, 0x16, 0x8b,
	0x66, 0xa5, 0x22, 0x73, 0x86, 0xd0, 0x5c, 0x58, 0x8a, 0xbe, 0xcd, 0x4d, 0x99, 0x41, 0x6a, 0x9b,
	0x1b, 0x12, 0x83, 0xf4, 0x36, 0x2c, 0xac, 0x9d, 0x27, 0x77, 0x1c, 0xf2, 0x5f, 0x00, 0x60, 0xc9,
	0x15, 0x73, 0x0b, 0xeb, 0x88, 0x93, 0x08, 0x2d, 0x6f, 0xef, 0xb4, 0x20, 0xa8, 0x2d, 0x90, 0x60,
	0xbb, 0x01, 0x21, 0x7c, 0x58, 0xc2, 0x4a, 0xc2, 0xda, 0xdd, 0xe4, 0x94, 0xe2, 0x94, 0x14, 0x2b,
	0x8c, 0xac, 0xe5, 0xc8, 0xa9, 0x43, 0x7f, 0x28, 0x89, 0x73, 0xda, 0x6c, 0x51, 0xd3, 0xa8, 0xa2,
	0xef, 0x08, 0xa0, 0xfb, 0x6e, 0xd0, 0xfa, 0x36, 0x35, 0x9b, 0x4d, 0x74, 0x0d, 0xc1, 0xb5, 0xcb,
	0x6c, 0x30, 0x94, 0x0f, 0xee, 0xb1, 0x09, 0xcc, 0x71, 0xf1, 0x1e, 0x6f, 0xa3, 0x3b, 0x0e, 0x62,
	0x62, 0xb5, 0xdd, 0x64, 0xae, 0xf3, 0x38, 0x59, 0x34, 0x1a, 0x8d, 0x4a, 0x19, 0x7d, 0x55, 0x1d,
	0x9b, 0x15, 0x23, 0x61, 0x74, 0x41, 0x10, 0x61, 0xcb, 0x19, 0xc7, 0x0b, 0x16, 0xd0, 0x53, 0x17,
	0xeb, 0x35, 0xe6, 0x9a, 0xbc, 0x51, 0x8a, 0xae, 0x7d, 0x2e, 0x39, 0x71, 0xc3, 0x2f, 0x11, 0x30,
	0xe7, 0x13, 0x6d, 0xa3, 0x52, 0x6e, 0x5d, 0x50, 0x46, 0x1e, 0xc8, 0x52, 0x83, 0xd6, 0xb7, 0xb0,
	0x99, 0xf5, 0x9a, 0x51, 0xe1, 0xcb, 0xa3, 0x41, 0xeb, 0xcd, 0x76, 0xd5, 0xa4, 0x7c, 0x29, 0x33,
	0x3f, 0xc7, 0x26, 0x9a, 0x79, 0xd3, 0xd0, 0xda, 0x23, 0x64, 0x49, 0xfd, 0x1c, 0x15, 0xcb, 0xd8,
	0x6e, 0x34, 0xad, 0x4a, 0x5d, 0xb4, 0x34, 0x80, 0x43, 0x5a, 0x6e, 0x70, 0xfb, 0x63, 0xda, 0xe8,
	0x73, 0xcb, 0x25, 0xa6, 0x7c, 0x8e, 0x1c, 0x3f, 0xf0, 0x69, 0x29, 0x76, 0xb4, 0xdc, 0xd0, 0x15,
	0xf5, 0x45, 0x12, 0xad, 0x99, 0xed, 0x66, 0x0b, 0x57, 0x32, 0xf3, 0x57, 0xc6, 0x93, 0xd5, 0x72,
	0x0d, 0xbd, 0xc8, 0x32, 0x89, 0xd7, 0xcc, 0x96, 0xf1, 0x44, 0xbb, 0xdc, 0xba, 0x00, 0xe1, 0xb5,
	0xd7, 0x04, 0x08, 0xf1, 0x3f, 0x46, 0x46, 0x87, 0x50, 0xad, 0x6f, 0x96, 0x2b, 0xb8, 0xa3, 0x9e,
	0x22, 0x27, 0x1a, 0x26, 0x6d, 0x62, 0xa7, 0xac, 0x62, 0xbd, 0xda, 0x68, 0xb7, 0x58, 0x7f, 0xd0,
	0xa2, 0xb8, 0x05, 0x9a, 0x25, 0xab, 0xb5, 0x0b, 0x21, 0x6c, 0xe3, 0x4e, 0x79, 0x7b, 0xc7, 0xc4,
	0xbd, 0x77, 0xa7, 0x5e, 0x33, 0xb9, 0x7f, 0x6a, 0xe1, 0xd4, 0xb7, 0xf8, 0x2a, 0xf7, 0x15, 0x4a,
	0xe6, 0x2e, 0x6e, 0xc6, 0x0b, 0xd8, 0xe4, 0xa6, 0xd9, 0xb2, 0x5a, 0xf5, 0x86, 0xb5, 0x59, 0x7f,
	0x12, 0xa2, 0x6b, 0x8f, 0x90, 0xe5, 0xb9, 0xdf, 0x9a, 0x62, 0x19, 0xcd, 0x16, 0xdb, 0x04, 0xd9,
	0xf4, 0xe2, 0xb6, 0x0c, 0x41, 0x5e, 0x5a, 0xb5, 0x61, 0xd4, 0xd0, 0xfe, 0xc5, 0x1e, 0x1c, 0x5a,
	0x33, 0xc9, 0xca, 0xfc, 0x67, 0x59, 0xd8, 0x28, 0xa3, 0x52, 0x61, 0xbb, 0x84, 0x59, 0x2b, 0x9a,
	0x4d, 0x08, 0xa0, 0xaa, 0xb9, 0x6b, 0xd2, 0x0b, 0xf5, 0x1a, 0x5f, 0xbb, 0x18, 0x0b, 0xb3, 0x97,
	0x9f, 0x55, 0xa3, 0xd5, 0xa6, 0x58, 0xcc, 0x87, 0x02, 0x64, 0x51, 0xf9, 0x10, 0x91, 0x8d, 0x3e,
	0x9f, 0x68, 0xcb, 0xa4, 0xb4, 0x4e, 0xe1, 0x18, 0xda, 0x40, 0xcb, 0x2c, 0xee, 0xd4, 0xca, 0x45,
	0xa3, 0x22, 0x12, 0x59, 0xd8, 0x50, 0xae, 0xed, 0x1a, 0x15, 0x5c, 0xe2, 0xe6, 0x13, 0x6d, 0xb3,
	0xd9, 0xe2, 0x2d, 0xe5, 0xaa, 0xe7, 0xcd, 0x4d, 0xab, 0xd9, 0x28, 0xa3, 0xe7, 0x66, 0xdb, 0x79,
	0xb3, 0xdd, 0x6c, 0xf0, 0xd1, 0xa8, 0xd5, 0x6b, 0x3b, 0xed, 0xaa, 0x51, 0xb3, 0x5a, 0xd4, 0xd8,
	0xda, 0x2a, 0x17, 0x21, 0xac, 0xdd, 0x4b, 0x12, 0xc5, 0x4a, 0xbd, 0x5d, 0xb2, 0x4a, 0x46, 0xcb,
	0x28, 0x9a, 0xb8, 0x39, 0xe2, 0xe4, 0x3f, 0x79, 0xa1, 0xdc, 0x80, 0x08, 0x2e, 0xff, 0x76, 0xad,
	0xd9, 0x6e, 0x34, 0xea, 0x74, 0x6e, 0x34, 0x4f, 0x91, 0x13, 0x9b, 0x95, 0x7a, 0xf1, 0x1c, 0x46,
	0x3b, 0xed, 0xcd, 0x4a, 0xb9, 0x89, 0xa6, 0x1d, 0x65, 0xb6, 0x57, 0xab, 0x1a, 0xad, 0xe2, 0x8e,
	0x59, 0x62, 0x7b, 0x3a, 0xc4, 0xd6, 0x0a, 0x24, 0xe6, 0xfd, 0xee, 0x16, 0xfb, 0xc7, 0xd6, 0x8a,
	0xd5, 0x34, 0xe9, 0x2e, 0x8f, 0xa3, 0x96, 0x49, 0x7c, 0x93, 0xd6, 0x8d, 0x52, 0xd1, 0x60, 0x9d,
	0x58, 0x24, 0xd1, 0x46, 0x9d, 0x43, 0x68, 0xcd, 0x25, 0x77, 0xdd, 0xe4, 0x47, 0xb6, 0x38, 0x41,
	0x35, 0x9c, 0x7a, 0xbe, 0xe9, 0xed, 0x9a, 0xd4, 0xd8, 0x36, 0xad, 0xdd, 0x7a, 0xa5, 0x5d, 0x35,
	0xc5, 0x5a, 0x36, 0x8d, 0x73, 0x5e, 0x02, 0xdb, 0x33, 0xb0, 0x93, 0x35, 0xb3, 0xd9, 0xe4, 0x06,
	0x54, 0x6c, 0x37, 0x5b, 0xf5, 0xaa, 0x97, 0x21, 0xbc, 0x36, 0x25, 0x31, 0xef, 0xbb, 0x34, 0x61,
	0x71, 0x2d, 0xb3, 0xd6, 0xb2, 0xce, 0x1b, 0x15, 0xb1, 0xc2, 0x8c, 0x46, 0x83, 0x53, 0x90, 0x9b,
	0xf4, 0xf9, 0xa6, 0xb5, 0x65, 0x9a, 0xc2, 0xc2, 0x8b, 0x3b, 0x46, 0xcb, 0xaa, 0x94, 0x9b, 0x2d,
	0x08, 0x63, 0xde, 0xa2, 0x41, 0xd1, 0x61, 0x57, 0x20, 0x82, 0xad, 0xf3, 0xca, 0xe2, 0xce, 0x06,
	0x16, 0x98, 0xef, 0xa0, 0xe5, 0x12, 0x44, 0xd7, 0x3e, 0x9f, 0xc4, 0xbc, 0xef, 0xda, 0x70, 0xfa,
	0x58, 0x24, 0xd0, 0x34, 0x0d, 0x5a, 0xdc, 0xb1, 0xda, 0xb5, 0x32, 0x7a, 0xbd, 0xbb, 0xc9, 0x29,
	0x6a, 0x16, 0xeb, 0xd5, 0xaa, 0x59, 0x2b, 0xb1, 0xc5, 0x66, 0x9d, 0x2f, 0x97, 0xb6, 0x4d, 0x31,
	0xdf, 0x0d, 0x5a, 0xaf, 0xd6, 0xf9, 0xbe, 0xde, 0x6c, 0xa1, 0x1b, 0x63, 0xfb, 0x61, 0xd9, 0xd8,
	0xc4, 0xd0, 0xca, 0x28, 0x59, 0x35, 0x16, 0x34, 0x41, 0x98, 0x45, 0x87, 0x25, 0x2c, 0xb2, 0x5c,
	0xb2, 0x78, 0xd7, 0x21, 0xb2, 0x96, 0x22, 0x8b, 0xca, 0xe7, 0x71, 0xcc, 0x1d, 0xf3, 0xa6, 0xf2,
	0xd7, 0xf5, 0xcd, 0x7a, 0xb1, 0x6c, 0x54, 0xc4, 0x9c, 0xd0, 0x7a, 0xa9, 0x5d, 0xc4, 0x39, 0x79,
	0x53, 0x50, 0xb8, 0x45, 0xf9, 0x49, 0x1c, 0x33, 0x21, 0xd1, 0x47, 0xee, 0x74, 0x2a, 0x18, 0x44,
	0x55, 0x31, 0x16, 0x06, 0x22, 0xdd, 0x5d, 0xad, 0x65, 0x19, 0xb4, 0x55, 0x2e, 0x56, 0x4c, 0x58,
	0x64, 0x33, 0x20, 0x12, 0xb9, 0x47, 0x5d, 0x52, 0x93, 0x58, 0xa8, 0x05, 0xcb, 0x6a, 0x52, 0xb9,
	0x6a, 0x6c, 0x63, 0x30, 0xb6, 0x4a, 0xee, 0xf4, 0x92, 0x0e, 0x78, 0xb9, 0xe3, 0x38, 0xd6, 0xbc,
	0xcd, 0x5e, 0x33, 0xe0, 0x24, 0x0b, 0xd3, 0x79, 0x9a, 0x59, 0x35, 0xca, 0x15, 0x38, 0xa5, 0xe4,
	0x62, 0xb3, 0x56, 0xae, 0xc2, 0x9d, 0xd8, 0x46, 0xd1, 0x43, 0xab, 0x69, 0x56, 0x2a, 0x38, 0x92,
	0xf7, 0xe3, 0x1e, 0xed, 0x25, 0x56, 0x0d, 0x7a, 0xce, 0x6c, 0x35, 0x2a, 0x46, 0xd1, 0x84, 0x07,
	0xb0, 0x04, 0xef, 0x01, 0x35, 0x77, 0xcb, 0xe6, 0x79, 0x38, 0xbd, 0x56, 0x23, 0xcb, 0x73, 0x5f,
	0xf8, 0xb1, 0xb7, 0x5c, 0x35, 0x6e, 0x22, 0xcc, 0x1e, 0x8d, 0x56, 0xbd, 0x5a, 0x2e, 0xf2, 0x69,
	0x65, 0x43, 0x5a, 0x6f, 0xb7, 0x30, 0x8c, 0x82, 0x10, 0x96, 0x37, 0x3f, 0xc7, 0x10, 0xc6, 0x30,
	0x6f, 0x79, 0xee, 0x3b, 0x2b, 0xb6, 0x5d, 0x35, 0xea, 0xb5, 0x66, 0x9d, 0xb2, 0x22, 0x71, 0xef,
	0x33, 0x9b, 0x45, 0xee, 0x50, 0xa8, 0x21, 0x66, 0x3f, 0x4e, 0x22, 0x18, 0xe2, 0x35, 0x21, 0xcc,
	0x42, 0x96, 0xfa, 0xf9, 0x5a, 0xa5, 0x6e, 0x94, 0x9a, 0x7c, 0x03, 0xe2, 0xe7, 0x92, 0x05, 0x56,
	0x92, 0x51, 0x31, 0x39, 0x46, 0xd9, 0x13, 0xe6, 0x46, 0x63, 0xd8, 0x2c, 0xa3, 0x54, 0xc2, 0x2d,
	0x10, 0xe2, 0x98, 0x8e, 0x35, 0xe8, 0x40, 0x30, 0x04, 0x29, 0x95, 0x9b, 0x18, 0x8f, 0xb4, 0x69,
	0x05, 0x16, 0x99, 0xa9, 0xb4, 0x0c, 0xb6, 0xb5, 0x2d, 0xad, 0xad, 0x93, 0x95, 0xf9, 0x4f, 0xd6,
	0xd8, 0x4b, 0xe0, 0x22, 0xdb, 0x17, 0x70, 0xfb, 0xae, 0x6f, 0xd7, 0x21, 0x88, 0x52, 0xd5, 0x28,
	0xd7, 0x20, 0xb4, 0x19, 0xdf, 0x8c, 0xd6, 0x47, 0xce, 0x80, 0x4e, 0xf7, 0xfe, 0x57, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x08, 0xbb, 0x5f, 0x3d, 0xfd, 0x4e, 0x00, 0x00,
}
